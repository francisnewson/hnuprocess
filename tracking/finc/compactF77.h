/*****************************************************************/
/* Macros for interfacing COmPACT to Fortran                     */
/*                                 RWM 17/2/96                   */
/* Modified: 06/10/97  IWS  1) add AKS variables                 */
/* --------                 2) AKL variables in CmpEvent         */
/*           17/10/97  IWS  1) add missing define for XXXERRFLAGs*/
/*                             PAT,TAG,KSM,AKS,DCH,HOD,LKR,NUT,  */
/*                             NHO,HAC,MUV                       */
/*                          2) add pq variable in DCH struct     */
/*           31/10/97  IWS  1) update macros for new structures  */
/*                             of version 3.2 and use same order */
/*                             as file compact.x                 */
/*           18/11/97  IWS  1) update macros for new structure   */
/*                             nutkmu3                           */
/*           24/11/97  IWS  1) update macro pour montecarlo      */
/*           03/12/97  IWS  1) new variables for analysis        */
/*           10-12-97  IWS  1) Remove all comments at end of line*/
/*           19-12-97  IWS     introduce variables for analysis  */
/*           01-02-98  IWS     Keep uptodate for 3.4             */
/*           05-03-98  BH   1) add SuperCOmPACT variables        */
/*              05-98  BH+IWS changes for 4.1                    */
/*           06-06-98  IWS    correct EOB_AERRDEC typos          */
/*           30-07-98  IWS    missing definitions added:         */
/*                            BUR_TS_TSSCAL_NSCALER              */
/*                            BUR_TS_L2TSSCAL_NSCALER            */
/*                            EVT_TIMESTAMPL, EVT_TRIGWORDL      */
/*           14-08-98  IWS    missing def. added: BUR_MAJOERVER..*/
/*           14-09-98  IWS    update for 4.2                     */
/*           14-10-98  IWS    update                             */
/*           05-01-99  IWS    update for 4.3                     */
/*           17-02-99  BH     missing macros for MCPLANETRAK     */
/*           19-06-2000 IWS   update for 4.6                     */
/*           19-06-2001 MM    update for 5.0 :Ecellmax           */
/*           21-08-2001 MM&IWS add MCTAILCORR in clus in cmp+sc  */
/*                            and new beamint variables          */
/*****************************************************************/

#ifndef _compactF77_h
#define _compactF77_h 1

#include "offsets.h"

/**********************************************************************/
/*                        Random Event macros                         */
/**********************************************************************/
#define RNDM_TYPE       IE(CMPEVENT_RNDM+RNDMSUMMARY_TYPE)
#define RNDM_TIMESTAMP  IE(CMPEVENT_RNDM+RNDMSUMMARY_TIMESTAMP)
#define RNDM_RUN_BURST  IE(CMPEVENT_RNDM+RNDMSUMMARY_RUN_BURST)
#define RNDM_BURST      IE(CMPEVENT_RNDM+RNDMSUMMARY_BURST)
#define RNDM_RUN        IE(CMPEVENT_RNDM+RNDMSUMMARY_RUN)
#define RNDM_NUSED      IE(CMPEVENT_RNDM+RNDMSUMMARY_NUSED)
#define RNDM_SPSPHASE   QE(CMPEVENT_RNDM+RNDMSUMMARY_SPSPHASE)
#define RNDM_MAINPHASE  QE(CMPEVENT_RNDM+RNDMSUMMARY_MAINPHASE)
#define RNDM_PDSUSED    IE(CMPEVENT_RNDM+RNDMSUMMARY_PDSUSED)
#define RNDM_TOVRFLW(x) QE(CMPEVENT_RNDM+RNDMSUMMARY_TOVRFLW+((x)-1))
#define RNDM_ROVRFLW(x) IE(CMPEVENT_RNDM+RNDMSUMMARY_ROVRFLW+((x)-1))
#define RNDM_KLMONDNDT  QE(CMPEVENT_RNDM+RNDMSUMMARY_KLMONDNDT)
#define RNDM_KSMONDNDT  QE(CMPEVENT_RNDM+RNDMSUMMARY_KSMONDNDT)
#define RNDM_TAGMONDNDT QE(CMPEVENT_RNDM+RNDMSUMMARY_TAGMONDNDT)
#define RNDM_QXDNDT     QE(CMPEVENT_RNDM+RNDMSUMMARY_QXDNDT)
#define RNDM_AKSDNDT    QE(CMPEVENT_RNDM+RNDMSUMMARY_AKSDNDT)

/**********************************************************************/
/*                        KMu3 Event macros                           */
/**********************************************************************/
#define NUT_TIMESTAMP        IE(CMPEVENT_NUT+NUTKMU3TIMESTAMP)
#define NUT_MAXE             IE(CMPEVENT_NUT+NUTKMU3MAXE)
#define NUT_MAXCOG           IE(CMPEVENT_NUT+NUTKMU3MAXCOG)
#define NUT_MAXD             IE(CMPEVENT_NUT+NUTKMU3MAXD)
#define NUT_MAXZ             IE(CMPEVENT_NUT+NUTKMU3MAXZ)
#define NUT_MAXL             IE(CMPEVENT_NUT+NUTKMU3MAXL)
#define NUT_MAXTF            IE(CMPEVENT_NUT+NUTKMU3MAXTF)
#define NUT_SPY_X(x)         IE(CMPEVENT_NUT+NUTKMU3_SPY_X+((x)-1))
#define NUT_SPY_Y(x)         IE(CMPEVENT_NUT+NUTKMU3_SPY_Y+((x)-1))
#define NUT_SPY_XCBIT(x)     IE(CMPEVENT_NUT+NUTKMU3_SPY_XCBIT+((x)-1))
#define NUT_SPY_YCBIT(x)     IE(CMPEVENT_NUT+NUTKMU3_SPY_YCBIT+((x)-1))

/**********************************************************************/
/*                        TRIGgerHISTory macros                       */
/**********************************************************************/
#define TRHIST_TRIGWORD(x) IE(CMPEVENT_TRHIST+((x)-1)*L3TRIGHIST_SIZE+L3TRIGHIST_TRIGWORD)
#define TRHIST_TSTAMP_DIFF(x) IE(CMPEVENT_TRHIST+((x)-1)*L3TRIGHIST_SIZE+L3TRIGHIST_TSTAMP_DIFF)

/**********************************************************************/
/*                        TimeStamp macros                            */
/**********************************************************************/
#define TSTAMP_TIMESTAMP(x) IE(CMPEVENT_TSTAMP+((x)-1)*EVTTIMESTAMP_SIZE+EVTTIMESTAMP_TIMESTAMP)
#define TSTAMP_SOURCE(x) IE(CMPEVENT_TSTAMP+((x)-1)*EVTTIMESTAMP_SIZE+EVTTIMESTAMP_SOURCE)

/**********************************************************************/
/*                       Trigger bit macros                           */
/**********************************************************************/
#define TRIG_CHAN(x,y) IE(CMPEVENT_TRIG+((x)-1)*PMBTIMESLICE_SIZE+(y)-1)

/**********************************************************************/
/*                     Anti-Counter S Hit macros                      */
/*                     Added 06/10/97 by IWS                          */
/**********************************************************************/
#define AKS_TIME(x)  QE(CMPEVENT_AKS+((x)-1)*AKSCOUNTER_SIZE+AKSCOUNTER_TIME)
#define AKS_TIME2(x) QE(CMPEVENT_AKS+((x)-1)*AKSCOUNTER_SIZE+AKSCOUNTER_TIME2)
#define AKS_MIPS(x)  QE(CMPEVENT_AKS+((x)-1)*AKSCOUNTER_SIZE+AKSCOUNTER_MIPS)
#define AKS_ERROR(x) IE(CMPEVENT_AKS+((x)-1)*AKSCOUNTER_SIZE+AKSCOUNTER_ERROR)
/**********************************************************************/
/*                     Anti-Counter L Hit macros                      */
/**********************************************************************/
#define AKL_POCKET(x)  IE(CMPEVENT_AKL+((x)-1)*AKLHIT_SIZE+AKLHIT_POCKET)
#define AKL_LAYER(x)   IE(CMPEVENT_AKL+((x)-1)*AKLHIT_SIZE+AKLHIT_LAYER)
#define AKL_COUNTER(x) IE(CMPEVENT_AKL+((x)-1)*AKLHIT_SIZE+AKLHIT_COUNTER)
#define AKL_MIPS(x)    QE(CMPEVENT_AKL+((x)-1)*AKLHIT_SIZE+AKLHIT_MIPS)
#define AKL_TIME(x)    QE(CMPEVENT_AKL+((x)-1)*AKLHIT_SIZE+AKLHIT_TIME)
#define AKL_ONTFLAG(x) IE(CMPEVENT_AKL+((x)-1)*AKLHIT_SIZE+AKLHIT_ONTFLAG)

/**********************************************************************/
/*                       PMB scaler macros                            */
/**********************************************************************/
#define KLMON_N       IE(CMPEVENT_KLMON+PMBSCALER_N)
#define KLMON_DNDT    QE(CMPEVENT_KLMON+PMBSCALER_DNDT)
#define KLMON3US_N    IE(CMPEVENT_KLMON3US+PMBSCALER_N)
#define KLMON3US_DNDT QE(CMPEVENT_KLMON3US+PMBSCALER_DNDT)
#define QXMON_N       IE(CMPEVENT_QXMON+PMBSCALER_N)
#define QXMON_DNDT    QE(CMPEVENT_QXMON+PMBSCALER_DNDT)
#define QXMON3US_N    IE(CMPEVENT_QXMON3US+PMBSCALER_N)
#define QXMON3US_DNDT QE(CMPEVENT_QXMON3US+PMBSCALER_DNDT)
#define KSMON_N       IE(CMPEVENT_KSMON+PMBSCALER_N)
#define KSMON_DNDT    QE(CMPEVENT_KSMON+PMBSCALER_DNDT)
#define AKSMON_N      IE(CMPEVENT_AKSMON+PMBSCALER_N)
#define AKSMON_DNDT   QE(CMPEVENT_AKSMON+PMBSCALER_DNDT)

/**********************************************************************/
/*                       KS Monitor macros                            */
/**********************************************************************/
/* KS Monitor hit struct */
#define KSM_COUNTER(x)  IE(CMPEVENT_KSM+((x)-1)*KSMHIT_SIZE+KSMHIT_COUNTER)
#define KSM_PHEIGHT(x)  QE(CMPEVENT_KSM+((x)-1)*KSMHIT_SIZE+KSMHIT_PHEIGHT)
#define KSM_TIME(x)     QE(CMPEVENT_KSM+((x)-1)*KSMHIT_SIZE+KSMHIT_TIME)
#define KSM_PDSFLAG(x)  IE(CMPEVENT_KSM+((x)-1)*KSMHIT_SIZE+KSMHIT_PDSFLAG)

/**********************************************************************/
/*   Beam Intensity (integrator) Monitor macros                       */
/**********************************************************************/
/* KS Monitor hit struct */
#define BEAMINTKS_INTEG2US   IE(CMPEVENT_BEAMINTKS+BEAMINT_INTEG2US)
#define BEAMINTKS_INTEG15US  IE(CMPEVENT_BEAMINTKS+BEAMINT_INTEG15US)
#define BEAMINTKS_INTEG30US  IE(CMPEVENT_BEAMINTKS+BEAMINT_INTEG30US)
#define BEAMINTKS_INTEG60US  IE(CMPEVENT_BEAMINTKS+BEAMINT_INTEG60US)
#define BEAMINTKS_QUAL2US    IE(CMPEVENT_BEAMINTKS+BEAMINT_QUAL2US)
#define BEAMINTKS_QUAL15US   IE(CMPEVENT_BEAMINTKS+BEAMINT_QUAL15US)
#define BEAMINTKS_QUAL30US   IE(CMPEVENT_BEAMINTKS+BEAMINT_QUAL30US)
#define BEAMINTKS_QUAL60US   IE(CMPEVENT_BEAMINTKS+BEAMINT_QUAL60US)
#define BEAMINTKS_PACKSAMP(x)  IE(CMPEVENT_BEAMINTKS+BEAMINT_PACKSAMP+((x)-1))

#define BEAMINTKL_INTEG2US   IE(CMPEVENT_BEAMINTKL+BEAMINT_INTEG2US)
#define BEAMINTKL_INTEG15US  IE(CMPEVENT_BEAMINTKL+BEAMINT_INTEG15US)
#define BEAMINTKL_INTEG30US  IE(CMPEVENT_BEAMINTKL+BEAMINT_INTEG30US)
#define BEAMINTKL_INTEG60US  IE(CMPEVENT_BEAMINTKL+BEAMINT_INTEG60US)
#define BEAMINTKL_QUAL2US    IE(CMPEVENT_BEAMINTKL+BEAMINT_QUAL2US)
#define BEAMINTKL_QUAL15US   IE(CMPEVENT_BEAMINTKL+BEAMINT_QUAL15US)
#define BEAMINTKL_QUAL30US   IE(CMPEVENT_BEAMINTKL+BEAMINT_QUAL30US)
#define BEAMINTKL_QUAL60US   IE(CMPEVENT_BEAMINTKL+BEAMINT_QUAL60US)
#define BEAMINTKL_PACKSAMP(x)  IE(CMPEVENT_BEAMINTKL+BEAMINT_PACKSAMP+((x)-1))

/**********************************************************************/
/*                          Tagger macros                             */
/**********************************************************************/
/* Tagger hit struct */
#define TAG_HIT_AMPL(x,y)   QE(CMPEVENT_TAG+((x)-1)*TAGCHANNEL_SIZE+((y)-1)*TAGHIT_SIZE+TAGHIT_AMPL+TAGCHANNEL_HIT)
#define TAG_HIT_TIME(x,y)   QE(CMPEVENT_TAG+((x)-1)*TAGCHANNEL_SIZE+((y)-1)*TAGHIT_SIZE+TAGHIT_TIME+TAGCHANNEL_HIT)
#define TAG_HIT_CHI2(x,y)   QE(CMPEVENT_TAG+((x)-1)*TAGCHANNEL_SIZE+((y)-1)*TAGHIT_SIZE+TAGHIT_CHI2+TAGCHANNEL_HIT)
#define TAG_HIT_STATUS(x,y) IE(CMPEVENT_TAG+((x)-1)*TAGCHANNEL_SIZE+((y)-1)*TAGHIT_SIZE+TAGHIT_STATUS+TAGCHANNEL_HIT)

/* Tagger channel struct */
#define TAG_N(x)    IE(CMPEVENT_TAG+((x)-1)*TAGCHANNEL_SIZE+TAGCHANNEL_N)
#define TAG_NHIT(x) IE(CMPEVENT_TAG+((x)-1)*TAGCHANNEL_SIZE+TAGCHANNEL_NHIT)


/**********************************************************************/
/*             Saclay Driftchamber Reconstruction macros              */
/**********************************************************************/
/* Clusters of points in each view */
#define DCHCLU_VIEW(x) IE(CMPEVENT_DCHCLU + ((x)-1)*DCHCLUSTER_SIZE+DCHCLUSTER_VIEW)
#define DCHCLU_COORD(x) IE(CMPEVENT_DCHCLU + ((x)-1)*DCHCLUSTER_SIZE+DCHCLUSTER_COORD)
#define DCHCLU_TIME(x) IE(CMPEVENT_DCHCLU + ((x)-1)*DCHCLUSTER_SIZE+DCHCLUSTER_TIME)
/* Track hit struct */
#define TRACK_HIT_PLANE(x,y) IE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_HIT+((y)-1)*DCHHIT_SIZE+DCHHIT_PLANE)
#define TRACK_HIT_WIRE(x,y)  IE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_HIT+((y)-1)*DCHHIT_SIZE+DCHHIT_WIRE)
#define TRACK_HIT_TIME(x,y)  QE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_HIT+((y)-1)*DCHHIT_SIZE+DCHHIT_TIME)
#define TRACK_HIT_DIST(x,y)  QE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_HIT+((y)-1)*DCHHIT_SIZE+DCHHIT_DIST)
#define TRACK_HIT_POS(x,y)   QE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_HIT+((y)-1)*DCHHIT_SIZE+DCHHIT_POS)

/* Track space point struct */
#define TRACK_SPNT_X(x,y) QE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_SPNT+((y)-1)*DCHSPACEPOINT_SIZE+DCHSPACEPOINT_X)
#define TRACK_SPNT_Y(x,y) QE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_SPNT+((y)-1)*DCHSPACEPOINT_SIZE+DCHSPACEPOINT_Y)
#define TRACK_SPNT_Z(x,y) QE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_SPNT+((y)-1)*DCHSPACEPOINT_SIZE+DCHSPACEPOINT_Z)

/* Track struct */
#define TRACK_PQ(x)            QE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_PQ)
#define TRACK_P(x)             QE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_P)
#define TRACK_Q(x)             IE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_Q)
#define TRACK_PERR(x)          QE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_PERR)
#define TRACK_CHI2(x)          QE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_CHI2)
#define TRACK_BX(x)            QE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_BX)
#define TRACK_BY(x)            QE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_BY)
#define TRACK_BDXDZ(x)         QE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_BDXDZ)
#define TRACK_BDYDZ(x)         QE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_BDYDZ)
#define TRACK_X(x)             QE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_X)
#define TRACK_Y(x)             QE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_Y)
#define TRACK_DXDZ(x)          QE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_DXDZ)
#define TRACK_DYDZ(x)          QE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_DYDZ)
#define TRACK_TIME(x)          QE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_TIME)
#define TRACK_QUALITY(x)       QE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_QUALITY)
#define TRACK_NSPNT(x)         IE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_NSPNT)
#define TRACK_HODTIME(x)       QE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_HODTIME)
#define TRACK_HODSTATUS(x)     IE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_HODSTATUS)
#define TRACK_NHITS(x)         IE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_NHITS)
#define TRACK_NHIT(x)          IE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_NHIT)
/* structure DCHhits goes here for DCH events */
#define TRACK_EXHAC(x)         QE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_EXHAC)
#define TRACK_EYHAC(x)         QE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_EYHAC)
#define TRACK_DDEADCELL(x)     QE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_DDEADCELL)
#define TRACK_SIGXX(x)         QE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_SIGXX)
#define TRACK_SIGYY(x)         QE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_SIGYY)
#define TRACK_SIGDXDX(x)       QE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_SIGDXDX)
#define TRACK_SIGDYDY(x)       QE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_SIGDYDY)
#define TRACK_SIGXDX(x)        QE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_SIGXDX)
#define TRACK_SIGXY(x)         QE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_SIGXY)
#define TRACK_SIGDXY(x)        QE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_SIGDXY)
#define TRACK_SIGXDY(x)        QE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_SIGXDY)
#define TRACK_SIGDXDY(x)       QE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_SIGDXDY)
#define TRACK_SIGYDY(x)        QE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_SIGYDY)
#define TRACK_HITPATTERN(x)    IE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_HITPATTERN)
#define TRACK_EFFICIENCY(x,y)  IE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_EFFICIENCY+((y)-1))
#define TRACK_LKRCLU(x)        IE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_LKRCLU)
#define TRACK_EOVP(x)          QE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_EOVP)
#define TRACK_ESPY(x)          QE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_ESPY)
#define TRACK_MUVREJECT(x)     QE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_MUVREJECT)
#define TRACK_MUVTIME(x)       QE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_MUVTIME)
#define TRACK_ANAVAR(x,y)      QE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_ANAVAR+((y)-1))
#define TRACK_ANAFLAG(x,y)     IE(CMPEVENT_TRACK+((x)-1)*DCHTRACK_SIZE+DCHTRACK_ANAFLAG+((y)-1))
/* Corrected Track struct */

/* Track space point struct */
#define TRACKCORR_SPNT_X(x,y)      QE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_SPNT+((y)-1)*DCHSPACEPOINT_SIZE+DCHSPACEPOINT_X)
#define TRACKCORR_SPNT_Y(x,y)      QE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_SPNT+((y)-1)*DCHSPACEPOINT_SIZE+DCHSPACEPOINT_Y)
#define TRACKCORR_SPNT_Z(x,y)      QE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_SPNT+((y)-1)*DCHSPACEPOINT_SIZE+DCHSPACEPOINT_Z)
#define TRACKCORR_PQ(x)            QE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_PQ)
#define TRACKCORR_P(x)             QE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_P)
#define TRACKCORR_Q(x)             IE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_Q)
#define TRACKCORR_PERR(x)          QE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_PERR)
#define TRACKCORR_ERRORMATRIX(x,y) QE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_ERRORMATRIX+((y)-1))
#define TRACKCORR_CHI2(x)          QE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_CHI2)
#define TRACKCORR_BX(x)            QE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_BX)
#define TRACKCORR_BY(x)            QE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_BY)
#define TRACKCORR_BDXDZ(x)         QE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_BDXDZ)
#define TRACKCORR_BDYDZ(x)         QE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_BDYDZ)
#define TRACKCORR_X(x)             QE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_X)
#define TRACKCORR_Y(x)             QE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_Y)
#define TRACKCORR_DXDZ(x)          QE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_DXDZ)
#define TRACKCORR_DYDZ(x)          QE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_DYDZ)
#define TRACKCORR_TIME(x)          QE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_TIME)
#define TRACKCORR_QUALITY(x)       QE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_QUALITY)
#define TRACKCORR_NSPNT(x)         IE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_NSPNT)
#define TRACKCORR_HODTIME(x)       QE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_HODTIME)
#define TRACKCORR_HODSTATUS(x)     IE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_HODSTATUS)
#define TRACKCORR_NHITS(x)         IE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_NHITS)
#define TRACKCORR_NHIT(x)          IE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_NHIT)
/* structure DCHhits goes here for DCH events */
#define TRACKCORR_EXHAC(x)         QE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_EXHAC)
#define TRACKCORR_EYHAC(x)         QE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_EYHAC)
#define TRACKCORR_DDEADCELL(x)     QE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_DDEADCELL)
#define TRACKCORR_SIGXX(x)         QE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_SIGXX)
#define TRACKCORR_SIGYY(x)         QE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_SIGYY)
#define TRACKCORR_SIGDXDX(x)       QE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_SIGDXDX)
#define TRACKCORR_SIGDYDY(x)       QE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_SIGDYDY)
#define TRACKCORR_SIGXDX(x)        QE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_SIGXDX)
#define TRACKCORR_SIGXY(x)         QE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_SIGXY)
#define TRACKCORR_SIGDXY(x)        QE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_SIGDXY)
#define TRACKCORR_SIGXDY(x)        QE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_SIGXDY)
#define TRACKCORR_SIGDXDY(x)       QE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_SIGDXDY)
#define TRACKCORR_SIGYDY(x)        QE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_SIGYDY)
#define TRACKCORR_HITPATTERN(x)    IE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_HITPATTERN)
#define TRACKCORR_EFFICIENCY(x,y)  IE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_EFFICIENCY+((y)-1))
#define TRACKCORR_LKRCLU(x)        IE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_LKRCLU)
#define TRACKCORR_EOVP(x)          QE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_EOVP)
#define TRACKCORR_ESPY(x)          QE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_ESPY)
#define TRACKCORR_MUVREJECT(x)     QE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_MUVREJECT)
#define TRACKCORR_MUVTIME(x)       QE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_MUVTIME)
#define TRACKCORR_ANAVAR(x,y)      QE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_ANAVAR+((y)-1))
#define TRACKCORR_ANAFLAG(x,y)     IE(CMPEVENT_TRACKCORR+((x)-1)*DCHTRACK_SIZE+DCHTRACK_ANAFLAG+((y)-1))

/* Vertex struct */
#define VERTEX_X(x)             QE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_X)
#define VERTEX_Y(x)             QE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_Y)
#define VERTEX_Z(x)             QE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_Z)
#define VERTEX_CHI2(x)          QE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_CHI2)
#define VERTEX_BDXDZNEG(x)      QE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_BDXDZNEG)
#define VERTEX_BDYDZNEG(x)      QE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_BDYDZNEG)
#define VERTEX_BDXDZPOS(x)      QE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_BDXDZPOS)
#define VERTEX_BDYDZPOS(x)      QE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_BDYDZPOS)
#define VERTEX_CDA(x)           QE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_CDA)
#define VERTEX_ERRORFLAG(x)     IE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_ERRORFLAG)
#define VERTEX_BLUEFLAG(x)      IE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_BLUEFLAG)
#define VERTEX_PPIPI(x)         QE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_PPIPI)
#define VERTEX_MPIPI(x)         QE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_MPIPI)
#define VERTEX_MLAMBDA(x)       QE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_MLAMBDA)
#define VERTEX_MALAMBDA(x)      QE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_MALAMBDA)
#define VERTEX_IPTRK(x)        (IE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_IPTRK)+1)
#define VERTEX_INTRK(x)        (IE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_INTRK)+1)
#define VERTEX_RCOG(x)          QE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_RCOG)
#define VERTEX_PTSQKS(x)        QE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_PTSQKS)
#define VERTEX_PTSQKL(x)        QE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_PTSQKL)
#define VERTEX_PTPRIMEKS(x)     QE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_PTPRIMEKS)
#define VERTEX_PTPRIMEKL(x)     QE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_PTPRIMEKL)
#define VERTEX_DTINTKS(x)       QE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_DTINTKS)
#define VERTEX_DTINTKL(x)       QE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_DTINTKL)
#define VERTEX_DTINVKS(x)       QE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_DTINTKS)
#define VERTEX_DTINVKL(x)       QE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_DTINTKL)
#define VERTEX_DTOUTTKS(x)      QE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_DTOUTTKS)
#define VERTEX_DTOUTTKL(x)      QE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_DTOUTTKL)
#define VERTEX_DTOUTVKS(x)      QE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_DTOUTVKS)
#define VERTEX_DTOUTVKL(x)      QE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_DTOUTVKL)
#define VERTEX_DTOUTVKL(x)      QE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_DTOUTVKL)
#define VERTEX_EANGLE(x)        QE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_EANGLE)
#define VERTEX_PHIDECAY(x)      QE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_PHIDECAY)
#define VERTEX_CTAU(x)          QE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_CTAU)
#define VERTEX_ASP(x)           QE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_ASP)
#define VERTEX_HODOTIMEANA(x)   QE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_HODOTIMEANA)
#define VERTEX_TYPE(x)          IE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_TYPE)
#define VERTEX_CUTS(x)          IE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_CUTS)
#define VERTEX_IFLAG(x)         IE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_IFLAG)
#define VERTEX_ANAVAR(x,y)      QE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_ANAVAR+((y)-1))
#define VERTEX_ANAFLAG(x,y)     IE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_ANAFLAG+((y)-1))
#define VERTEX_NITRACK(x)       IE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_NITRACK)
#define VERTEX_ITRACK(x,y)      IE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_ITRACK+((y)-1))
#define VERTEX_NBDXDZTRACK(x)   IE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_NBDXDZTRACK)
#define VERTEX_BDXDZTRACK(x,y)      QE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_BDXDZTRACK+((y)-1))
#define VERTEX_NBDYDZTRACK(x)       IE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_NBDYDZTRACK)
#define VERTEX_BDYDZTRACK(x,y)      QE(CMPEVENT_VERTEX+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_BDYDZTRACK+((y)-1))

/* Corrected Vertex struct */
#define VERTEXCORR_X(x)             QE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_X)
#define VERTEXCORR_Y(x)             QE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_Y)
#define VERTEXCORR_Z(x)             QE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_Z)
#define VERTEXCORR_CHI2(x)          QE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_CHI2)
#define VERTEXCORR_BDXDZNEG(x)      QE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_BDXDZNEG)
#define VERTEXCORR_BDYDZNEG(x)      QE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_BDYDZNEG)
#define VERTEXCORR_BDXDZPOS(x)      QE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_BDXDZPOS)
#define VERTEXCORR_BDYDZPOS(x)      QE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_BDYDZPOS)
#define VERTEXCORR_CDA(x)           QE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_CDA)
#define VERTEXCORR_ERRORFLAG(x)     IE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_ERRORFLAG)
#define VERTEXCORR_BLUEFLAG(x)      IE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_BLUEFLAG)
#define VERTEXCORR_TYPE(x)          IE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_TYPE)
#define VERTEXCORR_PPIPI(x)         QE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_PPIPI)
#define VERTEXCORR_MPIPI(x)         QE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_MPIPI)
#define VERTEXCORR_MLAMBDA(x)       QE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_MLAMBDA)
#define VERTEXCORR_MALAMBDA(x)      QE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_MALAMBDA)
#define VERTEXCORR_IPTRK(x)         IE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_IPTRK+1)
#define VERTEXCORR_INTRK(x)         IE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_INTRK+1)
#define VERTEXCORR_RCOG(x)          QE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_RCOG)
#define VERTEXCORR_PTSQKS(x)        QE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_PTSQKS)
#define VERTEXCORR_PTSQKL(x)        QE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_PTSQKL)
#define VERTEXCORR_PTPRIMEKS(x)     QE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_PTPRIMEKS)
#define VERTEXCORR_PTPRIMEKL(x)     QE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_PTPRIMEKL)
#define VERTEXCORR_DTINTKS(x)       QE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_DTINTKS)
#define VERTEXCORR_DTINTKL(x)       QE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_DTINTKL)
#define VERTEXCORR_DTINVKS(x)       QE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_DTINTKS)
#define VERTEXCORR_DTINVKL(x)       QE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_DTINTKL)
#define VERTEXCORR_DTOUTTKS(x)      QE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_DTOUTTKS)
#define VERTEXCORR_DTOUTTKL(x)      QE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_DTOUTTKL)
#define VERTEXCORR_DTOUTVKS(x)      QE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_DTOUTVKS)
#define VERTEXCORR_DTOUTVKL(x)      QE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_DTOUTVKL)
#define VERTEXCORR_EANGLE(x)        QE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_EANGLE)
#define VERTEXCORR_CTAU(x)          QE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_CTAU)
#define VERTEXCORR_PHIDECAY(x)      QE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_PHIDECAY)
#define VERTEXCORR_ASP(x)           QE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_ASP)
#define VERTEXCORR_HODOTIMEANA(x)   QE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_HODOTIMEANA)
#define VERTEXCORR_TYPE(x)          IE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_TYPE)
#define VERTEXCORR_CUTS(x)          IE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_CUTS)
#define VERTEXCORR_IFLAG(x)         IE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_IFLAG)
#define VERTEXCORR_ANAVAR(x,y)      QE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_ANAVAR+((y)-1))
#define VERTEXCORR_ANAFLAG(x,y)     IE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_ANAFLAG+((y)-1))
#define VERTEXCORR_NITRACK(x)       IE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_NITRACK)
#define VERTEXCORR_ITRACK(x,y)      IE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_ITRACK+((y)-1))
#define VERTEXCORR_NBDXDZTRACK(x)   IE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_NBDXDZTRACK)
#define VERTEXCORR_BDXDZTRACK(x,y)  QE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_BDXDZTRACK+((y)-1))
#define VERTEXCORR_NBDYDZTRACK(x)   IE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_NBDYDZTRACK)
#define VERTEXCORR_BDYDZTRACK(x,y)  QE(CMPEVENT_VERTEXCORR+((x)-1)*DCHVERTEX_SIZE+DCHVERTEX_BDYDZTRACK+((y)-1))


/**********************************************************************/
/*             New Driftchamber Readout macros                        */
/**********************************************************************/
/* DCH New readout test Hit structure */
#define DCHNRO_EVTIME              QE(CMPEVENT_DCHNRO+DCHNROGEN_EVTIME)
#define DCHNRO_TIMEST              IE(CMPEVENT_DCHNRO+DCHNROGEN_TIMEST)
#define DCHNRO_TRIGW               IE(CMPEVENT_DCHNRO+DCHNROGEN_TRIGW)
#define DCHNRO_FLAG                IE(CMPEVENT_DCHNRO+DCHNROGEN_FLAG)
#define DCHNRO_NHIT                IE(CMPEVENT_DCHNRO+DCHNROGEN_NHIT)
#define DCHNRO_NDOF                IE(CMPEVENT_DCHNRO+DCHNROGEN_NDOF)

#define DCHNRO_HIT_ID(x)           QE(CMPEVENT_DCHNRO+DCHNROGEN_HIT+DCHNROHIT_ID+((x)-1)*DCHNROHIT_SIZE)
#define DCHNRO_HIT_IPLANE(x)       QE(CMPEVENT_DCHNRO+((x)-1)*DCHNROHIT_SIZE+DCHNROHIT_IPLANE+DCHNROGEN_HIT)
#define DCHNRO_HIT_IWIRE(x)        QE(CMPEVENT_DCHNRO+((x)-1)*DCHNROHIT_SIZE+DCHNROHIT_IWIRE+DCHNROGEN_HIT)
#define DCHNRO_HIT_TIME(x)         QE(CMPEVENT_DCHNRO+((x)-1)*DCHNROHIT_SIZE+DCHNROHIT_TIME+DCHNROGEN_HIT)
#define DCHNRO_HIT_ITRACK(x)       QE(CMPEVENT_DCHNRO+((x)-1)*DCHNROHIT_SIZE+DCHNROHIT_ITRACK+DCHNROGEN_HIT)
#define DCHNRO_HIT_ITSLOT(x)       QE(CMPEVENT_DCHNRO+((x)-1)*DCHNROHIT_SIZE+DCHNROHIT_ITSLOT+DCHNROGEN_HIT)

#define DCHNRO_DOF_DCHERROR(x)     IE(CMPEVENT_DCHNRO+((x)-1)*DCHNRODOF_SIZE+DCHNRODOF_DCHERROR+DCHNROGEN_DOF)
#define DCHNRO_DOF_NRO(x)          IE(CMPEVENT_DCHNRO+((x)-1)*DCHNRODOF_SIZE+DCHNRODOF_NRO+DCHNROGEN_DOF)
#define DCHNRO_DOF_IPL(x)          IE(CMPEVENT_DCHNRO+((x)-1)*DCHNRODOF_SIZE+DCHNRODOF_IPL+DCHNROGEN_DOF)
#define DCHNRO_DOF_RSTATUS(x)      IE(CMPEVENT_DCHNRO+((x)-1)*DCHNRODOF_SIZE+DCHNRODOF_RSTATUS+DCHNROGEN_DOF)
#define DCHNRO_DOF_NTDOF(x)        IE(CMPEVENT_DCHNRO+((x)-1)*DCHNRODOF_SIZE+DCHNRODOF_NTDOF+DCHNROGEN_DOF)

#define DCHNRO_DOF_TDOF_TTIME(x,y) QE(CMPEVENT_DCHNRO+DCHNROGEN_DOF+DCHNRODOF_TDOF+((x)-1)*DCHNRODOF_SIZE+DCHNROTDOF_TTIME+((y)-1)*DCHNROTDOF_SIZE)

/**********************************************************************/
/* Drift Chamber Data Structures (Ferrara RO)                         */
/**********************************************************************/
#define DCHFE_INTTRIG              IE(CMPEVENT_DCHFE+DCHFESTATUS_INTTRIG)
#define DCHFE_F1PAR                IE(CMPEVENT_DCHFE+DCHFESTATUS_F1PAR)
#define DCHFE_PIPEFULL             IE(CMPEVENT_DCHFE+DCHFESTATUS_PIPEFULL)
#define DCHFE_PIPEFULLWIRE(x)      IE(CMPEVENT_DCHFE+DCHFESTATUS_PIPEFULLWIRE+((x)-1))

/**********************************************************************/
/* Drift Chamber Multiplicity Structures                              */
/**********************************************************************/
#define DCHEFFMULT_MBXPLANEEFF(x)    IE(CMPEVENT_DCHEFFMULT+DCHMULT_MBXPLANEEFF+((x)-1))
#define DCHEFFMULT_L1TRK24EFF(x)     IE(CMPEVENT_DCHEFFMULT+DCHMULT_L1TRK24EFF+((x)-1))
#define DCHEFFMULT_DCHSNOWERR(x)     IE(CMPEVENT_DCHEFFMULT+DCHMULT_DCHSNOWERR+((x)-1))
#define DCHEFFMULT_MBXMULT           IE(CMPEVENT_DCHEFFMULT+DCHMULT_MBXMULT)
#define DCHEFFMULT_TRK24ON           IE(CMPEVENT_DCHEFFMULT+DCHMULT_TRK24ON)
/**********************************************************************/
/*             Siegen Driftchamber Reconstruction macros              */
/**********************************************************************/
/* Siegen space point struct */
#define CHAMBER_SPNT_X(x,y)           QE(CMPEVENT_CHAMBER+((x)-1)*SGNCHAMBER_SIZE+SGNCHAMBER_SPNT+((y)-1)*SGNSPACEPOINT_SIZE+SGNSPACEPOINT_X)
#define CHAMBER_SPNT_Y(x,y)           QE(CMPEVENT_CHAMBER+((x)-1)*SGNCHAMBER_SIZE+SGNCHAMBER_SPNT+((y)-1)*SGNSPACEPOINT_SIZE+SGNSPACEPOINT_Y)
#define CHAMBER_SPNT_NWIRE(x,y)       IE(CMPEVENT_CHAMBER+((x)-1)*SGNCHAMBER_SIZE+SGNCHAMBER_SPNT+((y)-1)*SGNSPACEPOINT_SIZE+SGNSPACEPOINT_NWIRE)
#define CHAMBER_SPNT_WIRE_NUMBER(x,y,z)    IE(CMPEVENT_CHAMBER+((x)-1)*SGNCHAMBER_SIZE+SGNCHAMBER_SPNT+((y)-1)*SGNSPACEPOINT_SIZE+SGNSPACEPOINT_WIRE+((z)-1)*SGNWIRE_SIZE+SGNWIRE_NUMBER)
#define CHAMBER_SPNT_WIRE_DRIFTTIME(x,y,z) QE(CMPEVENT_CHAMBER+((x)-1)*SGNCHAMBER_SIZE+SGNCHAMBER_SPNT+((y)-1)*SGNSPACEPOINT_SIZE+SGNSPACEPOINT_WIRE+((z)-1)*SGNWIRE_SIZE+SGNWIRE_DRIFTTIME)
#define CHAMBER_SPNT_QUALITY(x,y,z)   IE(CMPEVENT_CHAMBER+((x)-1)*SGNCHAMBER_SIZE+SGNCHAMBER_SPNT+((y)-1)*SGNSPACEPOINT_SIZE+SGNSPACEPOINT_QUALITY+(z)-1)

/* Siegen accidental spacepoint struct */
#define CHAMBER_ACC_X(x,y)    QE(CMPEVENT_CHAMBER+((x)-1)*SGNCHAMBER_SIZE+SGNCHAMBER_ACC+((y)-1)*SGNACCIDENTAL_SIZE+SGNACCIDENTAL_X)
#define CHAMBER_ACC_Y(x,y)    QE(CMPEVENT_CHAMBER+((x)-1)*SGNCHAMBER_SIZE+SGNCHAMBER_ACC+((y)-1)*SGNACCIDENTAL_SIZE+SGNACCIDENTAL_Y)
#define CHAMBER_ACC_TIME(x,y) QE(CMPEVENT_CHAMBER+((x)-1)*SGNCHAMBER_SIZE+SGNCHAMBER_ACC+((y)-1)*SGNACCIDENTAL_SIZE+SGNACCIDENTAL_TIME)

/* Siegen chamber struct */
#define CHAMBER_NSPNT(x)     IE(CMPEVENT_CHAMBER+((x)-1)*SGNCHAMBER_SIZE+SGNCHAMBER_NSPNT)
#define CHAMBER_NACC(x)      IE(CMPEVENT_CHAMBER+((x)-1)*SGNCHAMBER_SIZE+SGNCHAMBER_NACC)
#define CHAMBER_TOVRFLW(x,y) QE(CMPEVENT_CHAMBER+((x)-1)*SGNCHAMBER_SIZE+SGNCHAMBER_TOVRFLW+(y)-1)
#define CHAMBER_ROVRFLW(x)   IE(CMPEVENT_CHAMBER+((x)-1)*SGNCHAMBER_SIZE+SGNCHAMBER_ROVRFLW)

/* Siegen Track struct */
#define SGNTRK_Q(x)      QE(CMPEVENT_SGNTRK+((x)-1)*SGNTRACK_SIZE+SGNTRACK_P)
#define SGNTRK_P(x)  ABS(QE(CMPEVENT_SGNTRK+((x)-1)*SGNTRACK_SIZE+SGNTRACK_P))
#define SGNTRK_CHI2(x)   QE(CMPEVENT_SGNTRK+((x)-1)*SGNTRACK_SIZE+SGNTRACK_CHI2)
#define SGNTRK_BX(x)     QE(CMPEVENT_SGNTRK+((x)-1)*SGNTRACK_SIZE+SGNTRACK_BX)
#define SGNTRK_BY(x)     QE(CMPEVENT_SGNTRK+((x)-1)*SGNTRACK_SIZE+SGNTRACK_BY)
#define SGNTRK_BDXDZ(x)  QE(CMPEVENT_SGNTRK+((x)-1)*SGNTRACK_SIZE+SGNTRACK_BDXDZ)
#define SGNTRK_BDYDZ(x)  QE(CMPEVENT_SGNTRK+((x)-1)*SGNTRACK_SIZE+SGNTRACK_BDYDZ)
#define SGNTRK_X(x)      QE(CMPEVENT_SGNTRK+((x)-1)*SGNTRACK_SIZE+SGNTRACK_X)
#define SGNTRK_Y(x)      QE(CMPEVENT_SGNTRK+((x)-1)*SGNTRACK_SIZE+SGNTRACK_Y)
#define SGNTRK_DXDZ(x)   QE(CMPEVENT_SGNTRK+((x)-1)*SGNTRACK_SIZE+SGNTRACK_DXDZ)
#define SGNTRK_DYDZ(x)   QE(CMPEVENT_SGNTRK+((x)-1)*SGNTRACK_SIZE+SGNTRACK_DYDZ)
#define SGNTRK_SPNT(x,y) IE(CMPEVENT_SGNTRK+((x)-1)*SGNTRACK_SIZE+SGNTRACK_SPNT+(y)-1)

/* Siegen vertex struct */
#define SGNVTX_X(x)    QE(CMPEVENT_SGNVTX+((x)-1)*SGNVERTEX_SIZE+SGNVERTEX_X)
#define SGNVTX_Y(x)    QE(CMPEVENT_SGNVTX+((x)-1)*SGNVERTEX_SIZE+SGNVERTEX_Y)
#define SGNVTX_Z(x)    QE(CMPEVENT_SGNVTX+((x)-1)*SGNVERTEX_SIZE+SGNVERTEX_Z)
#define SGNVTX_CDA(x)  QE(CMPEVENT_SGNVTX+((x)-1)*SGNVERTEX_SIZE+SGNVERTEX_CDA)
#define SGNVTX_FLAG(x) IE(CMPEVENT_SGNVTX+((x)-1)*SGNVERTEX_SIZE+SGNVERTEX_FLAG)


/**********************************************************************/
/*                      Charged Hodoscope Macros                      */
/**********************************************************************/
/* Hodoscope hit struct */
#define HOD_PLANE(x)   IE(CMPEVENT_HOD+((x)-1)*HODHIT_SIZE+HODHIT_PLANE)
#define HOD_COUNTER(x) IE(CMPEVENT_HOD+((x)-1)*HODHIT_SIZE+HODHIT_COUNTER)
#define HOD_X(x)       QE(CMPEVENT_HOD+((x)-1)*HODHIT_SIZE+HODHIT_X)
#define HOD_Y(x)       QE(CMPEVENT_HOD+((x)-1)*HODHIT_SIZE+HODHIT_Y)
#define HOD_PHEIGHT(x) QE(CMPEVENT_HOD+((x)-1)*HODHIT_SIZE+HODHIT_PHEIGHT)
#define HOD_TIME(x)    QE(CMPEVENT_HOD+((x)-1)*HODHIT_SIZE+HODHIT_TIME)
#define HOD_UCTIME(x)  QE(CMPEVENT_HOD+((x)-1)*HODHIT_SIZE+HODHIT_UCTIME)
#define HOD_PDSFLAG(x) IE(CMPEVENT_HOD+((x)-1)*HODHIT_SIZE+HODHIT_PDSFLAG)


/**********************************************************************/
/*              Charged Hodoscope for Neutral Events Macros           */
/**********************************************************************/
/* Hodoscope hit struct */
#define HODNEUT_PLANE(x)   IE(CMPEVENT_HODNEUT+((x)-1)*HODNEUTHIT_SIZE+HODNEUTHIT_PLANE)
#define HODNEUT_COUNTER(x) IE(CMPEVENT_HODNEUT+((x)-1)*HODNEUTHIT_SIZE+HODNEUTHIT_COUNTER)
#define HODNEUT_PULSE(x)   QE(CMPEVENT_HODNEUT+((x)-1)*HODNEUTHIT_SIZE+HODNEUTHIT_PULSE)
#define HODNEUT_TIME(x)    QE(CMPEVENT_HODNEUT+((x)-1)*HODNEUTHIT_SIZE+HODNEUTHIT_TIME)


/**********************************************************************/
/*                      Liquid Krypton Macros                         */
/**********************************************************************/
/* LKR cluster struct */
#define LKR_ENERGY(x)      QE(CMPEVENT_LKR+((x)-1)*LKRCLUSTER_SIZE+LKRCLUSTER_ENERGY)
#define LKR_EENERGY(x)     QE(CMPEVENT_LKR+((x)-1)*LKRCLUSTER_SIZE+LKRCLUSTER_EENERGY)
#define LKR_E2SAMPALL(x)   QE(CMPEVENT_LKR+((x)-1)*LKRCLUSTER_SIZE+LKRCLUSTER_E2SAMPALL)
#define LKR_E77(x)         QE(CMPEVENT_LKR+((x)-1)*LKRCLUSTER_SIZE+LKRCLUSTER_E77)
#define LKR_X(x)           QE(CMPEVENT_LKR+((x)-1)*LKRCLUSTER_SIZE+LKRCLUSTER_X)
#define LKR_Y(x)           QE(CMPEVENT_LKR+((x)-1)*LKRCLUSTER_SIZE+LKRCLUSTER_Y)
#define LKR_RMSX(x)        QE(CMPEVENT_LKR+((x)-1)*LKRCLUSTER_SIZE+LKRCLUSTER_RMSX)
#define LKR_RMSY(x)        QE(CMPEVENT_LKR+((x)-1)*LKRCLUSTER_SIZE+LKRCLUSTER_RMSY)
#define LKR_IMAX(x)        IE(CMPEVENT_LKR+((x)-1)*LKRCLUSTER_SIZE+LKRCLUSTER_IMAX)
#define LKR_TIME(x)        QE(CMPEVENT_LKR+((x)-1)*LKRCLUSTER_SIZE+LKRCLUSTER_TIME)
#define LKR_ETIME(x)       QE(CMPEVENT_LKR+((x)-1)*LKRCLUSTER_SIZE+LKRCLUSTER_ETIME)
#define LKR_TLATCELL(x)    QE(CMPEVENT_LKR+((x)-1)*LKRCLUSTER_SIZE+LKRCLUSTER_TLATCELL)
#define LKR_DDEADCELL(x)   QE(CMPEVENT_LKR+((x)-1)*LKRCLUSTER_SIZE+LKRCLUSTER_DDEADCELL)
#define LKR_UCENERGY(x)    QE(CMPEVENT_LKR+((x)-1)*LKRCLUSTER_SIZE+LKRCLUSTER_UCENERGY)
#define LKR_CELLSREAD(x)   IE(CMPEVENT_LKR+((x)-1)*LKRCLUSTER_SIZE+LKRCLUSTER_CELLSREAD)
#define LKR_STATUS(x)      IE(CMPEVENT_LKR+((x)-1)*LKRCLUSTER_SIZE+LKRCLUSTER_STATUS)
#define LKR_ECORRKE3(x)    QE(CMPEVENT_LKR+((x)-1)*LKRCLUSTER_SIZE+LKRCLUSTER_ECORRKE3)
#define LKR_SPAREFLOAT1(x) QE(CMPEVENT_LKR+((x)-1)*LKRCLUSTER_SIZE+LKRCLUSTER_SPAREFLOAT1)
#define LKR_SPAREINT1(x)   IE(CMPEVENT_LKR+((x)-1)*LKRCLUSTER_SIZE+LKRCLUSTER_SPAREINT1)
#define LKR_TIMERAW(x)     QE(CMPEVENT_LKR+((x)-1)*LKRCLUSTER_SIZE+LKRCLUSTER_TIMERAW)
#define LKR_MCTAILCORR(x)  QE(CMPEVENT_LKR+((x)-1)*LKRCLUSTER_SIZE+LKRCLUSTER_MCTAILCORR)
#define LKR_GAINMAX(x)     IE(CMPEVENT_LKR+((x)-1)*LKRCLUSTER_SIZE+LKRCLUSTER_GAINMAX)
#define LKR_ECELLMAX(x)    QE(CMPEVENT_LKR+((x)-1)*LKRCLUSTER_SIZE+LKRCLUSTER_ECELLMAX)
#define LKR_SPACHACORR(x)  QE(CMPEVENT_LKR+((x)-1)*LKRCLUSTER_SIZE+LKRCLUSTER_SPACHACORR)
#define LKR_ANAVAR(x,y)    QE(CMPEVENT_LKR+((x)-1)*LKRCLUSTER_SIZE+LKRCLUSTER_ANAVAR+((y)-1))
#define LKR_ANAFLAG(x,y)   IE(CMPEVENT_LKR+((x)-1)*LKRCLUSTER_SIZE+LKRCLUSTER_ANAFLAG+((y)-1))
/**********************************************************************/
/*                      KABES Hit  Macros                             */
/**********************************************************************/
#define KAB_STRIP_NHIT(x,y) IE(CMPEVENT_KAB+((x)-1)*KABDET_SIZE + ((y)-1)*KABSTRIP_SIZE + KABSTRIP_NHIT)
#define KAB_STRIP_NHIT(x,y)              IE(CMPEVENT_KAB+((x)-1)*KABDET_SIZE + ((y)-1)*KABSTRIP_SIZE + KABSTRIP_NHIT)
#define KAB_STRIP_HIT_TLEAD(x,y,z)  QE(CMPEVENT_KAB+((x)-1)*KABDET_SIZE + ((y)-1)*KABSTRIP_SIZE + ((z)-1)*KABHIT_SIZE + KABHIT_TLEAD + 1)
#define KAB_STRIP_HIT_TTRAIL(x,y,z) QE(CMPEVENT_KAB+((x)-1)*KABDET_SIZE + ((y)-1)*KABSTRIP_SIZE + ((z)-1)*KABHIT_SIZE + KABHIT_TTRAIL + 1)
#define KAB_STRIP_HIT_TRACKID(x,y,z) IE(CMPEVENT_KAB+((x)-1)*KABDET_SIZE + ((y)-1)*KABSTRIP_SIZE + ((z)-1)*KABHIT_SIZE + KABHIT_TRACKID + 1)



/**********************************************************************/
/*                      KABES Track  Macros                           */
/**********************************************************************/
/* KABES Track struct                                                 */
#define KABTRK_PQ(x)              QE(CMPEVENT_KABTRK+((x)-1)*KABTRACK_SIZE + KABTRACK_PQ)
#define KABTRK_P(x)               QE(CMPEVENT_KABTRK+((x)-1)*KABTRACK_SIZE + KABTRACK_P)
#define KABTRK_Q(x)               IE(CMPEVENT_KABTRK+((x)-1)*KABTRACK_SIZE + KABTRACK_Q)
#define KABTRK_UPORDOWN(x)         IE(CMPEVENT_KABTRK+((x)-1)*KABTRACK_SIZE + KABTRACK_UPORDOWN)
#define KABTRK_PERR(x)            QE(CMPEVENT_KABTRK+((x)-1)*KABTRACK_SIZE + KABTRACK_PERR)
#define KABTRK_CHI2(x)            QE(CMPEVENT_KABTRK+((x)-1)*KABTRACK_SIZE + KABTRACK_CHI2)
#define KABTRK_X(x)               QE(CMPEVENT_KABTRK+((x)-1)*KABTRACK_SIZE + KABTRACK_X)
#define KABTRK_Y(x)               QE(CMPEVENT_KABTRK+((x)-1)*KABTRACK_SIZE + KABTRACK_Y)
#define KABTRK_XUORD(x)         QE(CMPEVENT_KABTRK+((x)-1)*KABTRACK_SIZE + KABTRACK_XUORD)
#define KABTRK_YUORD(x)         QE(CMPEVENT_KABTRK+((x)-1)*KABTRACK_SIZE + KABTRACK_YUORD)
#define KABTRK_SIGXXUORD(x)     QE(CMPEVENT_KABTRK+((x)-1)*KABTRACK_SIZE + KABTRACK_SIGXXUORD)
#define KABTRK_SIGYYUORD(x)     QE(CMPEVENT_KABTRK+((x)-1)*KABTRACK_SIZE + KABTRACK_SIGYYUORD)
#define KABTRK_TIME(x)            QE(CMPEVENT_KABTRK+((x)-1)*KABTRACK_SIZE + KABTRACK_TIME)
#define KABTRK_TIMEUORD(x)            QE(CMPEVENT_KABTRK+((x)-1)*KABTRACK_SIZE + KABTRACK_TIMEUORD)
#define KABTRK_TIMEST2(x)            QE(CMPEVENT_KABTRK+((x)-1)*KABTRACK_SIZE + KABTRACK_TIMEST2)
#define KABTRK_DXDZ(x)            QE(CMPEVENT_KABTRK+((x)-1)*KABTRACK_SIZE + KABTRACK_DXDZ)
#define KABTRK_DYDZ(x)          QE(CMPEVENT_KABTRK+((x)-1)*KABTRACK_SIZE + KABTRACK_DYDZ)
#define KABTRK_RECFLAG(x)         IE(CMPEVENT_KABTRK+((x)-1)*KABTRACK_SIZE + KABTRACK_RECFLAG)
#define KABTRK_SIGXX(x)           QE(CMPEVENT_KABTRK+((x)-1)*KABTRACK_SIZE + KABTRACK_SIGXX)
#define KABTRK_SIGYY(x)           QE(CMPEVENT_KABTRK+((x)-1)*KABTRACK_SIZE + KABTRACK_SIGYY)
#define KABTRK_SIGTT(x)            QE(CMPEVENT_KABTRK+((x)-1)*KABTRACK_SIZE + KABTRACK_SIGTT)
#define KABTRK_SIGDXDX(x)          QE(CMPEVENT_KABTRK+((x)-1)*KABTRACK_SIZE + KABTRACK_SIGDXDX)
#define KABTRK_SIGDYDY(x)       QE(CMPEVENT_KABTRK+((x)-1)*KABTRACK_SIZE + KABTRACK_SIGDYDY)
#define KABTRK_SIGPY(x)            QE(CMPEVENT_KABTRK+((x)-1)*KABTRACK_SIZE + KABTRACK_SIGPY)
#define KABTRK_SIGXT(x)            QE(CMPEVENT_KABTRK+((x)-1)*KABTRACK_SIZE + KABTRACK_SIGXT)
#define KABTRK_SIGXDX(x)           QE(CMPEVENT_KABTRK+((x)-1)*KABTRACK_SIZE + KABTRACK_SIGXDX)
#define KABTRK_SIGTDX(x)           QE(CMPEVENT_KABTRK+((x)-1)*KABTRACK_SIZE + KABTRACK_SIGTDX)
#define KABTRK_SIGPX(x)            QE(CMPEVENT_KABTRK+((x)-1)*KABTRACK_SIZE + KABTRACK_SIGPX)
#define KABTRK_SIGXY(x)            QE(CMPEVENT_KABTRK+((x)-1)*KABTRACK_SIZE + KABTRACK_SIGXY)
#define KABTRK_SIGPT(x)            QE(CMPEVENT_KABTRK+((x)-1)*KABTRACK_SIZE + KABTRACK_SIGPT)
#define KABTRK_SIGYT(x)            QE(CMPEVENT_KABTRK+((x)-1)*KABTRACK_SIZE + KABTRACK_SIGYT)
#define KABTRK_SIGPDX(x)           QE(CMPEVENT_KABTRK+((x)-1)*KABTRACK_SIZE + KABTRACK_SIGPDX)
#define KABTRK_SIGYDX(x)           QE(CMPEVENT_KABTRK+((x)-1)*KABTRACK_SIZE + KABTRACK_SIGYDX)
#define KABTRK_SPAREINT(x,y)       IE(CMPEVENT_KABTRK+((x)-1)*KABTRACK_SIZE + KABTRACK_SPAREINT+((y)-1))
#define KABTRK_SPAREFLOAT(x,y)     QE(CMPEVENT_KABTRK+((x)-1)*KABTRACK_SIZE + KABTRACK_SPAREFLOAT+((y)-1))
#define KABTRK_ANAVAR(x,y)        QE(CMPEVENT_KABTRK+((x)-1)*KABTRACK_SIZE + KABTRACK_ANAVAR+((y)-1))
#define KABTRK_ANAFLAG(x,y)        IE(CMPEVENT_KABTRK+((x)-1)*KABTRACK_SIZE + KABTRACK_ANAFLAG+((y)-1))

/**********************************************************************/
/*                      Neutral Hodoscope Macros                      */
/**********************************************************************/
/* Neutral hodoscope hit struct */
#define NHO_COUNTER(x) IE(CMPEVENT_NHO+((x)-1)*NHOHIT_SIZE+NHOHIT_COUNTER)
#define NHO_X(x)       QE(CMPEVENT_NHO+((x)-1)*NHOHIT_SIZE+NHOHIT_X)
#define NHO_Y(x)       QE(CMPEVENT_NHO+((x)-1)*NHOHIT_SIZE+NHOHIT_Y)
#define NHO_PHEIGHT(x) QE(CMPEVENT_NHO+((x)-1)*NHOHIT_SIZE+NHOHIT_PHEIGHT)
#define NHO_TIME(x)    QE(CMPEVENT_NHO+((x)-1)*NHOHIT_SIZE+NHOHIT_TIME)
#define NHO_UCTIME(x)  QE(CMPEVENT_NHO+((x)-1)*NHOHIT_SIZE+NHOHIT_UCTIME)
#define NHO_PDSFLAG(x) IE(CMPEVENT_NHO+((x)-1)*NHOHIT_SIZE+NHOHIT_PDSFLAG)

/**********************************************************************/
/*                     Hadron Calorimeter Macros                      */
/**********************************************************************/
/* HAC cluster struct */
#define HAC_ENERGY(x)  QE(CMPEVENT_HAC+((x)-1)*HACCLUSTER_SIZE+HACCLUSTER_ENERGY)
#define HAC_BFRATIO(x) QE(CMPEVENT_HAC+((x)-1)*HACCLUSTER_SIZE+HACCLUSTER_BFRATIO)
#define HAC_X(x)       QE(CMPEVENT_HAC+((x)-1)*HACCLUSTER_SIZE+HACCLUSTER_X)
#define HAC_Y(x)       QE(CMPEVENT_HAC+((x)-1)*HACCLUSTER_SIZE+HACCLUSTER_Y)
#define HAC_RMSX(x)    QE(CMPEVENT_HAC+((x)-1)*HACCLUSTER_SIZE+HACCLUSTER_RMSX)
#define HAC_RMSY(x)    QE(CMPEVENT_HAC+((x)-1)*HACCLUSTER_SIZE+HACCLUSTER_RMSY)
#define HAC_EMAXX(x)   QE(CMPEVENT_HAC+((x)-1)*HACCLUSTER_SIZE+HACCLUSTER_EMAXX)
#define HAC_EMAXY(x)   QE(CMPEVENT_HAC+((x)-1)*HACCLUSTER_SIZE+HACCLUSTER_EMAXY)
#define HAC_TIME(x)    QE(CMPEVENT_HAC+((x)-1)*HACCLUSTER_SIZE+HACCLUSTER_TIME)
#define HAC_RECFLAG(x) IE(CMPEVENT_HAC+((x)-1)*HACCLUSTER_SIZE+HACCLUSTER_RECFLAG)
/* PHAC structure */
#define PHAC_IDCELL(x)  IE(CMPEVENT_PHAC+((x)-1)*HACCELL_SIZE+HACCELL_IDCELL)
#define PHAC_ENERGY(x)  QE(CMPEVENT_PHAC+((x)-1)*HACCELL_SIZE+HACCELL_ENERGY)


/**********************************************************************/
/*                     Muon Veto Macros                               */
/**********************************************************************/
/* Muon Veto hit struct */
#define MUV_X(x)       QE(CMPEVENT_MUV+((x)-1)*MUVHIT_SIZE+MUVHIT_X)
#define MUV_Y(x)       QE(CMPEVENT_MUV+((x)-1)*MUVHIT_SIZE+MUVHIT_Y)
#define MUV_TIME(x)    QE(CMPEVENT_MUV+((x)-1)*MUVHIT_SIZE+MUVHIT_TIME)
#define MUV_DTIME(x)   QE(CMPEVENT_MUV+((x)-1)*MUVHIT_SIZE+MUVHIT_DTIME)
#define MUV_STATUS(x)  IE(CMPEVENT_MUV+((x)-1)*MUVHIT_SIZE+MUVHIT_STATUS)
#define MUV_TRACKID(x) IE(CMPEVENT_MUV+((x)-1)*MUVHIT_SIZE+MUVHIT_TRACKID)

/**********************************************************************/
/*                     Muon Veto PDS info Macros                      */
/**********************************************************************/
#define PMUV_N(x)     IE(CMPEVENT_PMUV+((x)-1)*PMUVCHANNEL_SIZE+PMUVCHANNEL_N)
#define PMUV_NHIT(x)  IE(CMPEVENT_PMUV+((x)-1)*PMUVCHANNEL_SIZE+PMUVCHANNEL_NHIT)

#define PMUV_HIT_TIME(x,y)  QE(CMPEVENT_PMUV+((x)-1)*PMUVCHANNEL_SIZE+PMUVCHANNEL_HIT + ((y)-1)*PMUVHIT_SIZE + PMUVHIT_TIME)
#define PMUV_HIT_WIDTH(x,y)  QE(CMPEVENT_PMUV+((x)-1)*PMUVCHANNEL_SIZE+PMUVCHANNEL_HIT + ((y)-1)*PMUVHIT_SIZE + PMUVHIT_WIDTH)
#define PMUV_HIT_INFO(x,y)  QE(CMPEVENT_PMUV+((x)-1)*PMUVCHANNEL_SIZE+PMUVCHANNEL_HIT + ((y)-1)*PMUVHIT_SIZE + PMUVHIT_INFO)


/**********************************************************************/
/*                  Level 3 Trigger Macros                            */
/**********************************************************************/
/* L3 filter macors */
#define FILTER_INDEX(x) IE(CMPEVENT_FILTER+((x)-1)*L3FILTER_SIZE+L3FILTER_INDEX)
#define FILTER_INFO(x) IE(CMPEVENT_FILTER+((x)-1)*L3FILTER_SIZE+L3FILTER_INFO)

/**********************************************************************/
/*                  Eta information structures                        */
/**********************************************************************/
/* Eta macros */
#define ETASUMM_FLAG(x)      IE(CMPEVENT_ETASUMM+((x)-1)*ETASUMMARY_SIZE+ETASUMMARY_FLAG)
#define ETASUMM_XVTXZ(x)     QE(CMPEVENT_ETASUMM+((x)-1)*ETASUMMARY_SIZE+ETASUMMARY_XVTXZ)
#define ETASUMM_XCOG(x)      QE(CMPEVENT_ETASUMM+((x)-1)*ETASUMMARY_SIZE+ETASUMMARY_XCOG)
#define ETASUMM_EMESON(x)    QE(CMPEVENT_ETASUMM+((x)-1)*ETASUMMARY_SIZE+ETASUMMARY_EMESON)
#define ETASUMM_NCLU(x)      IE(CMPEVENT_ETASUMM+((x)-1)*ETASUMMARY_SIZE+ETASUMMARY_NCLU)

#define ETASUMM_CLU_FLAG(x,y)      IE(CMPEVENT_ETASUMM+((x)-1)*ETASUMMARY_SIZE+ETASUMMARY_CLU + ((y)-1)*ETACLUSTER_SIZE + ETACLUSTER_FLAG)
#define ETASUMM_CLU_NCELL(x,y)     IE(CMPEVENT_ETASUMM+((x)-1)*ETASUMMARY_SIZE+ETASUMMARY_CLU + ((y)-1)*ETACLUSTER_SIZE + ETACLUSTER_NCELL)
#define ETASUMM_CLU_IMAX(x,y)      IE(CMPEVENT_ETASUMM+((x)-1)*ETASUMMARY_SIZE+ETASUMMARY_CLU + ((y)-1)*ETACLUSTER_SIZE + ETACLUSTER_IMAX)
#define ETASUMM_CLU_NREC(x,y)      IE(CMPEVENT_ETASUMM+((x)-1)*ETASUMMARY_SIZE+ETASUMMARY_CLU + ((y)-1)*ETACLUSTER_SIZE + ETACLUSTER_NREC)
#define ETASUMM_CLU_ECELL(x,y,z)   QE(CMPEVENT_ETASUMM+((x)-1)*ETASUMMARY_SIZE+ETASUMMARY_CLU + ((y)-1)*ETACLUSTER_SIZE + ETACLUSTER_ECELL+((z)-1))
/**********************************************************************/
/*                     Neutral analysis structure                     */
/**********************************************************************/
#define ANEUT_ESC          QE(CMPEVENT_ANEUT+ANANEUT_ESC)
#define ANEUT_IFLAG        IE(CMPEVENT_ANEUT+ANANEUT_IFLAG)
#define ANEUT_CEM(x)       QE(CMPEVENT_ANEUT+ANANEUT_CEM+((x)-1))
#define ANEUT_INC(x)       IE(CMPEVENT_ANEUT+ANANEUT_INC+((x)-1))
#define ANEUT_RELLI        QE(CMPEVENT_ANEUT+ANANEUT_RELLI)
#define ANEUT_CTAU         QE(CMPEVENT_ANEUT+ANANEUT_CTAU)
#define ANEUT_EKAON        QE(CMPEVENT_ANEUT+ANANEUT_EKAON)
#define ANEUT_LKRTIME      QE(CMPEVENT_ANEUT+ANANEUT_LKRTIME)
#define ANEUT_LKRNHODTIME  QE(CMPEVENT_ANEUT+ANANEUT_LKRNHODTIME)
#define ANEUT_NTUSED       IE(CMPEVENT_ANEUT+ANANEUT_NTUSED)
#define ANEUT_NHODTIME     QE(CMPEVENT_ANEUT+ANANEUT_NHODTIME)
#define ANEUT_CUTS         IE(CMPEVENT_ANEUT+ANANEUT_CUTS)

/**********************************************************************/
/*                     Charged analysis structure                     */
/**********************************************************************/
#define ACHARG_KTYPE    IE(CMPEVENT_ACHARG+ANACHARG_KTYPE)
#define ACHARG_IFLAG    IE(CMPEVENT_ACHARG+ANACHARG_IFLAG)
#define ACHARG_IVERTEX  IE(CMPEVENT_ACHARG+ANACHARG_IVERTEX)
#define ACHARG_CUTS     IE(CMPEVENT_ACHARG+ANACHARG_CUTS)

/**********************************************************************/
/*             Charge Hodoscope analysis structure                    */
/**********************************************************************/
#define ACHOD_HODOTIME   QE(CMPEVENT_ACHOD+ANACHARGHOD_HODOTIME)
#define ACHOD_ITRACE(x)  IE(CMPEVENT_ACHOD+ANACHARGHOD_ITRACE+((x)-1))
#define ACHOD_NACOUNT    IE(CMPEVENT_ACHOD+ANACHARGHOD_NACOUNT)
/* anachodcount structure goes here */
#define ACHOD_HSIGG      QE(CMPEVENT_ACHOD+ANACHARGHOD_HSIGG)
#define ACHOD_VSIGG      QE(CMPEVENT_ACHOD+ANACHARGHOD_VSIGG)

#define ACHOD_ACOUNT_PLANE(x)   QE(CMPEVENT_ACHOD+ANACHARGHOD_ACOUNT+((x)-1)*ANACHODCOUNT_SIZE+ANACHODCOUNT_PLANE)
#define ACHOD_ACOUNT_COUNTER(x) QE(CMPEVENT_ACHOD+ANACHARGHOD_ACOUNT+((x)-1)*ANACHODCOUNT_SIZE+ANACHODCOUNT_COUNTER)
#define ACHOD_ACOUNT_TIME(x)    QE(CMPEVENT_ACHOD+ANACHARGHOD_ACOUNT+((x)-1)*ANACHODCOUNT_SIZE+ANACHODCOUNT_TIME)
#define ACHOD_ACOUNT_SIG(x)     QE(CMPEVENT_ACHOD+ANACHARGHOD_ACOUNT+((x)-1)*ANACHODCOUNT_SIZE+ANACHODCOUNT_SIG)

/**********************************************************************/
/*                 Tagger analysis structure                          */
/**********************************************************************/
#define ATAG_NAPROT        IE(CMPEVENT_ATAG+ANATAGGER_NAPROT)
/* anaproton structure goes here */
#define ATAG_NPROTLADDER   IE(CMPEVENT_ATAG+ANATAGGER_NPROTLADDER)
#define ATAG_NPROTMONITOR  IE(CMPEVENT_ATAG+ANATAGGER_NPROTMONITOR)

#define ATAG_APROT_PROTTIME(x)  QE(CMPEVENT_ATAG+ANATAGGER_APROT+((x)-1)*ANAPROTON_SIZE+ANAPROTON_PROTTIME)
#define ATAG_APROT_PROTSTAT(x)  IE(CMPEVENT_ATAG+ANATAGGER_APROT+((x)-1)*ANAPROTON_SIZE+ANAPROTON_PROTSTAT)
#define ATAG_APROT_NPROTHIT(x)  IE(CMPEVENT_ATAG+ANATAGGER_APROT+((x)-1)*ANAPROTON_SIZE+ANAPROTON_NPROTHIT)
/* anaprothit structure goes here */
#define ATAG_APROT_PROTHIT_INDEXHIT(x,y,z)  IE(CMPEVENT_ATAG+ANATAGGER_APROT+((x)-1)*ANAPROTON_SIZE+ANAPROTON_PROTHIT+((y)-1)*ANAPROTHIT_SIZE+ANAPROTHIT_INDEXHIT+((z)-1))

#define ACALL_SELCHARGED    IE(CMPEVENT_ACALL + ANACALLED_SELCHARGED)
#define ACALL_SEL2PI0       IE(CMPEVENT_ACALL + ANACALLED_SEL2PI0)
#define ACALL_SEL3PI0       IE(CMPEVENT_ACALL + ANACALLED_SEL3PI0)
#define ACALL_SEL2GAM       IE(CMPEVENT_ACALL + ANACALLED_SEL2GAM)
#define ACALL_BLUEFIELD     IE(CMPEVENT_ACALL + ANACALLED_BLUEFIELD)
#define ACALL_LKRPEDCOR     IE(CMPEVENT_ACALL + ANACALLED_LKRPEDCOR)
#define ACALL_LKRPOSCOR     IE(CMPEVENT_ACALL + ANACALLED_LKRPOSCOR)
#define ACALL_LKRSHARING    IE(CMPEVENT_ACALL + ANACALLED_LKRSHARING)
#define ACALL_HODOTIME      IE(CMPEVENT_ACALL + ANACALLED_HODOTIME)
#define ACALL_NHODTIME      IE(CMPEVENT_ACALL + ANACALLED_NHODTIME)
#define ACALL_LKRTIME       IE(CMPEVENT_ACALL + ANACALLED_LKRTIME)
#define ACALL_TAGTIME       IE(CMPEVENT_ACALL + ANACALLED_TAGTIME)
#define ACALL_AKSFLAG       IE(CMPEVENT_ACALL + ANACALLED_AKSFLAG)
#define ACALL_MUON_REC      IE(CMPEVENT_ACALL + ANACALLED_MUON_REC)
#define ACALL_MUON_REJECT   IE(CMPEVENT_ACALL + ANACALLED_MUON_REJECT)
#define ACALL_GEOMCOR       IE(CMPEVENT_ACALL + ANACALLED_GEOMCOR)
#define ACALL_MAGNETCOR     IE(CMPEVENT_ACALL + ANACALLED_MAGNETCOR)
#define ACALL_NEWCHARGED    IE(CMPEVENT_ACALL + ANACALLED_NEWCHARGED)
#define ACALL_MUON_TRACKREC IE(CMPEVENT_ACALL + ANACALLED_MUON_TRACKREC)
#define ACALL_MUON_VTXREC   IE(CMPEVENT_ACALL + ANACALLED_MUON_VTXREC)
#define ACALL_LKRCALCOR     IE(CMPEVENT_ACALL + ANACALLED_LKRCALCOR)
#define ACALL_LKRCALCOR1    IE(CMPEVENT_ACALL + ANACALLED_LKRCALCOR1)
#define ACALL_LKRCALCOR2    IE(CMPEVENT_ACALL + ANACALLED_LKRCALCOR2)
#define ACALL_LKRCALCOR3    IE(CMPEVENT_ACALL + ANACALLED_LKRCALCOR3)
#define ACALL_LKRCALHI2K    IE(CMPEVENT_ACALL + ANACALLED_LKRCALHI2K)
#define ACALL_SEL3PIC       IE(CMPEVENT_ACALL + ANACALLED_SEL3PIC)
#define ACALL_SEL3PIN       IE(CMPEVENT_ACALL + ANACALLED_SEL3PIN)
/**********************************************************************/
/*                 AKS analysis structure                          */
/**********************************************************************/
#define AAKS_FLAG        IE(CMPEVENT_AAKS+ANAAKS_FLAG)
/**********************************************************************/
/*                        Event Macros                                */
/**********************************************************************/
#define CMPEVT_PTR  IE(1)
/* Event struct */
#define EVT_NEVENT       IE(CMPEVENT_N)
#define EVT_TRIGWORD     IE(CMPEVENT_TRIGWORD)
#define EVT_TIMESTAMP    IE(CMPEVENT_TIMESTAMP)
#define EVT_RECFLAG      IE(CMPEVENT_RECFLAG)
#define EVT_FLAGCORR     IE(CMPEVENT_FLAGCORR)
#define EVT_EVTFSPARE(x) QE(CMPEVENT_EVTFSPARE+((x)-1))
#define EVT_EVTISPARE(x) IE(CMPEVENT_EVTISPARE+((x)-1))
#define EVT_DBERR        IE(CMPEVENT_DBERR)
#define EVT_TOBEOVL      IE(CMPEVENT_TOBEOVL)
#ifndef EVT_DCHREC    /* only define if C defines not already there */
#define EVT_DCHREC       DCHRECBIT(CMPEVT_PTR)
#define EVT_HACREC       HACRECBIT(CMPEVT_PTR)
#define EVT_LKRREC       LKRRECBIT(CMPEVT_PTR)
#define EVT_HODREC       HODRECBIT(CMPEVT_PTR)
#define EVT_NHOREC       NHORECBIT(CMPEVT_PTR)
#define EVT_KSMREC       KSMRECBIT(CMPEVT_PTR)
#define EVT_TAGREC       TAGRECBIT(CMPEVT_PTR)
#define EVT_MUVREC       MUVRECBIT(CMPEVT_PTR)
#define EVT_L3TRIG       L3TRIGBIT(CMPEVT_PTR)
#define EVT_PATREC       PATRECBIT(CMPEVT_PTR)
#define EVT_NUTREC       NUTRECBIT(CMPEVT_PTR)
#endif
/* RNDMsummary structure goes here */
/* EVTtimestamp structure goes here */
#define EVT_NTSTAMP      IE(CMPEVENT_NTSTAMP)
/* PMBscaler KLmon structure goes here */
/* PMBscaler KLmon3us structure goes here */
/* PMBscaler QXmon structure goes here */
/* PMBscaler QXmon3us structure goes here */
/* PMBscaler KSmon structure goes here */
/* PMBscaler AKSmon structure goes here */

#define EVT_MAINSPHASE   QE(CMPEVENT_MAINSPHASE)
#define EVT_SPSPHASE     QE(CMPEVENT_SPSPHASE)
#define EVT_MAINSPHASERAW   IE(CMPEVENT_MAINSPHASERAW)
#define EVT_SPSPHASERAW     IE(CMPEVENT_SPSPHASERAW)
#define EVT_FEMAINSPHASE QE(CMPEVENT_FEMAINSPHASE)
#define EVT_FESPSPHASE   QE(CMPEVENT_FESPSPHASE)

/* PMBtimeslice structure goes here */
#define EVT_NTRIG        IE(CMPEVENT_NTRIG)

#define EVT_PATERRFLAG   IE(CMPEVENT_PATERRFLAG)
#define EVT_PATSTATUS    IE(CMPEVENT_PATSTATUS)

/* Trigger bit struct goes here */
#define EVT_TAGANTIC     IE(CMPEVENT_TAGANTIC)
/* TAGchannel structure goes here */
#define EVT_NTAG         IE(CMPEVENT_NTAG)
#define EVT_TAGERRFLAG   IE(CMPEVENT_TAGERRFLAG)
#define EVT_TAGSTATUS    IE(CMPEVENT_TAGSTATUS)

/* KSMhit structure goes here */
#define EVT_NKSM         IE(CMPEVENT_NKSM)
#define EVT_KSMERRFLAAG  IE(CMPEVENT_KSMERRFLAG)
#define EVT_KSMSTATUS    IE(CMPEVENT_KSMSTATUS)

#define EVT_AKLTIME      QE(CMPEVENT_AKLTIME)
/* AKLhit structure goes here */
#define EVT_NAKL         IE(CMPEVENT_NAKL)
#define EVT_AKLERRFLAG   IE(CMPEVENT_AKLERRFLAG)
#define EVT_AKLSTATUS    IE(CMPEVENT_AKLSTATUS)

#define EVT_AKSMIPS(x)   QE(CMPEVENT_AKSMIPS+((x)-1))
#define EVT_AKSTIME(x)   QE(CMPEVENT_AKSTIME+((x)-1))
/* AKScounter structure goes here */
#define EVT_NAKS         IE(CMPEVENT_NAKS)
#define EVT_AKSERRFLAG   IE(CMPEVENT_AKSERRFLAG)
#define EVT_AKSSTATUS    IE(CMPEVENT_AKSSTATUS)

#define EVT_DCHBZ        QE(CMPEVENT_DCHBZ)
#define EVT_DCHZ         QE(CMPEVENT_DCHZ)
#define EVT_DCHBZCORR    QE(CMPEVENT_DCHBZCORR)
#define EVT_DCHZCORR     QE(CMPEVENT_DCHZCORR)
#define EVT_DCHNHITS(x)  IE(CMPEVENT_DCHNHITS+((x)-1))
#define EVT_DCHOVRFLOW   IE(CMPEVENT_DCHOVRFLOW)
#define EVT_BESTVERTEX   IE(CMPEVENT_BESTVERTEX)
#define EVT_NKABTRK      IE(CMPEVENT_NKABTRK)
#define EVT_NKABHIT      IE(CMPEVENT_NKABHIT)
#define EVT_KABERRFLAG   IE(CMPEVENT_KABERRFLAG)
#define EVT_KABERRFLAGPDS IE(CMPEVENT_KABERRFLAGPDS)
/* DCHclu structure goes here */
#define EVT_NDCHCLU      IE(CMPEVENT_NDCHCLU)
/* DCH track structs go here */
#define EVT_NTRACK       IE(CMPEVENT_NTRACK)
/* DCH vertex structs go here */
#define EVT_NVERTEX      IE(CMPEVENT_NVERTEX)
#define EVT_DCHERRFLAG      IE(CMPEVENT_DCHERRFLAG)
#define EVT_DCHERRFLAGPDS   IE(CMPEVENT_DCHERRFLAGPDS)
#define EVT_DCHSTATUS       IE(CMPEVENT_DCHSTATUS)
#define EVT_MBOXDEADTIME    IE(CMPEVENT_MBOXDEADTIME)

#define EVT_NDCHNRO
#define EVT_SGNTIME      IE(CMPEVENT_SGNTIME)
/* Siegen chamber structs go here */
/* Siegen track structs go here */
#define EVT_NSGNTRK      IE(CMPEVENT_NSGNTRK)
/* Siegen vertex structs go here */
#define EVT_NSGNVTX      IE(CMPEVENT_NSGNVTX)

#define EVT_HODTIME      QE(CMPEVENT_HODTIME)
/* Hodoscope hit structs go here */
#define EVT_NHOD         IE(CMPEVENT_NHOD)
#define EVT_HODNEUTFLAG  IE(CMPEVENT_HODNEUTFLAG)
/* Hodoscope hit structs for neutral events go here */
#define EVT_NHODNEUT     IE(CMPEVENT_NHODNEUT)
#define EVT_HODERRFLAG   IE(CMPEVENT_HODERRFLAG)
#define EVT_HODSTATUS    IE(CMPEVENT_HODSTATUS)

#define EVT_LKRETOTCELL  QE(CMPEVENT_LKRETOTCELL)
#define EVT_LKRENERGY    QE(CMPEVENT_LKRENERGY)
/* LKR cluster structs go here */
#define EVT_NLKR         IE(CMPEVENT_NLKR)
#define EVT_LKRERRFLAG   IE(CMPEVENT_LKRERRFLAG)
#define EVT_LKRSTATUS    IE(CMPEVENT_LKRSTATUS)
#define EVT_LKRDOWNSCALED    IE(CMPEVENT_LKRDOWNSCALED)

#define EVT_NUTHITMAP(x) IE(CMPEVENT_NUTHITMAP+(x)-1)
#define EVT_NUTXPEAK(x)  IE(CMPEVENT_NUTXPEAK+(x)-1)
#define EVT_NUTYPEAK(x)  IE(CMPEVENT_NUTYPEAK+(x)-1)
#define EVT_NUTNXPEAK(x) IE(CMPEVENT_NUTNXPEAK+(x)-1)
#define EVT_NUTNYPEAK(x) IE(CMPEVENT_NUTNYPEAK+(x)-1)
#define EVT_NUTM0(x)     IE(CMPEVENT_NUTM0+(x)-1)
#define EVT_NUTM1(x)     IE(CMPEVENT_NUTM1+(x)-1)
#define EVT_NUTM2(x)     IE(CMPEVENT_NUTM2+(x)-1)
#define EVT_NUTM0SMP(x)  IE(CMPEVENT_NUTM0SMP+(x)-1)
#define EVT_NUTM1SMP     IE(CMPEVENT_NUTM1SMP)
#define EVT_NUTM2SMP     IE(CMPEVENT_NUTM2SMP)
#define EVT_NUTHACSMP    IE(CMPEVENT_NUTHACSMP)
#define EVT_NUTHACESUM(x)    IE(CMPEVENT_NUTHACESUM+(x)-1)
#define EVT_NUTTS        IE(CMPEVENT_NUTTS)
#define EVT_SPY_X(x)     IE(CMPEVENT_SPY_X+(x)-1)
#define EVT_SPY_Y(x)     IE(CMPEVENT_SPY_Y+(x)-1)
#define EVT_NUTERRFLAG   IE(CMPEVENT_NUTERRFLAG)
#define EVT_NUTSTATUS    IE(CMPEVENT_NUTSTATUS)

#define EVT_NHOTIME      QE(CMPEVENT_NHOTIME)
/* Neutral NHO hit structs go here */
#define EVT_NNHO         IE(CMPEVENT_NNHO)
#define EVT_NHOERRFLAG   IE(CMPEVENT_NHOERRFLAG)
#define EVT_NHOSTATUS    IE(CMPEVENT_NHOSTATUS)

#define EVT_HACENERGY    QE(CMPEVENT_HACENERGY)
/* HAC cluster structs go here */
#define EVT_NGOODHAC     IE(CMPEVENT_NGOODHAC)
#define EVT_NHAC         IE(CMPEVENT_NHAC)
/* PHAC hits go here */
#define EVT_NPHAC        IE(CMPEVENT_NPHAC)
#define EVT_HACERRFLAG   IE(CMPEVENT_HACERRFLAG)
#define EVT_HACSTATUS    IE(CMPEVENT_HACSTATUS)

/* MUVhit structs go here */
#define EVT_NMUV         IE(CMPEVENT_NMUV)
#define EVT_MUVERRFLAG   IE(CMPEVENT_MUVERRFLAG)
#define EVT_MUVSTATUS    IE(CMPEVENT_MUVSTATUS)

/* PMUV structs go here */
#define EVT_NPMUV         IE(CMPEVENT_NPMUV)

/* Level 3 Trigger data */
#define EVT_L3EVTYPE            IE(CMPEVENT_L3EVTYPE)
#define EVT_L3STATUS            IE(CMPEVENT_L3STATUS)
#define EVT_L3ERRDEC            IE(CMPEVENT_L3ERRDEC)
#define EVT_L3ERRREC            IE(CMPEVENT_L3ERRREC)
#define EVT_L3RTRSTATUS         IE(CMPEVENT_L3RTRSTATUS)
#define EVT_L3TRIGWORD(x)       IE(CMPEVENT_L3TRIGWORD+(x)-1)
#define EVT_L3ONLINETRIGWORD(x) IE(CMPEVENT_L3ONLINETRIGWORD+(x)-1)
#define EVT_L3BTRIGWORD(x)      IE(CMPEVENT_L3BTRIGWORD+(x)-1)
#define EVT_L3ACTIONDOWNSCALE   IE(CMPEVENT_L3ACTIONDOWNSCALE)
#define EVT_L3ACTIONDOWNSCALE2  IE(CMPEVENT_L3ACTIONDOWNSCALE2)
#define EVT_L3FILTERDOWNSCALE   IE(CMPEVENT_L3FILTERDOWNSCALE)
#define EVT_L3ACTIONOVL         IE(CMPEVENT_L3ACTIONOVL)
#define EVT_L3FILTEROVL         IE(CMPEVENT_L3FILTEROVL)
#define EVT_L3CUTFLAG           IE(CMPEVENT_L3CUTFLAG)
#define EVT_L3RAREDECAY         IE(CMPEVENT_L3RAREDECAY)
#define EVT_L3EVSTEER           IE(CMPEVENT_L3EVSTEER)
/* L3 filter structs go here */
#define EVT_NFILTER             IE(CMPEVENT_NFILTER)
/* L3particle structure goes here */
#define EVT_NPART               IE(CMPEVENT_NPART)
/* L3TRIGhist structures go here */
#define EVT_NTRHIST       IE(CMPEVENT_NTRHIST)
#define EVT_L3NCELLS      IE(CMPEVENT_L3NCELLS)
#define EVT_L3NCELLABT    IE(CMPEVENT_L3NCELLABT)
#define EVT_L3RAWENERGY   QE(CMPEVENT_L3RAWENERGY)
#define EVT_L3DCHHITS(x)  IE(CMPEVENT_L3DCHHITS+(x)-1)
#define EVT_L3EP          QE(CMPEVENT_L3EP)
#define EVT_L3MINDIST     QE(CMPEVENT_L3MINDIST)
#define EVT_L3ZVERT       QE(CMPEVENT_L3ZVERT)
#define EVT_L3CDA         QE(CMPEVENT_L3CDA)
#define EVT_L3PIPIMASS    QE(CMPEVENT_L3PIPIMASS)
#define EVT_L3PPAIR       QE(CMPEVENT_L3PPAIR)
#define EVT_L3COGC        QE(CMPEVENT_L3COGC)
#define EVT_L3TAU         QE(CMPEVENT_L3TAU)
#define EVT_L3NCLUS            IE(CMPEVENT_L3NCLUS)
#define EVT_L3PI0PI0MASS(x)    QE(CMPEVENT_L3PI0PI0MASS+(x)-1)
#define EVT_L3COGN             QE(CMPEVENT_L3COGN)
#define EVT_L2BSTATUS          IE(CMPEVENT_L2BSTATUS)
#define EVT_L2BCOMCLUST        IE(CMPEVENT_L2BCOMCLUST)
#define EVT_L2BSHADR(x)        IE(CMPEVENT_L2BSHADR+(x)-1)
#define EVT_L2BSHX(x)          IE(CMPEVENT_L2BSHX+(x)-1)
#define EVT_L2BSHY(x)          IE(CMPEVENT_L2BSHY+(x)-1)
#define EVT_L2BSHENERGY(x)     IE(CMPEVENT_L2BSHENERGY+(x)-1)
#define EVT_L2BSHTIME(x)       IE(CMPEVENT_L2BSHTIME+(x)-1)
#define EVT_L2BSHXRMS(x)       IE(CMPEVENT_L2BSHXRMS+(x)-1)
#define EVT_L2BSHYRMS(x)       IE(CMPEVENT_L2BSHYRMS+(x)-1)
#define EVT_L3SPARE(x)         QE(CMPEVENT_L3SPARE+(x)-1)
#define EVT_STATUS             IE(CMPEVENT_STATUS)
#define EVT_CMPFILTER          IE(CMPEVENT_CMPFILTER)
#define EVT_NOVRFLWSIM         IE(CMPEVENT_NOVRFLWSIM)
#define EVT_OVRFLWSIMBEF       QE(CMPEVENT_OVRFLWSIMBEF)
#define EVT_OVRFLWSIMAFT       QE(CMPEVENT_OVRFLWSIMAFT)
#define EVT_NTRIGWORDL         IE(CMPEVENT_NTRIGWORDL)
#define EVT_TRIGWORDL(x)       IE(CMPEVENT_TRIGWORDL+(x)-1)
#define EVT_NTIMESTAMPL        IE(CMPEVENT_NTIMESTAMPL)
#define EVT_TIMESTAMPL(x)      IE(CMPEVENT_TIMESTAMPL+(x)-1)
#define EVT_NDCHDECERRORL      IE(CMPEVENT_NDCHDECERRORL)
#define EVT_DCHDECERRORL(x)    IE(CMPEVENT_DCHDECERRORL+(x)-1)
#define EVT_NLKRHACDECERRORL   IE(CMPEVENT_NLKRHACDECERRORL)
#define EVT_LKRHACDECERRORL(x) IE(CMPEVENT_LKRHACDECERRORL+(x)-1)
#define EVT_NNEUTRALINFOL      IE(CMPEVENT_NNEUTRALINFOL)
#define EVT_NEUTRALINFOL(x)    IE(CMPEVENT_NEUTRALINFOL+(x)-1)
#define EVT_NCHARGEDINFOL      IE(CMPEVENT_NCHARGEDINFOL)
#define EVT_CHARGEDINFOL(x)    IE(CMPEVENT_CHARGEDINFOL+(x)-1)
#define EVT_NTRIGBEF           IE(CMPEVENT_NTRIGBEF)
#define EVT_TIMETOPREV         IE(CMPEVENT_TIMETOPREV)
#define EVT_SPAREINT(x)        IE(CMPEVENT_SPAREINT+(x)-1)
#define EVT_SPAREFLOAT(x)      QE(CMPEVENT_SPAREFLOAT+(x)-1)
#define EVT_CHTREFF(x)         IE(CMPEVENT_CHTREFF+(x)-1)
#define EVT_NTHMPACKEDDATA     IE(CMPEVENT_NTHMPACKEDDATA)
#define EVT_THMPACKEDDATA(x)   IE(CMPEVENT_THMPACKEDDATA+(x)-1)
#define EVT_NETASUMM           IE(CMPEVENT_NETASUMM)


/**********************************************************************/
/*                  Beam Non Standard Block Macros                    */
/**********************************************************************/
#define BUR_BEAMNS_P42_BEND     IB(BURST_BEAMNS + BEAMNONSTANDARD_P42 + NSSTAT_BEND)
#define BUR_BEAMNS_P42_QUAD     IB(BURST_BEAMNS + BEAMNONSTANDARD_P42 + NSSTAT_QUAD)
#define BUR_BEAMNS_P42_TRIM     IB(BURST_BEAMNS + BEAMNONSTANDARD_P42 + NSSTAT_TRIM)
#define BUR_BEAMNS_P42_SCRAPER  IB(BURST_BEAMNS + BEAMNONSTANDARD_P42 + NSSTAT_SCRAPER)
#define BUR_BEAMNS_P42_COLL     IB(BURST_BEAMNS + BEAMNONSTANDARD_P42 + NSSTAT_COLL)
#define BUR_BEAMNS_P42_COLR     IB(BURST_BEAMNS + BEAMNONSTANDARD_P42 + NSSTAT_COLR)

#define BUR_BEAMNS_K12_BEND     IB(BURST_BEAMNS + BEAMNONSTANDARD_K12 + NSSTAT_BEND)
#define BUR_BEAMNS_K12_QUAD     IB(BURST_BEAMNS + BEAMNONSTANDARD_K12 + NSSTAT_QUAD)
#define BUR_BEAMNS_K12_TRIM     IB(BURST_BEAMNS + BEAMNONSTANDARD_K12 + NSSTAT_TRIM)
#define BUR_BEAMNS_K12_SCRAPER  IB(BURST_BEAMNS + BEAMNONSTANDARD_K12 + NSSTAT_SCRAPER)
#define BUR_BEAMNS_K12_COLL     IB(BURST_BEAMNS + BEAMNONSTANDARD_K12 + NSSTAT_COLL)
#define BUR_BEAMNS_K12_COLR     IB(BURST_BEAMNS + BEAMNONSTANDARD_K12 + NSSTAT_COLR)

#define BUR_BEAMNS_TARGT4           QB(BURST_BEAMNS + BEAMNONSTANDARD_TARGT4)
#define BUR_BEAMNS_TARGT10          QB(BURST_BEAMNS + BEAMNONSTANDARD_TARGT10)
#define BUR_BEAMNS_TARGKSY          QB(BURST_BEAMNS + BEAMNONSTANDARD_TARGKSY)
#define BUR_BEAMNS_TARGKSX          QB(BURST_BEAMNS + BEAMNONSTANDARD_TARGKSX)
#define BUR_BEAMNS_TAXMOT7          QB(BURST_BEAMNS + BEAMNONSTANDARD_TAXMOT7)
#define BUR_BEAMNS_TAXMOT8          QB(BURST_BEAMNS + BEAMNONSTANDARD_TAXMOT8)
#define BUR_BEAMNS_TAXMOT17         QB(BURST_BEAMNS + BEAMNONSTANDARD_TAXMOT17)
#define BUR_BEAMNS_TAXMOT18         QB(BURST_BEAMNS + BEAMNONSTANDARD_TAXMOT18)
#define BUR_BEAMNS_T10COLLSTART     QB(BURST_BEAMNS + BEAMNONSTANDARD_T10COLLSTART)
#define BUR_BEAMNS_T10COLLEND       QB(BURST_BEAMNS + BEAMNONSTANDARD_T10COLLEND)
#define BUR_BEAMNS_COLLPROTTAG      QB(BURST_BEAMNS + BEAMNONSTANDARD_COLLPROTTAG)
#define BUR_BEAMNS_COLLPROTTAGX     QB(BURST_BEAMNS + BEAMNONSTANDARD_COLLPROTTAGX)
#define BUR_BEAMNS_COLLPROTTAGY     QB(BURST_BEAMNS + BEAMNONSTANDARD_COLLPROTTAGY)
#define BUR_BEAMNS_COLLCLEANCOLL    QB(BURST_BEAMNS + BEAMNONSTANDARD_COLLCLEANCOLL)
#define BUR_BEAMNS_COLLCLEANCOLLX   QB(BURST_BEAMNS + BEAMNONSTANDARD_COLLCLEANCOLLX)
#define BUR_BEAMNS_COLLCLEANCOLLY   QB(BURST_BEAMNS + BEAMNONSTANDARD_COLLCLEANCOLLY)
#define BUR_BEAMNS_COLLDEFCOLL      QB(BURST_BEAMNS + BEAMNONSTANDARD_COLLDEFCOLL)
#define BUR_BEAMNS_COLLDEFCOLLX     QB(BURST_BEAMNS + BEAMNONSTANDARD_COLLDEFCOLLX)
#define BUR_BEAMNS_COLLDEFCOLLY     QB(BURST_BEAMNS + BEAMNONSTANDARD_COLLDEFCOLLY)
#define BUR_BEAMNS_CRYDISHOR        QB(BURST_BEAMNS + BEAMNONSTANDARD_CRYDISHOR)
#define BUR_BEAMNS_CRYDISVER        QB(BURST_BEAMNS + BEAMNONSTANDARD_CRYDISVER)
#define BUR_BEAMNS_CRYROTHOR        QB(BURST_BEAMNS + BEAMNONSTANDARD_CRYROTHOR)
#define BUR_BEAMNS_CRYROTVER        QB(BURST_BEAMNS + BEAMNONSTANDARD_CRYROTVER)
#define BUR_BEAMNS_CRYTEMP          QB(BURST_BEAMNS + BEAMNONSTANDARD_CRYTEMP)
#define BUR_BEAMNS_XAKSDISTHOR      QB(BURST_BEAMNS + BEAMNONSTANDARD_XAKSDISTHOR)
#define BUR_BEAMNS_XAKSROTHOR       QB(BURST_BEAMNS + BEAMNONSTANDARD_XAKSROTHOR)
#define BUR_BEAMNS_XAKSROTVER       QB(BURST_BEAMNS + BEAMNONSTANDARD_XAKSROTVER)
#define BUR_BEAMNS_P42CONV          QB(BURST_BEAMNS + BEAMNONSTANDARD_P42CONV)
#define BUR_BEAMNS_K12CONV          QB(BURST_BEAMNS + BEAMNONSTANDARD_K12CONV)
#define BUR_BEAMNS_VACCPUMP55       QB(BURST_BEAMNS + BEAMNONSTANDARD_VACCPUMP55)
#define BUR_BEAMNS_VACCPUMP56       QB(BURST_BEAMNS + BEAMNONSTANDARD_VACCPUMP56)
#define BUR_BEAMNS_VACCPUMP98       QB(BURST_BEAMNS + BEAMNONSTANDARD_VACCPUMP98)
#define BUR_BEAMNS_VACCPUMP58       QB(BURST_BEAMNS + BEAMNONSTANDARD_VACCPUMP58)
#define BUR_BEAMNS_VACCVALVE56      QB(BURST_BEAMNS + BEAMNONSTANDARD_VACCVALVE56)
#define BUR_BEAMNS_VACCVALVE58      QB(BURST_BEAMNS + BEAMNONSTANDARD_VACCVALVE58)
#define BUR_BEAMNS_SPSBEND1K12         QB(BURST_BEAMNS + BEAMNONSTANDARD_SPSBEND1K12)
#define BUR_BEAMNS_SPSBEND2K12         QB(BURST_BEAMNS + BEAMNONSTANDARD_SPSBEND2K12)
#define BUR_BEAMNS_SPSBEND3K12         QB(BURST_BEAMNS + BEAMNONSTANDARD_SPSBEND3K12)
#define BUR_BEAMNS_SPSBEND4K12         QB(BURST_BEAMNS + BEAMNONSTANDARD_SPSBEND4K12)
#define BUR_BEAMNS_SPSBEND5K12         QB(BURST_BEAMNS + BEAMNONSTANDARD_SPSBEND5K12)
#define BUR_BEAMNS_P42FILENUMBER    QB(BURST_BEAMNS + BEAMNONSTANDARD_P42FILENUMBER)
#define BUR_BEAMNS_K12FILENUMBER    QB(BURST_BEAMNS + BEAMNONSTANDARD_K12FILENUMBER)

/**********************************************************************/
/*                  Beam Standard Block Macros                        */
/**********************************************************************/
#define BUR_BEAMS_SPSDATE              QB(BURST_BEAMS + BEAMSTANDARD_SPSDATE)
#define BUR_BEAMS_SPSHOUR              QB(BURST_BEAMS + BEAMSTANDARD_SPSHOUR)
#define BUR_BEAMS_SPST4INT             QB(BURST_BEAMS + BEAMSTANDARD_SPST4INT)
#define BUR_BEAMS_SPST4SYM             QB(BURST_BEAMS + BEAMSTANDARD_SPST4SYM)
#define BUR_BEAMS_SPST10INT            QB(BURST_BEAMS + BEAMSTANDARD_SPST10INT)
#define BUR_BEAMS_SPSK12               QB(BURST_BEAMS + BEAMSTANDARD_SPSK12)
#define BUR_BEAMS_SPST4                QB(BURST_BEAMS + BEAMSTANDARD_SPST4)
#define BUR_BEAMS_SPSP0                QB(BURST_BEAMS + BEAMSTANDARD_SPSP0)
#define BUR_BEAMS_SPSMNP33COIL1        QB(BURST_BEAMS + BEAMSTANDARD_SPSMNP33COIL1)
#define BUR_BEAMS_SPSMNP33COIL2        QB(BURST_BEAMS + BEAMSTANDARD_SPSMNP33COIL2)
#define BUR_BEAMS_SPSSTATUS            QB(BURST_BEAMS + BEAMSTANDARD_SPSSTATUS)
#define BUR_BEAMS_SPARE(x)             QB(BURST_BEAMS + BEAMSTANDARD_SPARE+(x)-1)

/**********************************************************************/
/*                      TS Burst Macros                               */
/**********************************************************************/
#define BUR_TS_TSSCAL_NSCALER                   IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL + TSSCALARS_NSCALER)
#define BUR_TS_TSSCAL_SCALER(x)                 IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL + TSSCALARS_SCALER + (x)-1)

#define BUR_TS_TSSCAL97_Q2X1MUXNAKL             IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_Q2X1MUXNAKL)
#define BUR_TS_TSSCAL97_Q2XN1MUXNAKL            IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_Q2XN1MUXNAKL)
#define BUR_TS_TSSCAL97_QXXN1MUXNAKL            IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_QXXN1MUXNAKL)
#define BUR_TS_TSSCAL97_QXXN1MU                 IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_QXXN1MU)
#define BUR_TS_TSSCAL97_QXOVER2                 IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_QXOVER2)
#define BUR_TS_TSSCAL97_QX                      IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_QX)
#define BUR_TS_TSSCAL97_QXFINETIME0             IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_QXFINETIME0)
#define BUR_TS_TSSCAL97_QXFINETIME1             IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_QXFINETIME1)
#define BUR_TS_TSSCAL97_QXFT0MB                 IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_QXFT0MB)
#define BUR_TS_TSSCAL97_QXFT1MB                 IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_QXFT1MB)
#define BUR_TS_TSSCAL97_MBOXDEBREQ              IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_MBOXDEBREQ)
#define BUR_TS_TSSCAL97_L1COD1MB                IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_L1COD1MB)
#define BUR_TS_TSSCAL97_L1COD2MB                IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_L1COD2MB)
#define BUR_TS_TSSCAL97_L1COD3MB                IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_L1COD3MB)
#define BUR_TS_TSSCAL97_L1STRBXL1ON             IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_L1STRBXL1ON)
#define BUR_TS_TSSCAL97_L1STRBMB                IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_L1STRBMB)
#define BUR_TS_TSSCAL97_ONETRACKDC1             IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_ONETRACKDC1)
#define BUR_TS_TSSCAL97_TWOTHREETRACKDC1        IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_TWOTHREETRACKDC1)
#define BUR_TS_TSSCAL97_FOURTRACKSDC1           IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_FOURTRACKSDC1)
#define BUR_TS_TSSCAL97_OVFLOWDC1               IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_OVFLOWDC1)
#define BUR_TS_TSSCAL97_TOTORAKL                IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_TOTORAKL)
#define BUR_TS_TSSCAL97_QXOVER128               IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_QXOVER128)
#define BUR_TS_TSSCAL97_Q2X2MUXNAKL             IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_Q2X2MUXNAKL)
#define BUR_TS_TSSCAL97_T0NXN1MUXNAKL           IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_T0NXN1MUXNAKL)
#define BUR_TS_TSSCAL97_TRIGNOXOFF              IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_TRIGNOXOFF)
#define BUR_TS_TSSCAL97_TRIGNOXWRIT             IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_TRIGNOXWRIT)
#define BUR_TS_TSSCAL97_LASER                   IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_LASER)
#define BUR_TS_TSSCAL97_LKRCALNZS               IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_LKRCALNZS)
#define BUR_TS_TSSCAL97_LKRCALZS                IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_LKRCALZS)
#define BUR_TS_TSSCAL97_HACPULSER               IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_HACPULSER)
#define BUR_TS_TSSCAL97_PMBPULSER               IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_PMBPULSER)
#define BUR_TS_TSSCAL97_RANDOMKL                IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_RANDOMKL)
#define BUR_TS_TSSCAL97_RANDOMKS                IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_RANDOMKS)
#define BUR_TS_TSSCAL97_S2HVSPARK               IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_S2HVSPARK)
#define BUR_TS_TSSCAL97_FULLTSLOST              IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_FULLTSLOST)
#define BUR_TS_TSSCAL97_XOFFTSLOST              IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_XOFFTSLOST)
#define BUR_TS_TSSCAL97_L1LASER                 IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_L1LASER)
#define BUR_TS_TSSCAL97_L1LKRCALNZS             IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_L1LKRCALNZS)
#define BUR_TS_TSSCAL97_L1LKRCALZS              IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_L1LKRCALZS)
#define BUR_TS_TSSCAL97_L1HACPULS               IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_L1HACPULS)
#define BUR_TS_TSSCAL97_L1PMBPULS               IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_L1PMBPULS)
#define BUR_TS_TSSCAL97_L1RANDKL                IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_L1RANDKL)
#define BUR_TS_TSSCAL97_L1RANDKS                IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_L1RANDKS)
#define BUR_TS_TSSCAL97_L1L1ONTRANS             IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_L1L1ONTRANS)
#define BUR_TS_TSSCAL97_L1Q2X1MUXNAKL           IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_L1Q2X1MUXNAKL)
#define BUR_TS_TSSCAL97_L1Q2XN1MUXNAKL          IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_L1Q2XN1MUXNAKL)
#define BUR_TS_TSSCAL97_L1QXXN1MUXNAKL          IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_L1QXXN1MUXNAKL)
#define BUR_TS_TSSCAL97_L1QXXN1MU               IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_L1QXXN1MU)
#define BUR_TS_TSSCAL97_L1QXOVER2               IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_L1QXOVER2)
#define BUR_TS_TSSCAL97_L1QX                    IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_L1QX)
#define BUR_TS_TSSCAL97_L1QXFINETIME0           IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_L1QXFINETIME0)
#define BUR_TS_TSSCAL97_L1QXFINETIME1           IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_L1QXFINETIME1)
#define BUR_TS_TSSCAL97_L1OVFLOWDC1             IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_L1OVFLOWDC1)
#define BUR_TS_TSSCAL97_L1ONETRACKDC1           IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_L1ONETRACKDC1)
#define BUR_TS_TSSCAL97_L1TWOTHREETRACKDC1      IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_L1TWOTHREETRACKDC1)
#define BUR_TS_TSSCAL97_L1FOURTRACKSDC1         IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_L1FOURTRACKSDC1)
#define BUR_TS_TSSCAL97_L1QXOVER128             IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_L1QXOVER128)
#define BUR_TS_TSSCAL97_L1Q2X2MUXNAK            IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_L1Q2X2MUXNAK)
#define BUR_TS_TSSCAL97_L1TONXN1MUXNA           IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_L1TONXN1MUXNA)
#define BUR_TS_TSSCAL97_L1AKL                   IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_L1AKL)
#define BUR_TS_TSSCAL97_NT2PI0                  IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_NT2PI0)
#define BUR_TS_TSSCAL97_NTLKRMBIAS              IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_NTLKRMBIAS)
#define BUR_TS_TSSCAL97_NT2PI0NOPK              IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_NT2PI0NOPK)
#define BUR_TS_TSSCAL97_NTETOT                  IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_NTETOT)
#define BUR_TS_TSSCAL97_NTACCID                 IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_NTACCID)
#define BUR_TS_TSSCAL97_NTMUMUGAM               IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_NTMUMUGAM)
#define BUR_TS_TSSCAL97_NTMUMUEE                IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_NTMUMUEE)
#define BUR_TS_TSSCAL97_NTDALITZ                IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_NTDALITZ)
#define BUR_TS_TSSCAL97_NTSUSY2G                IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_NTSUSY2G)
#define BUR_TS_TSSCAL97_NTFINETIME0             IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_NTFINETIME0)
#define BUR_TS_TSSCAL97_NTFINETIME1             IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_NTFINETIME1)
#define BUR_TS_TSSCAL97_NTTIMEPEAK              IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_NTTIMEPEAK)
#define BUR_TS_TSSCAL97_NTSUSY3P                IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_NTSUSY3P)
#define BUR_TS_TSSCAL97_CPDPATTERN              IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_CPDPATTERN)
#define BUR_TS_TSSCAL97_Q1XN1MU                 IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_Q1XN1MU)
#define BUR_TS_TSSCAL97_Q2                      IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_Q2)
#define BUR_TS_TSSCAL97_QOR                     IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_QOR)
#define BUR_TS_TSSCAL97_ONEMU                   IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_ONEMU)
#define BUR_TS_TSSCAL97_T0NXN1MU                IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_T0NXN1MU)
#define BUR_TS_TSSCAL97_Q1X1MU                  IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_Q1X1MU)
#define BUR_TS_TSSCAL97_MBOVFLOW12              IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_MBOVFLOW12)
#define BUR_TS_TSSCAL97_MBOVFLOW4               IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_MBOVFLOW4)
#define BUR_TS_TSSCAL97_MBTOOCPLX               IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_MBTOOCPLX)
#define BUR_TS_TSSCAL97_MBINTIME                IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_MBINTIME)
#define BUR_TS_TSSCAL97_MBZOKRARE               IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_MBZOKRARE)
#define BUR_TS_TSSCAL97_MBPIPLUSPIMINUSOK       IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_MBPIPLUSPIMINUSOK)
#define BUR_TS_TSSCAL97_MBPIPLUSPIMINUSPI0      IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_MBPIPLUSPIMINUSPI0)
#define BUR_TS_TSSCAL97_MBFATAL                 IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_MBFATAL)
#define BUR_TS_TSSCAL97_MBFORCEREAD             IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_MBFORCEREAD)
#define BUR_TS_TSSCAL97_MBZOK                   IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_MBZOK)
#define BUR_TS_TSSCAL97_MBMASSOK                IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_MBMASSOK)
#define BUR_TS_TSSCAL97_MBSTRBTOTS              IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_MBSTRBTOTS)
#define BUR_TS_TSSCAL97_NTETOTBIAS              IB(BURST_TS + TRIGGERSUPERVISOR_TSSCAL97 + TSSCALARS97_NTETOTBIAS)

/**********************************************************************/
/*                      TSL2  Burst Macros                            */
/**********************************************************************/
#define BUR_TS_L2TSSCAL_NSCALER                IB(BURST_TS + TRIGGERSUPERVISOR_L2TSSCAL + L2TSSCALARS_NSCALER)
#define BUR_TS_L2TSSCAL_SCALER(x)              IB(BURST_TS + TRIGGERSUPERVISOR_L2TSSCAL + L2TSSCALARS_SCALER + (x)-1)

#define BUR_TS_L2TSSCAL97_PIPLUSPIMINUS        IB(BURST_TS + TRIGGERSUPERVISOR_L2TSSCAL97 + L2TSSCALARS97_PIPLUSPIMINUS)
#define BUR_TS_L2TSSCAL97_L1PIPLUSPIMINUS      IB(BURST_TS + TRIGGERSUPERVISOR_L2TSSCAL97 + L2TSSCALARS97_L1PIPLUSPIMINUS)
#define BUR_TS_L2TSSCAL97_L1PPWDOG             IB(BURST_TS + TRIGGERSUPERVISOR_L2TSSCAL97 + L2TSSCALARS97_L1PPWDOG)
#define BUR_TS_L2TSSCAL97_QOR                  IB(BURST_TS + TRIGGERSUPERVISOR_L2TSSCAL97 + L2TSSCALARS97_QOR)
#define BUR_TS_L2TSSCAL97_PI0PI0               IB(BURST_TS + TRIGGERSUPERVISOR_L2TSSCAL97 + L2TSSCALARS97_PI0PI0)
#define BUR_TS_L2TSSCAL97_NHOD                 IB(BURST_TS + TRIGGERSUPERVISOR_L2TSSCAL97 + L2TSSCALARS97_NHOD)
#define BUR_TS_L2TSSCAL97_LKRMBIAS             IB(BURST_TS + TRIGGERSUPERVISOR_L2TSSCAL97 + L2TSSCALARS97_LKRMBIAS)
#define BUR_TS_L2TSSCAL97_EPSMBIAS             IB(BURST_TS + TRIGGERSUPERVISOR_L2TSSCAL97 + L2TSSCALARS97_EPSMBIAS)
#define BUR_TS_L2TSSCAL97_PIPLUSPIMINUSPI0     IB(BURST_TS + TRIGGERSUPERVISOR_L2TSSCAL97 + L2TSSCALARS97_PIPLUSPIMINUSPI0)
#define BUR_TS_L2TSSCAL97_MUMUG                IB(BURST_TS + TRIGGERSUPERVISOR_L2TSSCAL97 + L2TSSCALARS97_MUMUG)
#define BUR_TS_L2TSSCAL97_DALITZ               IB(BURST_TS + TRIGGERSUPERVISOR_L2TSSCAL97 + L2TSSCALARS97_DALITZ)
#define BUR_TS_L2TSSCAL97_SUSY                 IB(BURST_TS + TRIGGERSUPERVISOR_L2TSSCAL97 + L2TSSCALARS97_SUSY)
#define BUR_TS_L2TSSCAL97_RANKLKS              IB(BURST_TS + TRIGGERSUPERVISOR_L2TSSCAL97 + L2TSSCALARS97_RANKLKS)
#define BUR_TS_L2TSSCAL97_L1ONCNT              IB(BURST_TS + TRIGGERSUPERVISOR_L2TSSCAL97 + L2TSSCALARS97_L1ONCNT)
#define BUR_TS_L2TSSCAL97_XLOSTTR              IB(BURST_TS + TRIGGERSUPERVISOR_L2TSSCAL97 + L2TSSCALARS97_XLOSTTR)
#define BUR_TS_L2TSSCAL97_FLOSTTR              IB(BURST_TS + TRIGGERSUPERVISOR_L2TSSCAL97 + L2TSSCALARS97_FLOSTTR)
#define BUR_TS_L2TSSCAL97_TWOPI0NOPK           IB(BURST_TS + TRIGGERSUPERVISOR_L2TSSCAL97 + L2TSSCALARS97_TWOPI0NOPK)

/**********************************************************************/
/*                      TS AKL  Burst Macros                          */
/**********************************************************************/
#define BUR_TS_AKLSCAL_AKL1OR        IB(BURST_TS + TRIGGERSUPERVISOR_AKLSCAL +  AKLSCALARS_AKL1OR)
#define BUR_TS_AKLSCAL_AKL2OR        IB(BURST_TS + TRIGGERSUPERVISOR_AKLSCAL +  AKLSCALARS_AKL2OR)
#define BUR_TS_AKLSCAL_AKL3OR        IB(BURST_TS + TRIGGERSUPERVISOR_AKLSCAL +  AKLSCALARS_AKL3OR)
#define BUR_TS_AKLSCAL_AKL4OR        IB(BURST_TS + TRIGGERSUPERVISOR_AKLSCAL +  AKLSCALARS_AKL4OR)
#define BUR_TS_AKLSCAL_AKL5OR        IB(BURST_TS + TRIGGERSUPERVISOR_AKLSCAL +  AKLSCALARS_AKL5OR)
#define BUR_TS_AKLSCAL_AKL6OR        IB(BURST_TS + TRIGGERSUPERVISOR_AKLSCAL +  AKLSCALARS_AKL6OR)
#define BUR_TS_AKLSCAL_AKL7OR        IB(BURST_TS + TRIGGERSUPERVISOR_AKLSCAL +  AKLSCALARS_AKL7OR)
#define BUR_TS_AKLSCAL_AKLOR         IB(BURST_TS + TRIGGERSUPERVISOR_AKLSCAL +  AKLSCALARS_AKLOR)

#define BUR_TS_AKLSCAL_AKL1ORAND     IB(BURST_TS + TRIGGERSUPERVISOR_AKLSCAL +  AKLSCALARS_AKL1ORAND)
#define BUR_TS_AKLSCAL_AKL2ORAND     IB(BURST_TS + TRIGGERSUPERVISOR_AKLSCAL +  AKLSCALARS_AKL2ORAND)
#define BUR_TS_AKLSCAL_AKL3ORAND     IB(BURST_TS + TRIGGERSUPERVISOR_AKLSCAL +  AKLSCALARS_AKL3ORAND)
#define BUR_TS_AKLSCAL_AKL4ORAND     IB(BURST_TS + TRIGGERSUPERVISOR_AKLSCAL +  AKLSCALARS_AKL4ORAND)
#define BUR_TS_AKLSCAL_AKL5ORAND     IB(BURST_TS + TRIGGERSUPERVISOR_AKLSCAL +  AKLSCALARS_AKL5ORAND)
#define BUR_TS_AKLSCAL_AKL6ORAND     IB(BURST_TS + TRIGGERSUPERVISOR_AKLSCAL +  AKLSCALARS_AKL6ORAND)
#define BUR_TS_AKLSCAL_AKL7ORAND     IB(BURST_TS + TRIGGERSUPERVISOR_AKLSCAL +  AKLSCALARS_AKL7ORAND)
#define BUR_TS_AKLSCAL_AKLORAND      IB(BURST_TS + TRIGGERSUPERVISOR_AKLSCAL +  AKLSCALARS_AKLORAND)

/**********************************************************************/
/*                     Beam Monitor Burst Macros                      */
/**********************************************************************/
#define BUR_BM_BADMAC             IB(BURST_BM + BEAMMONITOR_BADMAC)
#define BUR_BM_FASTSPILLKS        QB(BURST_BM + BEAMMONITOR_FASTSPILLKS)
#define BUR_BM_AVERAGEAKS         QB(BURST_BM + BEAMMONITOR_AVERAGEAKS)
#define BUR_BM_MAXAKS             QB(BURST_BM + BEAMMONITOR_MAXAKS)
#define BUR_BM_RMSAKS             QB(BURST_BM + BEAMMONITOR_RMSAKS)
#define BUR_BM_SLOWDCKS           QB(BURST_BM + BEAMMONITOR_SLOWDCKS)
#define BUR_BM_EXTRLENKS          QB(BURST_BM + BEAMMONITOR_EXTRLENKS)
#define BUR_BM_FASTSPILLKL        QB(BURST_BM + BEAMMONITOR_FASTSPILLKL)
#define BUR_BM_AVERAGEBCTR        QB(BURST_BM + BEAMMONITOR_AVERAGEBCTR)
#define BUR_BM_MAXBCTR            QB(BURST_BM + BEAMMONITOR_MAXBCTR)
#define BUR_BM_RMSBCTR            QB(BURST_BM + BEAMMONITOR_RMSBCTR)
#define BUR_BM_SLOWDCKL           QB(BURST_BM + BEAMMONITOR_SLOWDCKL)
#define BUR_BM_EXTRLENKL          QB(BURST_BM + BEAMMONITOR_EXTRLENKL)
#define BUR_BM_NSAMPLE            IB(BURST_BM + BEAMMONITOR_NSAMPLE)
#define BUR_BM_FCLOCK             IB(BURST_BM + BEAMMONITOR_FCLOCK)
#define BUR_BM_FHAC1              IB(BURST_BM + BEAMMONITOR_FHAC1)
#define BUR_BM_FHAC1              IB(BURST_BM + BEAMMONITOR_FHAC1)
#define BUR_BM_FHAC2              IB(BURST_BM + BEAMMONITOR_FHAC2)
#define BUR_BM_FMUONS             IB(BURST_BM + BEAMMONITOR_FMUONS)
#define BUR_BM_FAKS               IB(BURST_BM + BEAMMONITOR_FAKS)
#define BUR_BM_FT1T2              IB(BURST_BM + BEAMMONITOR_FT1T2)
#define BUR_BM_FQX                IB(BURST_BM + BEAMMONITOR_FQX)
#define BUR_BM_FBCTR              IB(BURST_BM + BEAMMONITOR_FBCTR)
#define BUR_BM_FTWOMU             IB(BURST_BM + BEAMMONITOR_FTWOMU)
#define BUR_BM_FHV1               IB(BURST_BM + BEAMMONITOR_FHV1)
#define BUR_BM_FHVD1              IB(BURST_BM + BEAMMONITOR_FHVD1)
#define BUR_BM_FHVD2              IB(BURST_BM + BEAMMONITOR_FHVD2)
#define BUR_BM_FHVD3              IB(BURST_BM + BEAMMONITOR_FHVD3)
#define BUR_BM_FHVD4              IB(BURST_BM + BEAMMONITOR_FHVD4)
#define BUR_BM_FDELCO             IB(BURST_BM + BEAMMONITOR_FDELCO)
#define BUR_BM_FAKL               IB(BURST_BM + BEAMMONITOR_FAKL)
#define BUR_BM_FKSMDELCO          IB(BURST_BM + BEAMMONITOR_FKSMDELCO)
#define BUR_BM_FKSM               IB(BURST_BM + BEAMMONITOR_FKSM)
#define BUR_BM_CLOCK(x)           IB(BURST_BM + BEAMMONITOR_CLOCK+(x)-1)
#define BUR_BM_AKS(x)             IB(BURST_BM + BEAMMONITOR_AKS+(x)-1)
#define BUR_BM_T1T2(x)            IB(BURST_BM + BEAMMONITOR_T1T2+(x)-1)
#define BUR_BM_QX(x)              IB(BURST_BM + BEAMMONITOR_QX+(x)-1)
#define BUR_BM_BCTR(x)            IB(BURST_BM + BEAMMONITOR_BCTR+(x)-1)
#define BUR_BM_DELCO(x)           IB(BURST_BM + BEAMMONITOR_DELCO+(x)-1)
#define BUR_BM_KSMDELCO(x)        IB(BURST_BM + BEAMMONITOR_KSMDELCO+(x)-1)
#define BUR_BM_KSM(x)             IB(BURST_BM + BEAMMONITOR_KSM+(x)-1)
/**********************************************************************/
/*                      Lkr Calib Burst Macros                        */
/**********************************************************************/
#define BUR_LKRCALIB_TRIGGER(x)   IB(BURST_LKRCALIB + LKRCALIB_TRIGGER+(x)-1)
#define BUR_LKRCALIB_DAC          QB(BURST_LKRCALIB + LKRCALIB_DAC)
/**********************************************************************/
/*                      MUV Scalars Burst Macros                        */
/**********************************************************************/
#define BUR_MUVSCAL_MUONS         IB(BURST_MUVSCAL + BURST_MUVSCAL_MUONS)
#define BUR_MUVSCAL_TWOMUONS         IB(BURST_MUVSCAL + BURST_MUVSCAL_TWOMUONS)
/**********************************************************************/
/*                      BAD Burst Macros                              */
/**********************************************************************/
#define BUR_BADB_CALL  IB(BURST_BADB + BADBURST_CALL)
#define BUR_BADB_SKIP  IB(BURST_BADB + BADBURST_SKIP)
#define BUR_BADB_LKR   IB(BURST_BADB + BADBURST_LKR)
#define BUR_BADB_DCH   IB(BURST_BADB + BADBURST_DCH)
#define BUR_BADB_NUT   IB(BURST_BADB + BADBURST_NUT)
#define BUR_BADB_MBX   IB(BURST_BADB + BADBURST_MBX)
#define BUR_BADB_HAC   IB(BURST_BADB + BADBURST_HAC)
#define BUR_BADB_TAG   IB(BURST_BADB + BADBURST_TAG)
#define BUR_BADB_MUV   IB(BURST_BADB + BADBURST_MUV)
#define BUR_BADB_HODC  IB(BURST_BADB + BADBURST_HODC)
#define BUR_BADB_HODN  IB(BURST_BADB + BADBURST_HODN)
#define BUR_BADB_PMB   IB(BURST_BADB + BADBURST_PMB)
#define BUR_BADB_AKS   IB(BURST_BADB + BADBURST_AKS)
#define BUR_BADB_AKL   IB(BURST_BADB + BADBURST_AKL)
#define BUR_BADB_CLK   IB(BURST_BADB + BADBURST_CLK)
#define BUR_BADB_KSM   IB(BURST_BADB + BADBURST_KSM)
#define BUR_BADB_KAB   IB(BURST_BADB + BADBURST_KAB)
#define BUR_BADB_NOEPS IB(BURST_BADB + BADBURST_NOEPS)
#define BUR_BADB_PHYS  IB(BURST_BADB + BADBURST_PHYS)
#define BUR_BADB_SPARE1 IB(BURST_BADB + BADBURST_SPARE1)
#define BUR_BADB_SPARE2 IB(BURST_BADB + BADBURST_SPARE2)
#define BUR_BADB_SPARE3 IB(BURST_BADB + BADBURST_SPARE3)
#define BUR_BADB_SPARE4 IB(BURST_BADB + BADBURST_SPARE4)

/**********************************************************************/
/*                      Time Offset Macros                            */
/**********************************************************************/
#define BUR_TOFFST_VERSION  QB(BURST_TOFFST + SUPERTIMEOFFSET_VERSION)
#define BUR_TOFFST_TAG      QB(BURST_TOFFST + SUPERTIMEOFFSET_TAG)
#define BUR_TOFFST_AKS      QB(BURST_TOFFST + SUPERTIMEOFFSET_AKS)
#define BUR_TOFFST_KAB      QB(BURST_TOFFST + SUPERTIMEOFFSET_KAB)
#define BUR_TOFFST_NMV      QB(BURST_TOFFST + SUPERTIMEOFFSET_NMV)
#define BUR_TOFFST_AKL      QB(BURST_TOFFST + SUPERTIMEOFFSET_AKL)
#define BUR_TOFFST_HOD      QB(BURST_TOFFST + SUPERTIMEOFFSET_HOD)
#define BUR_TOFFST_NHO      QB(BURST_TOFFST + SUPERTIMEOFFSET_NHO)
#define BUR_TOFFST_DCH      QB(BURST_TOFFST + SUPERTIMEOFFSET_DCH)
#define BUR_TOFFST_LKR      QB(BURST_TOFFST + SUPERTIMEOFFSET_LKR)
#define BUR_TOFFST_HAC      QB(BURST_TOFFST + SUPERTIMEOFFSET_HAC)
#define BUR_TOFFST_MUV      QB(BURST_TOFFST + SUPERTIMEOFFSET_MUV)
#define BUR_TOFFST_LKRTAG   QB(BURST_TOFFST + SUPERTIMEOFFSET_LKRTAG)
#define BUR_TOFFST_LKRNHOD  QB(BURST_TOFFST + SUPERTIMEOFFSET_LKRNHOD)
#define BUR_TOFFST_LKRAKL   QB(BURST_TOFFST + SUPERTIMEOFFSET_LKRAKL)
#define BUR_TOFFST_LKRHAC   QB(BURST_TOFFST + SUPERTIMEOFFSET_LKRHAC)
#define BUR_TOFFST_KABPLUS  QB(BURST_TOFFST + SUPERTIMEOFFSET_KABPLUS)
#define BUR_TOFFST_KABMINUS QB(BURST_TOFFST + SUPERTIMEOFFSET_KABMINUS)

/**********************************************************************/
/*                      General Burst Macros                          */
/**********************************************************************/
#define BURST_PTR  IB(1)
#define BUR_MAJORVER         IB(BURST_MAJORVER)
#define BUR_MINORVER         IB(BURST_MINORVER)
#define BUR_PATCH            IB(BURST_PATCH)
#define BUR_TIME             IB(BURST_TIME)
#define BUR_HEPDB(x)         IB(BURST_HEPDB+(x)-1)
#define BUR_YEARRUNMIN       IB(BURST_HEPDB)
#define BUR_YEARRUNMAX       IB(BURST_HEPDB+1)
#define BUR_BRTYPE           IB(BURST_BRTYPE)
#define BUR_BMTYPE           IB(BURST_BMTYPE)
#define BUR_INTENSITY        QB(BURST_INTENSITY)
#define BUR_NRUN             IB(BURST_NRUN)
#define BUR_DATASET          IB(BURST_DATASET)
#define BUR_NEVENT           IB(BURST_NEVENT)
#define BUR_KSMSCA(x)        IB(BURST_KSMSCA+(x)-1)
#define BUR_NHOSCA(x)        IB(BURST_NHOSCA+(x)-1)
#define BUR_HODVSCA(x)       IB(BURST_HODVSCA+(x)-1)
#define BUR_HODHSCA(x)       IB(BURST_HODHSCA+(x)-1)
#define BUR_LOGIC(x)         IB(BURST_LOGIC+(x)-1)
#define BUR_SYPS(x)          IB(BURST_SYPS+(x)-1)
#define BUR_XOFFBURSTLEN     QB(BURST_XOFFBURSTLEN)
#define BUR_XOFFDCH_NTRANSITION      QB(BURST_XOFFDCH+XOFFDET_NTRANSITION)
#define BUR_XOFFDCH_FRACTIMEON       QB(BURST_XOFFDCH+XOFFDET_FRACTIMEON)
#define BUR_XOFFDCH_FIRSTTIMEON      QB(BURST_XOFFDCH+XOFFDET_FIRSTTIMEON)
#define BUR_XOFFLKR_NTRANSITION      QB(BURST_XOFFLKR+XOFFDET_NTRANSITION)
#define BUR_XOFFLKR_FRACTIMEON       QB(BURST_XOFFLKR+XOFFDET_FRACTIMEON)
#define BUR_XOFFLKR_FIRSTTIMEON      QB(BURST_XOFFLKR+XOFFDET_FIRSTTIMEON)
#define BUR_XOFFNUT_NTRANSITION      QB(BURST_XOFFNUT+XOFFDET_NTRANSITION)
#define BUR_XOFFNUT_FRACTIMEON       QB(BURST_XOFFNUT+XOFFDET_FRACTIMEON)
#define BUR_XOFFNUT_FIRSTTIMEON      QB(BURST_XOFFNUT+XOFFDET_FIRSTTIMEON)
#define BUR_XOFFHAC_NTRANSITION      QB(BURST_XOFFHAC+XOFFDET_NTRANSITION)
#define BUR_XOFFHAC_FRACTIMEON       QB(BURST_XOFFHAC+XOFFDET_FRACTIMEON)
#define BUR_XOFFHAC_FIRSTTIMEON      QB(BURST_XOFFHAC+XOFFDET_FIRSTTIMEON)
#define BUR_XOFFAKL_NTRANSITION      QB(BURST_XOFFAKL+XOFFDET_NTRANSITION)
#define BUR_XOFFAKL_FRACTIMEON       QB(BURST_XOFFAKL+XOFFDET_FRACTIMEON)
#define BUR_XOFFAKL_FIRSTTIMEON      QB(BURST_XOFFAKL+XOFFDET_FIRSTTIMEON)
#define BUR_XOFFTAG_NTRANSITION      QB(BURST_XOFFTAG+XOFFDET_NTRANSITION)
#define BUR_XOFFTAG_FRACTIMEON       QB(BURST_XOFFTAG+XOFFDET_FRACTIMEON)
#define BUR_XOFFTAG_FIRSTTIMEON      QB(BURST_XOFFTAG+XOFFDET_FIRSTTIMEON)
#define BUR_XOFFHOD_NTRANSITION      QB(BURST_XOFFHOD+XOFFDET_NTRANSITION)
#define BUR_XOFFHOD_FRACTIMEON       QB(BURST_XOFFHOD+XOFFDET_FRACTIMEON)
#define BUR_XOFFHOD_FIRSTTIMEON      QB(BURST_XOFFHOD+XOFFDET_FIRSTTIMEON)
#define BUR_XOFFMUV_NTRANSITION      QB(BURST_XOFFMUV+XOFFDET_NTRANSITION)
#define BUR_XOFFMUV_FRACTIMEON       QB(BURST_XOFFMUV+XOFFDET_FRACTIMEON)
#define BUR_XOFFMUV_FIRSTTIMEON      QB(BURST_XOFFMUV+XOFFDET_FIRSTTIMEON)
#define BUR_NTRIGWORD         IB(BURST_NTRIGWORD)
#define BUR_TRIGWORD(x)       IB(BURST_TRIGWORD+(x)-1)
#define BUR_NTIMESTAMP        IB(BURST_NTIMESTAMP)
#define BUR_TIMESTAMP(x)      IB(BURST_TIMESTAMP+(x)-1)
#define BUR_NDCHDECERROR      IB(BURST_NDCHDECERROR)
#define BUR_DCHDECERROR(x)    IB(BURST_DCHDECERROR+(x)-1)
#define BUR_NLKRHACDECERROR   IB(BURST_NLKRHACDECERROR)
#define BUR_LKRHACDECERROR(x) IB(BURST_LKRHACDECERROR+(x)-1)
#define BUR_NNEUTRALINFO      IB(BURST_NNEUTRALINFO)
#define BUR_NEUTRALINFO(x)   IB(BURST_NEUTRALINFO+(x)-1)
#define BUR_NCHARGEDINFO      IB(BURST_NCHARGEDINFO)
#define BUR_CHARGEDINFO(x)   IB(BURST_CHARGEDINFO+(x)-1)
#define BUR_CALLANAROUTINE    IB(BURST_CALLANAROUTINE)
#define BUR_CHAMBERDZ(x)      QB(BURST_CHAMBERDZ+(x)-1)
#define BUR_DBERR             IB(BURST_DBERR)

#define BUR_TOCALL_SELCHARGED    IB(BURST_TOCALL + ANATOCALL_SELCHARGED)
#define BUR_TOCALL_SEL2PI0       IB(BURST_TOCALL + ANATOCALL_SEL2PI0)
#define BUR_TOCALL_SEL3PI0       IB(BURST_TOCALL + ANATOCALL_SEL3PI0)
#define BUR_TOCALL_SEL2GAM       IB(BURST_TOCALL + ANATOCALL_SEL2GAM)
#define BUR_TOCALL_BLUEFIELD     IB(BURST_TOCALL + ANATOCALL_BLUEFIELD)
#define BUR_TOCALL_LKRPEDCOR     IB(BURST_TOCALL + ANATOCALL_LKRPEDCOR)
#define BUR_TOCALL_LKRPOSCOR     IB(BURST_TOCALL + ANATOCALL_LKRPOSCOR)
#define BUR_TOCALL_LKRSHARING    IB(BURST_TOCALL + ANATOCALL_LKRSHARING)
#define BUR_TOCALL_HODOTIME      IB(BURST_TOCALL + ANATOCALL_HODOTIME)
#define BUR_TOCALL_NHODTIME      IB(BURST_TOCALL + ANATOCALL_NHODTIME)
#define BUR_TOCALL_LKRTIME       IB(BURST_TOCALL + ANATOCALL_LKRTIME)
#define BUR_TOCALL_TAGTIME       IB(BURST_TOCALL + ANATOCALL_TAGTIME)
#define BUR_TOCALL_AKSFLAG       IB(BURST_TOCALL + ANATOCALL_AKSFLAG)
#define BUR_TOCALL_MUON_REC      IB(BURST_TOCALL + ANATOCALL_MUON_REC)
#define BUR_TOCALL_MUON_REJECT   IB(BURST_TOCALL + ANATOCALL_MUON_REJECT)
#define BUR_TOCALL_GEOMCOR       IB(BURST_TOCALL + ANATOCALL_GEOMCOR)
#define BUR_TOCALL_MAGNETCOR     IB(BURST_TOCALL + ANATOCALL_MAGNETCOR)
#define BUR_TOCALL_NEWCHARGED    IB(BURST_TOCALL + ANATOCALL_NEWCHARGED)
#define BUR_TOCALL_MUON_TRACKREC IB(BURST_TOCALL + ANATOCALL_MUON_TRACKREC)
#define BUR_TOCALL_MUON_VTXREC   IB(BURST_TOCALL + ANATOCALL_MUON_VTXREC)
#define BUR_TOCALL_LKRCALCOR     IB(BURST_TOCALL + ANATOCALL_LKRCALCOR)
#define BUR_TOCALL_LKRCALCOR1    IB(BURST_TOCALL + ANATOCALL_LKRCALCOR1)
#define BUR_TOCALL_LKRCALCOR2    IB(BURST_TOCALL + ANATOCALL_LKRCALCOR2)
#define BUR_TOCALL_LKRCALCOR3    IB(BURST_TOCALL + ANATOCALL_LKRCALCOR3)
#define BUR_TOCALL_LKRCALHI2K    IB(BURST_TOCALL + ANATOCALL_LKRCALHI2K)
/**********************************************************************/
/*                      End of Burst Macros                           */
/**********************************************************************/
/* End of burst struct */
#define EOB_PTR IEB(1)
#define EOB_NEVENT            IEB(ENDOFBURST_NEVENT)
#define EOB_NWRITE            IEB(ENDOFBURST_NWRITE)
#define EOB_NKILL             IEB(ENDOFBURST_NKILL)
#define EOB_STATUS            IEB(ENDOFBURST_STATUS)
#define EOB_SGNNRESET(x)      IEB(ENDOFBURST_SGNNRESET+(x)-1)
#define EOB_SGNINEFF(x)       IEB(ENDOFBURST_SGNINEFF+(x)-1)
#define EOB_SGNEFF(x)         IEB(ENDOFBURST_SGNEFF+(x)-1)
#define EOB_SGNBERR(x)        IEB(ENDOFBURST_SGNBERR+(x)-1)
#define EOB_SGNBADBIT         IEB(ENDOFBURST_SGNBADBIT)
#define EOB_NEVENTLIST        IEB(ENDOFBURST_NEVENTLIST)
#define EOB_NTRIGWORD         IEB(ENDOFBURST_NTRIGWORD)
#define EOB_TRIGWORD(x)       IEB(ENDOFBURST_TRIGWORD+(x)-1)
#define EOB_NTIMESTAMP        IEB(ENDOFBURST_NTIMESTAMP)
#define EOB_TIMESTAMP(x)      IEB(ENDOFBURST_TIMESTAMP+(x)-1)
#define EOB_NDCHDECERROR      IEB(ENDOFBURST_NDCHDECERROR)
#define EOB_DCHDECERROR(x)    IEB(ENDOFBURST_DCHDECERROR+(x)-1)
#define EOB_NLKRHACDECERROR   IEB(ENDOFBURST_NLKRHACDECERROR)
#define EOB_LKRHACDECERROR(x) IEB(ENDOFBURST_LKRHACDECERROR+(x)-1)
#define EOB_NNEUTRALINFO      IEB(ENDOFBURST_NNEUTRALINFO)
#define EOB_NEUTRALINFO(x)   IEB(ENDOFBURST_NEUTRALINFO+(x)-1)
#define EOB_NCHARGEDINFO      IEB(ENDOFBURST_NCHARGEDINFO)
#define EOB_CHARGEDINFO(x)   IEB(ENDOFBURST_CHARGEDINFO+(x)-1)
#define EOB_NPROCERROR        IEB(ENDOFBURST_NPROCERROR)
#define EOB_PROCERROR(x)      IEB(ENDOFBURST_PROCERROR+(x)-1)

#define EOB_MAGNET_TIME       IEB(ENDOFBURST_MAGNETPROBES+EOBMAGNET_TIME)
#define EOB_MAGNET_HALLVSOB(x)       QEB(ENDOFBURST_MAGNETPROBES+EOBMAGNET_HALLVSOB+(x)-1)
#define EOB_MAGNET_HALLTSOB(x)       QEB(ENDOFBURST_MAGNETPROBES+EOBMAGNET_HALLTSOB+(x)-1)
#define EOB_MAGNET_HALLVEOB(x)       QEB(ENDOFBURST_MAGNETPROBES+EOBMAGNET_HALLVEOB+(x)-1)
#define EOB_MAGNET_HALLTEOB(x)       QEB(ENDOFBURST_MAGNETPROBES+EOBMAGNET_HALLTEOB+(x)-1)
#define EOB_MAGNET_VOLTMETERSOB   QEB(ENDOFBURST_MAGNETPROBES+EOBMAGNET_VOLTMETERSOB)
#define EOB_MAGNET_VOLTMETEREOB   QEB(ENDOFBURST_MAGNETPROBES+EOBMAGNET_VOLTMETEREOB)
#define EOB_PISAMON_TIME          IEB(ENDOFBURST_PISAMON+PISAMONITORS_TIME)
#define EOB_PISAMON_NMONJURA      IEB(ENDOFBURST_PISAMON+PISAMONITORS_NMONJURA)
#define EOB_PISAMON_MONJURA(x,y)   QEB(ENDOFBURST_PISAMON+PISAMONITORS_MONJURA+((x)-1)*PISACOUNTER_SIZE+((y)-1))
#define EOB_PISAMON_NMONSALEVE     IEB(ENDOFBURST_PISAMON+PISAMONITORS_NMONSALEVE)
#define EOB_PISAMON_MONSALEVE(x,y) QEB(ENDOFBURST_PISAMON+PISAMON_MONSALEVE+((x)-1)*PISACOUNTER_SIZE+((y)-1))
#define EOB_PISAMON_NMONAUX        IEB(ENDOFBURST_PISAMON+PISAMONITORS_NMONAUX)
#define EOB_PISAMON_MONAUX(x,y)    QEB(ENDOFBURST_PISAMON+PISAMON_MONAUX+((x)-1)*PISACOUNTER_SIZE+((y)-1))

/* 7.2 new version */
#define EOB_PISAMON_NSAMPLE                  IEB(ENDOFBURST_PISAMON+PISAMONITORS_NSAMPLE)
#define EOB_PISAMON_SAMPLE_CLOCK(i)          IEB(ENDOFBURST_PISAMON+PISAMONITORS_SAMPLE+(PISACOUNTERSAMPLE_SIZE*((i)-1))+PISACOUNTERSAMPLE_CLOCK)
#define EOB_PISAMON_SAMPLE_PHASE(i)          IEB(ENDOFBURST_PISAMON+PISAMONITORS_SAMPLE+(PISACOUNTERSAMPLE_SIZE*((i)-1))+PISACOUNTERSAMPLE_PHASE)
#define EOB_PISAMON_SAMPLE_EFFSPILL(i,j)     IEB(ENDOFBURST_PISAMON+PISAMONITORS_SAMPLE+(PISACOUNTERSAMPLE_SIZE*((i)-1))+PISACOUNTERSAMPLE_EFFSPILL+(j)-1)
#define EOB_PISAMON_SAMPLE_MOM0_JURA(i)      QEB(ENDOFBURST_PISAMON+PISAMONITORS_SAMPLE+(PISACOUNTERSAMPLE_SIZE*((i)-1))+PISACOUNTERSAMPLE_MOM0_JURA)
#define EOB_PISAMON_SAMPLE_MOM0_SALEVE(i)    QEB(ENDOFBURST_PISAMON+PISAMONITORS_SAMPLE+(PISACOUNTERSAMPLE_SIZE*((i)-1))+PISACOUNTERSAMPLE_MOM0_SALEVE)
#define EOB_PISAMON_SAMPLE_MOM1_JURA(i,j)    QEB(ENDOFBURST_PISAMON+PISAMONITORS_SAMPLE+(PISACOUNTERSAMPLE_SIZE*((i)-1))+PISACOUNTERSAMPLE_MOM1_JURA+(j)-1)
#define EOB_PISAMON_SAMPLE_MOM1_SALEVE(i,j)  QEB(ENDOFBURST_PISAMON+PISAMONITORS_SAMPLE+(PISACOUNTERSAMPLE_SIZE*((i)-1))+PISACOUNTERSAMPLE_MOM1_SALEVE+(j)-1)
#define EOB_PISAMON_SAMPLE_MOM2_JURA(i,j)    QEB(ENDOFBURST_PISAMON+PISAMONITORS_SAMPLE+(PISACOUNTERSAMPLE_SIZE*((i)-1))+PISACOUNTERSAMPLE_MOM2_JURA+(j)-1)
#define EOB_PISAMON_SAMPLE_MOM2_SALEVE(i,j)  QEB(ENDOFBURST_PISAMON+PISAMONITORS_SAMPLE+(PISACOUNTERSAMPLE_SIZE*((i)-1))+PISACOUNTERSAMPLE_MOM2_SALEVE+(j)-1)
#define EOB_PISAMON_MAINZ(i)                 IEB(ENDOFBURST_PISAMON+PISAMONITORS_MAINZ+(i)-1)

#define EOB_NPROCERRORREPRO   IEB(ENDOFBURST_NPROCERRORREPRO)
#define EOB_PROCERRORREPRO(x) IEB(ENDOFBURST_PROCERRORREPRO+(x)-1)
/* structure anaerrdec goes here */
#define EOB_L3SPARE_INT(x)    IEB(ENDOFBURST_L3SPARE_INT+(x)-1)
#define EOB_L3SPARE_FLOAT(x)  QEB(ENDOFBURST_L3SPARE_FLOAT+(x)-1)

#define EOB_L3ERRCTR_ERROR  IEB(ENDOFBURST_L3ERRCTR+L3ERRORCOUNTER_ERROR)
#define EOB_L3ERRCTR_DECEVT IEB(ENDOFBURST_L3ERRCTR+L3ERRORCOUNTER_DECEVT)
#define EOB_L3ERRCTR_DECTAG IEB(ENDOFBURST_L3ERRCTR+L3ERRORCOUNTER_DECTAG)
#define EOB_L3ERRCTR_DECAKS IEB(ENDOFBURST_L3ERRCTR+L3ERRORCOUNTER_DECAKS)
#define EOB_L3ERRCTR_DECAKL IEB(ENDOFBURST_L3ERRCTR+L3ERRORCOUNTER_DECAKL)
#define EOB_L3ERRCTR_DECDCH IEB(ENDOFBURST_L3ERRCTR+L3ERRORCOUNTER_DECDCH)
#define EOB_L3ERRCTR_DECHOD IEB(ENDOFBURST_L3ERRCTR+L3ERRORCOUNTER_DECHOD)
#define EOB_L3ERRCTR_DECNHO IEB(ENDOFBURST_L3ERRCTR+L3ERRORCOUNTER_DECNHO)
#define EOB_L3ERRCTR_DECLKR IEB(ENDOFBURST_L3ERRCTR+L3ERRORCOUNTER_DECLKR)
#define EOB_L3ERRCTR_DECHAC IEB(ENDOFBURST_L3ERRCTR+L3ERRORCOUNTER_DECHAC)
#define EOB_L3ERRCTR_DECMUV IEB(ENDOFBURST_L3ERRCTR+L3ERRORCOUNTER_DECMUV)
#define EOB_L3ERRCTR_DECPAT IEB(ENDOFBURST_L3ERRCTR+L3ERRORCOUNTER_DECPAT)
#define EOB_L3ERRCTR_DECNUT IEB(ENDOFBURST_L3ERRCTR+L3ERRORCOUNTER_DECNUT)
#define EOB_L3ERRCTR_DECL3  IEB(ENDOFBURST_L3ERRCTR+L3ERRORCOUNTER_DECL3)
#define EOB_L3ERRCTR_RECTAG IEB(ENDOFBURST_L3ERRCTR+L3ERRORCOUNTER_RECTAG)
#define EOB_L3ERRCTR_RECAKS IEB(ENDOFBURST_L3ERRCTR+L3ERRORCOUNTER_RECAKS)
#define EOB_L3ERRCTR_RECAKL IEB(ENDOFBURST_L3ERRCTR+L3ERRORCOUNTER_RECAKL)
#define EOB_L3ERRCTR_RECDCH IEB(ENDOFBURST_L3ERRCTR+L3ERRORCOUNTER_RECDCH)
#define EOB_L3ERRCTR_RECHOD IEB(ENDOFBURST_L3ERRCTR+L3ERRORCOUNTER_RECHOD)
#define EOB_L3ERRCTR_RECNHO IEB(ENDOFBURST_L3ERRCTR+L3ERRORCOUNTER_RECNHO)
#define EOB_L3ERRCTR_RECLKR IEB(ENDOFBURST_L3ERRCTR+L3ERRORCOUNTER_RECLKR)
#define EOB_L3ERRCTR_RECHAC IEB(ENDOFBURST_L3ERRCTR+L3ERRORCOUNTER_RECHAC)
#define EOB_L3ERRCTR_RECMUV IEB(ENDOFBURST_L3ERRCTR+L3ERRORCOUNTER_RECMUV)
#define EOB_L3ERRCTR_RECBTH IEB(ENDOFBURST_L3ERRCTR+L3ERRORCOUNTER_RECBTH)
#define EOB_L3ERRCTR_COMDCH_NODCH     IEB(ENDOFBURST_L3ERRCTR+L3ERRORCOUNTER_COMDCH_NODCH)
#define EOB_L3ERRCTR_COMEP_NODCH      IEB(ENDOFBURST_L3ERRCTR+L3ERRORCOUNTER_COMEP_NODCH)
#define EOB_L3ERRCTR_COMEP_NOLKR      IEB(ENDOFBURST_L3ERRCTR+L3ERRORCOUNTER_COMEP_NOLKR)
#define EOB_L3ERRCTR_COMEP_DOUBLECLUS IEB(ENDOFBURST_L3ERRCTR+L3ERRORCOUNTER_COMEP_DOUBLECLUS)
#define EOB_L3ERRCTR_COMEP_NOCLUS     IEB(ENDOFBURST_L3ERRCTR+L3ERRORCOUNTER_COMEP_NOCLUS)
#define EOB_L3ERRCTR_COMEP_SAMECLUS   IEB(ENDOFBURST_L3ERRCTR+L3ERRORCOUNTER_COMEP_SAMECLUS)
#define EOB_L3ERRCTR_COMMBOX_NODCH    IEB(ENDOFBURST_L3ERRCTR+L3ERRORCOUNTER_COMMBOX_NODCH)
#define EOB_L3ERRCTR_COMNUT_NOLKR     IEB(ENDOFBURST_L3ERRCTR+L3ERRORCOUNTER_COMNUT_NOLKR)
#define EOB_L3ERRCTR_COML3B_NOLKR     IEB(ENDOFBURST_L3ERRCTR+L3ERRORCOUNTER_COML3B_NOLKR)
#define EOB_L3ERRCTR_L3ERRORCOUNTER_SPARE IEB(ENDOFBURST_L3ERRCTR+L3ERRORCOUNTER_SPARE)

#define EOB_AERRDEC_NDECRES           IEB(ENDOFBURST_AERRDEC+ANAERRDEC_NDECRES)
#define EOB_AERRDEC_DECRES_CODE(x)    IEB(ENDOFBURST_AERRDEC+ANAERRDEC_DECRES+((x)-1)*DECRESULT_SIZE+DECRESULT_CODE)
#define EOB_AERRDEC_DECRES_ECHAN(x)   IEB(ENDOFBURST_AERRDEC+ANAERRDEC_DECRES+((x)-1)*DECRESULT_SIZE+DECRESULT_ECHAN)
#define EOB_AERRDEC_DECRES_LOG(x)     IEB(ENDOFBURST_AERRDEC+ANAERRDEC_DECRES+((x)-1)*DECRESULT_SIZE+DECRESULT_LOG)
#define EOB_AERRDEC_DECRES_NERR(x)    IEB(ENDOFBURST_AERRDEC+ANAERRDEC_DECRES+((x)-1)*DECRESULT_SIZE+DECRESULT_NERR)
#define EOB_AERRDEC_DECRES_SATFLAG(x) IEB(ENDOFBURST_AERRDEC+ANAERRDEC_DECRES+((x)-1)*DECRESULT_SIZE+DECRESULT_SATFLAG)
#define EOB_AERRDEC_DECRES_EVTNO(x)   IEB(ENDOFBURST_AERRDEC+ANAERRDEC_DECRES+((x)-1)*DECRESULT_SIZE+DECRESULT_EVTNO)
#define EOB_AERRDEC_DECRES_TS(x)      IEB(ENDOFBURST_AERRDEC+ANAERRDEC_DECRES+((x)-1)*DECRESULT_SIZE+DECRESULT_TS)
#define EOB_AERRDEC_DECRES_X1(x)      IEB(ENDOFBURST_AERRDEC+ANAERRDEC_DECRES+((x)-1)*DECRESULT_SIZE+DECRESULT_X1)
#define EOB_AERRDEC_DECRES_X2(x)      IEB(ENDOFBURST_AERRDEC+ANAERRDEC_DECRES+((x)-1)*DECRESULT_SIZE+DECRESULT_X2)

/**********************************************************************/
/*                     Ke3 Event Macros                               */
/**********************************************************************/
#define KE3EVT_PTR    IKE(1)
/* ke3Event struct */
#define KNEVENT       IKE(KE3EVENT_N)
#define KTIMESTAMP    IKE(KE3EVENT_TIMESTAMP)
#define KECELL(x,y)   QKE(KE3EVENT_ECELL+((x)-1)*7+(y)-1)
#define KFCELL(x,y)   IKE(KE3EVENT_FCELL+((x)-1)*7+(y)-1)
#define KADC(x,y,z)   IKE(KE3EVENT_ADC+((x)-1)*15+((y)-1)*5+(z)-1)

#define KIXELEC       IKE(KE3EVENT_IXELEC)
#define KIYELEC       IKE(KE3EVENT_IYELEC)
#define KXCLUS        QKE(KE3EVENT_XCLUS)
#define KYCLUS        QKE(KE3EVENT_YCLUS)
#define KEELEC        QKE(KE3EVENT_EELEC)
#define KPELEC        QKE(KE3EVENT_PELEC)
#define KXELEC        QKE(KE3EVENT_XELEC)
#define KYELEC        QKE(KE3EVENT_YELEC)
#define KAPXELEC      QKE(KE3EVENT_APXELEC)
#define KAPYELEC      QKE(KE3EVENT_APYELEC)
#define KERAW         QKE(KE3EVENT_ERAW)
#define KCELLSREAD    QKE(KE3EVENT_CELLSREAD)
#define KECORRKE3     QKE(KE3EVENT_ECORRKE3)
#define KE2SAMP7      QKE(KE3EVENT_E2SAMP7)
#define KSPACHACORR   QKE(KE3EVENT_SPACHACORR)
#define KEHAC         QKE(KE3EVENT_EHAC)
#define KDISTHAC      QKE(KE3EVENT_DISTHAC)
#define KNPMUV        IKE(KE3EVENT_NPMUV)
#define KECLUNEAR     QKE(KE3EVENT_ECLUNEAR)
#define KIDCLUNEAR    IKE(KE3EVENT_IDCLUNEAR)
#define KXCLUNEAR     QKE(KE3EVENT_XCLUNEAR)
#define KYCLUNEAR     QKE(KE3EVENT_YCLUNEAR)
#define KPPION        QKE(KE3EVENT_PPION)
#define KXPION        QKE(KE3EVENT_XPION)
#define KYPION        QKE(KE3EVENT_YPION)
#define KZVERTEX      QKE(KE3EVENT_ZVERTEX)
#define KSPNT         IKE(KE3EVENT_SPNT)

#define KSPNT_X(x)    QKE(KE3EVENT_SPNT+((x)-1)*DCHSPACEPOINT_SIZE+DCHSPACEPOINT_X)
#define KSPNT_Y(x)    QKE(KE3EVENT_SPNT+((x)-1)*DCHSPACEPOINT_SIZE+DCHSPACEPOINT_Y)
#define KSPNT_Z(x)    QKE(KE3EVENT_SPNT+((x)-1)*DCHSPACEPOINT_SIZE+DCHSPACEPOINT_Z)


/**********************************************************************/
/*                     Kmu3 Event Macros                              */
/**********************************************************************/
#define KMU3EVT_PTR   IUE(1)
/* kmu3Event struct */
/* NUTkmu3 structs go here */
#define KMU3_NNUT         IUE(KMU3EVENT_NNUT)
/* Standard cmpEvent structure goes here */

/**********************************************************************/
/*                     MC Event Macros                                */
/**********************************************************************/
/* mcPlaneTrak struct */
#define MPART_PLANE_ICODE(x,y,z)  IME(MCEVENT_MCSIM+((x)-1)*MCSIM_SIZE+MCSIM_PART+((y)-1)*MCPARTICLE_SIZE+MCPARTICLE_PLANE+((z)-1)*MCPLANETRAK_SIZE+MCPLANETRAK_ICODE)
#define MPART_PLANE_XYZ(x,y,z,w)  QME(MCEVENT_MCSIM+((x)-1)*MCSIM_SIZE+MCSIM_PART+((y)-1)*MCPARTICLE_SIZE+MCPARTICLE_PLANE+((z)-1)*MCPLANETRAK_SIZE+MCPLANETRAK_XYZ+(w)-1)
#define MPART_PLANE_ACCEPT(x,y,z) IME(MCEVENT_MCSIM+((x)-1)*MCSIM_SIZE+MCSIM_PART+((y)-1)*MCPARTICLE_SIZE+MCPARTICLE_PLANE+((z)-1)*MCPLANETRAK_SIZE+MCPLANETRAK_ACCEPT)
/* BH 17.02.99: these macros were missing previously */
#define MPART_PLANE_ZPLANE(x,y,z) QME(MCEVENT_MCSIM+((x)-1)*MCSIM_SIZE+MCSIM_PART+((y)-1)*MCPARTICLE_SIZE+MCPARTICLE_PLANE+((z)-1)*MCPLANETRAK_SIZE+MCPLANETRAK_ZPLANE)
#define MPART_PLANE_DXDZ(x,y,z) QME(MCEVENT_MCSIM+((x)-1)*MCSIM_SIZE+MCSIM_PART+((y)-1)*MCPARTICLE_SIZE+MCPARTICLE_PLANE+((z)-1)*MCPLANETRAK_SIZE+MCPLANETRAK_DXDZ)
#define MPART_PLANE_DYDZ(x,y,z) QME(MCEVENT_MCSIM+((x)-1)*MCSIM_SIZE+MCSIM_PART+((y)-1)*MCPARTICLE_SIZE+MCPARTICLE_PLANE+((z)-1)*MCPLANETRAK_SIZE+MCPLANETRAK_DYDZ)
#define MPART_PLANE_EDEP(x,y,z) QME(MCEVENT_MCSIM+((x)-1)*MCSIM_SIZE+MCSIM_PART+((y)-1)*MCPARTICLE_SIZE+MCPARTICLE_PLANE+((z)-1)*MCPLANETRAK_SIZE+MCPLANETRAK_EDEP)

/* mcParticle struct */
#define MPART_TYPE(x,y)      IME(MCEVENT_MCSIM+((x)-1)*MCSIM_SIZE+MCSIM_PART+((y)-1)*MCPARTICLE_SIZE+MCPARTICLE_TYPE)
#define MPART_P(x,y,z)       QME(MCEVENT_MCSIM+((x)-1)*MCSIM_SIZE+MCSIM_PART+((y)-1)*MCPARTICLE_SIZE+MCPARTICLE_P+(z)-1)
#define MPART_PVERTEX(x,y,z) QME(MCEVENT_MCSIM+((x)-1)*MCSIM_SIZE+MCSIM_PART+((y)-1)*MCPARTICLE_SIZE+MCPARTICLE_PVERTEX+(z)-1)
#define MPART_DVERTEX(x,y,z) QME(MCEVENT_MCSIM+((x)-1)*MCSIM_SIZE+MCSIM_PART+((y)-1)*MCPARTICLE_SIZE+MCPARTICLE_DVERTEX+(z)-1)
#define MPART_XBMAG(x,y,z)   QME(MCEVENT_MCSIM+((x)-1)*MCSIM_SIZE+MCSIM_PART+((y)-1)*MCPARTICLE_SIZE+MCPARTICLE_XBMAG+(z)-1)
#define MPART_XAMAG(x,y,z)   QME(MCEVENT_MCSIM+((x)-1)*MCSIM_SIZE+MCSIM_PART+((y)-1)*MCPARTICLE_SIZE+MCPARTICLE_XAMAG+(z)-1)
#define MPART_PBMAG(x,y,z)   QME(MCEVENT_MCSIM+((x)-1)*MCSIM_SIZE+MCSIM_PART+((y)-1)*MCPARTICLE_SIZE+MCPARTICLE_PBMAG+(z)-1)
#define MPART_PAMAG(x,y,z)   QME(MCEVENT_MCSIM+((x)-1)*MCSIM_SIZE+MCSIM_PART+((y)-1)*MCPARTICLE_SIZE+MCPARTICLE_PAMAG+(z)-1)
#define MPART_ICODES(x,y)    IME(MCEVENT_MCSIM+((x)-1)*MCSIM_SIZE+MCSIM_PART+((y)-1)*MCPARTICLE_SIZE+MCPARTICLE_ICODES)
#define MPART_NPLANE(x,y)    IME(MCEVENT_MCSIM+((x)-1)*MCSIM_SIZE+MCSIM_PART+((y)-1)*MCPARTICLE_SIZE+MCPARTICLE_NPLANE)
/* struct mcPlaneTrak goes here */

/* mcSIM structure */
#define MSIM_MCTYPE(x)      IME(MCEVENT_MCSIM+((x)-1)*MCSIM_SIZE+MCSIM_MCTYPE)
#define MSIM_MCVERSION(x)   IME(MCEVENT_MCSIM+((x)-1)*MCSIM_SIZE+MCSIM_MCVERSION)
#define MSIM_GEOVERSION(x)  IME(MCEVENT_MCSIM+((x)-1)*MCSIM_SIZE+MCSIM_GEOVERSION)
#define MSIM_SHWVERSION(x)  IME(MCEVENT_MCSIM+((x)-1)*MCSIM_SIZE+MCSIM_SHWVERSION)
#define MSIM_SIMYEAR(x)     IME(MCEVENT_MCSIM+((x)-1)*MCSIM_SIZE+MCSIM_SIMYEAR)
#define MSIM_ACCRATE(x)     QME(MCEVENT_MCSIM+((x)-1)*MCSIM_SIZE+MCSIM_ACCRATE)
#define MSIM_KSKLRATIO(x)   QME(MCEVENT_MCSIM+((x)-1)*MCSIM_SIZE+MCSIM_KSKLRATIO)
#define MSIM_CNRATIO(x)     QME(MCEVENT_MCSIM+((x)-1)*MCSIM_SIZE+MCSIM_CNRATIO)
#define MSIM_RANDSEED(x,y)  IME(MCEVENT_MCSIM+((x)-1)*MCSIM_SIZE+MCSIM_RANDSEED+(y)-1)
#define MSIM_NASIM(x,y)     IME(MCEVENT_MCSIM+((x)-1)*MCSIM_SIZE+MCSIM_NASIM+(y)-1)
#define MSIM_TIME(x)        IME(MCEVENT_MCSIM+((x)-1)*MCSIM_SIZE+MCSIM_TIME)
#define MSIM_MAGNETSIM(x)   IME(MCEVENT_MCSIM+((x)-1)*MCSIM_SIZE+MCSIM_MAGNETSIM)
#define MSIM_OPTIONS(x)     IME(MCEVENT_MCSIM+((x)-1)*MCSIM_SIZE+MCSIM_OPTIONS)
#define MSIM_NPART(x)       IME(MCEVENT_MCSIM+((x)-1)*MCSIM_SIZE+MCSIM_NPART)
/* struct mcParticles goes here */


/* mcEvent struct */
#define MCEVT_PTR    IME(1)
#define MNMCSIM      IME(MCEVENT_NMCSIM)
/* mcSIM structure here */
/* normal COmPACT event here */

/**********************************************************************/
/*                     SuperCompact Event macros                      */
/**********************************************************************/
#define SCMPEVT_PTR    ISE(1)
/* Pi0 macros */
#define SSUMMARY_NEUT_PI0_MASS(x,y,z)    QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_NEUT+NEUTSUMM_PI0+PI0_SIZE*((z)-1)+PI0_MASS)
#define SSUMMARY_NEUT_PI0_ICLUS(w,x,y,z) (ISE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((w)-1)+SUMMARY_NEUT+NEUTSUMM_PI0+PI0_SIZE*((y)-1)+PI0_ICLUS+(z-1))+1)

/* detector status macros */
#define SDETSTATUS_AKL(x) ISE(SUPERCMPEVENT_DETSTATUS+DETSTATUS_AKL)
#define SDETSTATUS_DCH(x) ISE(SUPERCMPEVENT_DETSTATUS+DETSTATUS_DCH)
#define SDETSTATUS_HOD(x) ISE(SUPERCMPEVENT_DETSTATUS+DETSTATUS_HOD)
#define SDETSTATUS_HAC(x) ISE(SUPERCMPEVENT_DETSTATUS+DETSTATUS_HAC)
#define SDETSTATUS_KAB(x) ISE(SUPERCMPEVENT_DETSTATUS+DETSTATUS_KAB)
#define SDETSTATUS_LKR(x) ISE(SUPERCMPEVENT_DETSTATUS+DETSTATUS_LKR)
#define SDETSTATUS_NHO(x) ISE(SUPERCMPEVENT_DETSTATUS+DETSTATUS_NHO)
#define SDETSTATUS_MUV(x) ISE(SUPERCMPEVENT_DETSTATUS+DETSTATUS_MUV)
#define SDETSTATUS_MBX(x) ISE(SUPERCMPEVENT_DETSTATUS+DETSTATUS_MBX)
#define SDETSTATUS_NTR(x) ISE(SUPERCMPEVENT_DETSTATUS+DETSTATUS_NTR)
#define SDETSTATUS_LV3(x) ISE(SUPERCMPEVENT_DETSTATUS+DETSTATUS_LV3)
#define SDETSTATUS_LV3TRIG(x)      ISE(SUPERCMPEVENT_DETSTATUS+DETSTATUS_LV3TRIG)
#define SDETSTATUS_LV3TRIGRARE(x)  ISE(SUPERCMPEVENT_DETSTATUS+DETSTATUS_LV3TRIGRARE)
#define SDETSTATUS_LV3ABTRIG(x)    ISE(SUPERCMPEVENT_DETSTATUS+DETSTATUS_LV3ABTRIG)
#define SDETSTATUS_LV3ATRIGRARE(x) ISE(SUPERCMPEVENT_DETSTATUS+DETSTATUS_LV3ATRIGRARE)
#define SDETSTATUS_LV3BTRIGRARE(x) ISE(SUPERCMPEVENT_DETSTATUS+DETSTATUS_LV3BTRIGRARE)
#define SDETSTATUS_CHTREFF(x,y) ISE(SUPERCMPEVENT_DETSTATUS+DETSTATUS_CHTREFF+((y)-1))

/* random event macros */
#define SRNDM_TYPE       ISE(SUPERCMPEVENT_RNDM+SRNDMSUMMARY_TYPE)
#define SRNDM_TIMESTAMP  ISE(SUPERCMPEVENT_RNDM+SRNDMSUMMARY_TIMESTAMP)
#define SRNDM_BURST      ISE(SUPERCMPEVENT_RNDM+SRNDMSUMMARY_BURST)
#define SRNDM_RUN        ISE(SUPERCMPEVENT_RNDM+SRNDMSUMMARY_RUN)
#define SRNDM_NUSED      ISE(SUPERCMPEVENT_RNDM+SRNDMSUMMARY_NUSED)
#define SRNDM_SPSPHASE   QSE(SUPERCMPEVENT_RNDM+SRNDMSUMMARY_SPSPHASE)
#define SRNDM_MAINPHASE  QSE(SUPERCMPEVENT_RNDM+SRNDMSUMMARY_MAINPHASE)
#define SRNDM_PDSUSED    ISE(SUPERCMPEVENT_RNDM+SRNDMSUMMARY_PDSUSED)
#define SRNDM_TOVRFLW(x) QSE(SUPERCMPEVENT_RNDM+SRNDMSUMMARY_TOVRFLW+((x)-1))
#define SRNDM_KLMONDNDT  QSE(SUPERCMPEVENT_RNDM+SRNDMSUMMARY_KLMONDNDT)
#define SRNDM_KSMONDNDT  QSE(SUPERCMPEVENT_RNDM+SRNDMSUMMARY_KSMONDNDT)
#define SRNDM_QXDNDT     QSE(SUPERCMPEVENT_RNDM+SRNDMSUMMARY_QXDNDT)

/* neutral summary macros */
#define SSUMMARY_NEUT_ESCALE(x,y)      QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_NEUT+NEUTSUMM_ESCALE)
#define SSUMMARY_NEUT_RELLIPSE(x,y)    QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_NEUT+NEUTSUMM_RELLIPSE)
#define SSUMMARY_NEUT_LKRTIME(x,y)     QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_NEUT+NEUTSUMM_LKRTIME)
#define SSUMMARY_NEUT_LKRNHOTIME(x,y)  QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_NEUT+NEUTSUMM_LKRNHOTIME)
#define SSUMMARY_NEUT_NCELLSUSED(x,y)  ISE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_NEUT+NEUTSUMM_NCELLSUSED)
#define SSUMMARY_NEUT_EXTRA(x,y)       QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_NEUT+NEUTSUMM_EXTRA)
#define SSUMMARY_NEUT_DXTRA(x,y)       QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_NEUT+NEUTSUMM_DXTRA)
#define SSUMMARY_NEUT_ERRAVG(x,y)      QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_NEUT+NEUTSUMM_ERRAVG)
#define SSUMMARY_NEUT_ERRDIF(x,y)      QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_NEUT+NEUTSUMM_ERRDIF)
#define SSUMMARY_NEUT_CHI2(x,y)        QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_NEUT+NEUTSUMM_CHI2)
#define SSUMMARY_NEUT_DCHCLUTIME(x,y)  QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_NEUT+NEUTSUMM_DCHCLUTIME)
#define SSUMMARY_NEUT_Z(x,y)           QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_NEUT+NEUTSUMM_Z)
#define SSUMMARY_NEUT_CTAU(x,y)        QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_NEUT+NEUTSUMM_CTAU)
#define SSUMMARY_NEUT_EKAON(x,y)       QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_NEUT+NEUTSUMM_EKAON)
#define SSUMMARY_NEUT_TIME(x,y)        QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_NEUT+NEUTSUMM_TIME)
#define SSUMMARY_NEUT_ERRTIME(x,y)     QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_NEUT+NEUTSUMM_ERRTIME)
#define SSUMMARY_NEUT_ANAFLAG(x,y)     ISE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_NEUT+NEUTSUMM_ANAFLAG+((y)-1))
#define SSUMMARY_NEUT_ANAVAR(x,y)      QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_NEUT+NEUTSUMM_ANAVAR+((y)-1))

/* charged summary macros */
#define SSUMMARY_CHAR_BDXDZPOS(x,y) QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_CHAR+CHARSUMM_BDXDZPOS)
#define SSUMMARY_CHAR_BDYDZPOS(x,y) QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_CHAR+CHARSUMM_BDYDZPOS)
#define SSUMMARY_CHAR_BDXDZNEG(x,y) QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_CHAR+CHARSUMM_BDXDZNEG)
#define SSUMMARY_CHAR_BDYDZNEG(x,y) QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_CHAR+CHARSUMM_BDYDZNEG)
#define SSUMMARY_CHAR_CDA(x,y)      QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_CHAR+CHARSUMM_CDA)
#define SSUMMARY_CHAR_COG(x,y)      QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_CHAR+CHARSUMM_COG)
#define SSUMMARY_CHAR_X(x,y)        QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_CHAR+CHARSUMM_X)
#define SSUMMARY_CHAR_Y(x,y)        QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_CHAR+CHARSUMM_Y)
#define SSUMMARY_CHAR_TVTX(x,y)     QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_CHAR+CHARSUMM_TVTX)
#define SSUMMARY_CHAR_IPTRK(x,y)    (ISE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_CHAR+CHARSUMM_IPTRK)+1)
#define SSUMMARY_CHAR_INTRK(x,y)    (ISE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_CHAR+CHARSUMM_INTRK)+1)
#define SSUMMARY_CHAR_IVTX(x,y)     (ISE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_CHAR+CHARSUMM_IVTX)+1)
#define SSUMMARY_CHAR_PPIPI(x,y)    QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_CHAR+CHARSUMM_PPIPI)
#define SSUMMARY_CHAR_MPIPI(x,y)    QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_CHAR+CHARSUMM_MPIPI)
#define SSUMMARY_CHAR_MLAMBDA(x,y)    QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_CHAR+CHARSUMM_MLAMBDA)
#define SSUMMARY_CHAR_MALAMBDA(x,y)    QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_CHAR+CHARSUMM_MALAMBDA)
#define SSUMMARY_CHAR_PTSQ(x,y)     QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_CHAR+CHARSUMM_PTSQ)
#define SSUMMARY_CHAR_DTINT(x,y)    QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_CHAR+CHARSUMM_DTINT)
#define SSUMMARY_CHAR_DTOUTT(x,y)   QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_CHAR+CHARSUMM_DTOUTT)
#define SSUMMARY_CHAR_DTINV(x,y)    QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_CHAR+CHARSUMM_DTINV)
#define SSUMMARY_CHAR_DTOUTV(x,y)   QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_CHAR+CHARSUMM_DTOUTV)
#define SSUMMARY_CHAR_PTPRIME(x,y)  QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_CHAR+CHARSUMM_PTPRIME)
#define SSUMMARY_CHAR_EANGLE(x,y)   QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_CHAR+CHARSUMM_EANGLE)
#define SSUMMARY_CHAR_PHI(x,y)      QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_CHAR+CHARSUMM_PHI)
#define SSUMMARY_CHAR_ASP(x,y)      QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_CHAR+CHARSUMM_ASP)
#define SSUMMARY_CHAR_DCHCLUTIME(x,y)  QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_CHAR+CHARSUMM_DCHCLUTIME)
#define SSUMMARY_CHAR_CTAU(x,y)     QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_CHAR+CHARSUMM_CTAU)
#define SSUMMARY_CHAR_TIME(x,y)     QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_CHAR+CHARSUMM_TIME)
#define SSUMMARY_CHAR_ERRTIME(x,y)  QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_CHAR+CHARSUMM_ERRTIME)
#define SSUMMARY_CHAR_ANAFLAG(x,y)  ISE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_CHAR+CHARSUMM_ANAFLAG+((y)-1))
#define SSUMMARY_CHAR_ANAVAR(x,y)   QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_CHAR+CHARSUMM_ANAVAR+((y)-1))

/* pi0ee/pi0pi0D summary */
#define SSUMMARY_PI0EE_IFLAG(x,y)   ISE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_PI0EE+PI0EESUMM_IFLAG)
#define SSUMMARY_PI0EE_ICLU1(x,y)   (ISE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_PI0EE+PI0EESUMM_ICLU1)+1)
#define SSUMMARY_PI0EE_ICLU2(x,y)   (ISE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_PI0EE+PI0EESUMM_ICLU2)+1)
#define SSUMMARY_PI0EE_ICLU3(x,y)   (ISE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_PI0EE+PI0EESUMM_ICLU3)+1)
#define SSUMMARY_PI0EE_ICLU4(x,y)   (ISE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_PI0EE+PI0EESUMM_ICLU4)+1)
#define SSUMMARY_PI0EE_ICLU5(x,y)   (ISE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_PI0EE+PI0EESUMM_ICLU5)+1)
#define SSUMMARY_PI0EE_ITRK1(x,y)   (ISE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_PI0EE+PI0EESUMM_ITRK1)+1)
#define SSUMMARY_PI0EE_ITRK2(x,y)   (ISE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_PI0EE+PI0EESUMM_ITRK2)+1)
#define SSUMMARY_PI0EE_IVTX(x,y)    (ISE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_PI0EE+PI0EESUMM_IVTX)+1)


/* muon summary */
#define SSUMMARY_MUON_IVTX(x,y)     (ISE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_MUON+MUONSUMM_IVTX)+1)
#define SSUMMARY_MUON_IPMUON(x,y)   (ISE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_MUON+MUONSUMM_IPMUON)+1)
#define SSUMMARY_MUON_INMUON(x,y)   (ISE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_MUON+MUONSUMM_IPMUON)+1)

/* Four tracks summary */
#define SSUMMARY_FOURTRACKS_IND(x,y,z)  ISE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_FOURT+ FOURTRACKSSUMM_IND + ((z)-1))
#define SSUMMARY_FOURTRACKS_X(x,y)  QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_FOURT+ FOURTRACKSSUMM_X)
#define SSUMMARY_FOURTRACKS_Y(x,y)  QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_FOURT+ FOURTRACKSSUMM_Y)
#define SSUMMARY_FOURTRACKS_Z(x,y)  QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_FOURT+ FOURTRACKSSUMM_Z)
#define SSUMMARY_FOURTRACKS_CHI2(x,y)  QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_FOURT+ FOURTRACKSSUMM_CHI2)


/* HypXi Summary macros */
#define SSUMMARY_HYPXI_IFLAG(x,y)    ISE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_HYPXI+HYPXISUMM_IFLAG)
#define SSUMMARY_HYPXI_IVTX(x,y)      (ISE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_HYPXI+HYPXISUMM_IVTX)+1)
#define SSUMMARY_HYPXI_ITRK1(x,y)     (ISE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_HYPXI+HYPXISUMM_ITRK1)+1)
#define SSUMMARY_HYPXI_ITRK2(x,y)     (ISE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_HYPXI+HYPXISUMM_ITRK2)+1)
#define SSUMMARY_HYPXI_ICLU1(x,y)     (ISE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_HYPXI+HYPXISUMM_ICLU1)+1)
#define SSUMMARY_HYPXI_ICLU2(x,y)     (ISE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_HYPXI+HYPXISUMM_ICLU2)+1)
#define SSUMMARY_HYPXI_ICLU3(x,y)     ISE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_HYPXI+HYPXISUMM_ICLU3)
#define SSUMMARY_HYPXI_ICLU4(x,y)     ISE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_HYPXI+HYPXISUMM_ICLU4)
#define SSUMMARY_HYPXI_MSECHYP(x,y)   QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_HYPXI+HYPXISUMM_MSECHYP)
#define SSUMMARY_HYPXI_VTXX(x,y)      QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_HYPXI+HYPXISUMM_VTXX)
#define SSUMMARY_HYPXI_VTXY(x,y)      QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_HYPXI+HYPXISUMM_VTXY)
#define SSUMMARY_HYPXI_VTXZ(x,y)      QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_HYPXI+HYPXISUMM_VTXZ)
#define SSUMMARY_HYPXI_PX(x,y)	    QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_HYPXI+HYPXISUMM_PX)
#define SSUMMARY_HYPXI_PY(x,y)	    QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_HYPXI+HYPXISUMM_PY)
#define SSUMMARY_HYPXI_PZ(x,y)	    QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_HYPXI+HYPXISUMM_PZ)
#define SSUMMARY_HYPXI_XIVTXX(x,y)    QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_HYPXI+HYPXISUMM_XIVTXX)
#define SSUMMARY_HYPXI_XIVTXY(x,y)    QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_HYPXI+HYPXISUMM_XIVTXY)
#define SSUMMARY_HYPXI_XIVTXZ(x,y)    QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_HYPXI+HYPXISUMM_XIVTXZ)
#define SSUMMARY_HYPXI_MXI(x,y)	    QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_HYPXI+HYPXISUMM_MXI)
#define SSUMMARY_HYPXI_CDA(x,y)	    QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_HYPXI+HYPXISUMM_CDA)

/* summary macros */
#define SSUMMARY_IFLAG(x)    ISE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_IFLAG)
#define SSUMMARY_Z(x)        QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_Z)
#define SSUMMARY_CTAU(x)     QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_CTAU)
#define SSUMMARY_EKAON(x)    QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_EKAON)
#define SSUMMARY_TIME(x)     QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_TIME)
#define SSUMMARY_ERRTIME(x)  QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_ERRTIME)
#define SSUMMARY_AKLTIME(x)  QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_AKLTIME)
#define SSUMMARY_AKLFLAG(x)  ISE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_AKLFLAG)
#define SSUMMARY_AKLTIME67(x)  QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_AKLTIME67)
#define SSUMMARY_AKLFLAG67(x)  ISE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_AKLFLAG67)
#define SSUMMARY_AKSTIME(x)  QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_AKSTIME)
#define SSUMMARY_KSMTIME(x)  QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_KSMTIME)
#define SSUMMARY_HACTIME(x,y)  QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_HACTIME+((y)-1))
#define SSUMMARY_HODTIME(x)  QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_HODTIME)
#define SSUMMARY_NNEUT(x)    ISE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_NNEUT)
#define SSUMMARY_NCHAR(x)    ISE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_NCHAR)
#define SSUMMARY_NDALITZ(x)  ISE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_NDALITZ)
#define SSUMMARY_NMUON(x)    ISE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_NMUON)
#define SSUMMARY_NHYPXI(x)   ISE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_NHYPXI)
#define SSUMMARY_NRARE(x)    ISE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_NRARE)
#define SSUMMARY_NFOURT(x)   ISE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_NFOURT)
#define SSUMMARY_ANAFLAG(x,y)  ISE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_ANAFLAG+((y)-1))
#define SSUMMARY_ANAVAR(x,y)   QSE(SUPERCMPEVENT_SUMMARY+SUMMARY_SIZE*((x)-1)+SUMMARY_ANAVAR+((y)-1))

/* Kabes strack macros */
#define KABSTRAK_P(x)				QSE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_P)
#define KABSTRAK_Q(x)				ISE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_Q)
#define KABSTRAK_UPORDOWN(x)		ISE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_UPORDOWN)
#define KABSTRAK_PERR(x)			QSE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_PERR)
#define KABSTRAK_CHI2(x)			QSE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_CHI2)
#define KABSTRAK_X(x)				QSE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_X)
#define KABSTRAK_Y(x)				QSE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_Y)
#define KABSTRAK_YUORD(x)	QSE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_YUORD)
#define KABSTRAK_TIME(x)			QSE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_TIME)
#define KABSTRAK_TIMEUORD(x)			QSE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_TIMEUORD)
#define KABSTRAK_TIMEST2(x)			QSE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_TIMEST2)
#define KABSTRAK_DXDZ(x)			QSE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_DXDZ)
#define KABSTRAK_DYDZ(x)	QSE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_DYDZ)
#define KABSTRAK_SIGXX(x)       QSE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_SIGXX)
#define KABSTRAK_SIGYY(x)       QSE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_SIGYY)
#define KABSTRAK_SIGTT(x)       QSE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_SIGTT)
#define KABSTRAK_SIGDXDX(x)       QSE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_SIGDXDX)
#define KABSTRAK_SIGDYDY(x)       QSE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_SIGDYDY)
#define KABSTRAK_RECFLAG(x)			ISE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_RECFLAG)
#define KABSTRAK_ANAVAR(x,y)		QSE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_ANAVAR+((y)-1))
#define KABSTRAK_ANAFLAG(x,y)		ISE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_ANAFLAG+((y)-1))

#define SKABTRAK_P(x)				QSE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_P)
#define SKABTRAK_Q(x)				ISE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_Q)
#define SKABTRAK_UPORDOWN(x)		ISE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_UPORDOWN)
#define SKABTRAK_PERR(x)			QSE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_PERR)
#define SKABTRAK_CHI2(x)			QSE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_CHI2)
#define SKABTRAK_X(x)				QSE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_X)
#define SKABTRAK_Y(x)				QSE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_Y)
#define SKABTRAK_YUORD(x)	QSE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_YUORD)
#define SKABTRAK_TIME(x)			QSE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_TIME)
#define SKABTRAK_TIMEUORD(x)			QSE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_TIMEUORD)
#define SKABTRAK_TIMEST2(x)			QSE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_TIMEST2)
#define SKABTRAK_DXDZ(x)			QSE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_DXDZ)
#define SKABTRAK_DYDZ(x)	QSE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_DYDZ)
#define SKABTRAK_SIGXX(x)       QSE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_SIGXX)
#define SKABTRAK_SIGYY(x)       QSE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_SIGYY)
#define SKABTRAK_SIGTT(x)       QSE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_SIGTT)
#define SKABTRAK_SIGDXDX(x)       QSE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_SIGDXDX)
#define SKABTRAK_SIGDYDY(x)       QSE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_SIGDYDY)
#define SKABTRAK_RECFLAG(x)			ISE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_RECFLAG)
#define SKABTRAK_ANAVAR(x,y)		QSE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_ANAVAR+((y)-1))
#define SKABTRAK_ANAFLAG(x,y)		ISE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_ANAFLAG+((y)-1))
/* track macros */
#define STRACK_P(x)         QSE(SUPERCMPEVENT_TRACK+TRAK_SIZE*((x)-1)+TRAK_P)
#define STRACK_Q(x)         ISE(SUPERCMPEVENT_TRACK+TRAK_SIZE*((x)-1)+TRAK_Q)
#define STRACK_QUALITY(x)   QSE(SUPERCMPEVENT_TRACK+TRAK_SIZE*((x)-1)+TRAK_QUALITY)
#define STRACK_CHI2(x)      QSE(SUPERCMPEVENT_TRACK+TRAK_SIZE*((x)-1)+TRAK_CHI2)
#define STRACK_BX(x)        QSE(SUPERCMPEVENT_TRACK+TRAK_SIZE*((x)-1)+TRAK_BX)
#define STRACK_BY(x)        QSE(SUPERCMPEVENT_TRACK+TRAK_SIZE*((x)-1)+TRAK_BY)
#define STRACK_BDXDZ(x)     QSE(SUPERCMPEVENT_TRACK+TRAK_SIZE*((x)-1)+TRAK_BDXDZ)
#define STRACK_BDYDZ(x)     QSE(SUPERCMPEVENT_TRACK+TRAK_SIZE*((x)-1)+TRAK_BDYDZ)
#define STRACK_PHI(x)       QSE(SUPERCMPEVENT_TRACK+TRAK_SIZE*((x)-1)+TRAK_PHI)
#define STRACK_X(x)         QSE(SUPERCMPEVENT_TRACK+TRAK_SIZE*((x)-1)+TRAK_X)
#define STRACK_Y(x)         QSE(SUPERCMPEVENT_TRACK+TRAK_SIZE*((x)-1)+TRAK_Y)
#define STRACK_DXDZ(x)      QSE(SUPERCMPEVENT_TRACK+TRAK_SIZE*((x)-1)+TRAK_DXDZ)
#define STRACK_DYDZ(x)      QSE(SUPERCMPEVENT_TRACK+TRAK_SIZE*((x)-1)+TRAK_DYDZ)
#define STRACK_TIME(x)      QSE(SUPERCMPEVENT_TRACK+TRAK_SIZE*((x)-1)+TRAK_TIME)
#define STRACK_HODTIME(x)   QSE(SUPERCMPEVENT_TRACK+TRAK_SIZE*((x)-1)+TRAK_HODTIME)
#define STRACK_MUVTIME(x)   QSE(SUPERCMPEVENT_TRACK+TRAK_SIZE*((x)-1)+TRAK_MUVTIME)
#define STRACK_ELKR(x)      QSE(SUPERCMPEVENT_TRACK+TRAK_SIZE*((x)-1)+TRAK_ELKR)
#define STRACK_DDEADCELL(x) QSE(SUPERCMPEVENT_TRACK+TRAK_SIZE*((x)-1)+TRAK_DDEADCELL)
#define STRACK_ESPY(x)      QSE(SUPERCMPEVENT_TRACK+TRAK_SIZE*((x)-1)+TRAK_ESPY)
#define STRACK_EHAC(x)      QSE(SUPERCMPEVENT_TRACK+TRAK_SIZE*((x)-1)+TRAK_EHAC)
#define STRACK_HACBF(x)     QSE(SUPERCMPEVENT_TRACK+TRAK_SIZE*((x)-1)+TRAK_HACBF)
#define STRACK_EOVP(x)      QSE(SUPERCMPEVENT_TRACK+TRAK_SIZE*((x)-1)+TRAK_EOVP)
#define STRACK_ICLUS(x)     ISE(SUPERCMPEVENT_TRACK+TRAK_SIZE*((x)-1)+TRAK_ICLUS)
#define STRACK_HODSTATUS(x)	ISE(SUPERCMPEVENT_TRACK+TRAK_SIZE*((x)-1)+TRAK_HODSTATUS)
#define STRACK_HITPATTERN(x)   ISE(SUPERCMPEVENT_TRACK+TRAK_SIZE*((x)-1)+TRAK_HITPATTERN)
#define STRACK_EFFICIENCY(x,y)   ISE(SUPERCMPEVENT_TRACK+TRAK_SIZE*((x)-1)+TRAK_EFFICIENCY+(y)-1)
#define STRACK_PERR(x)       QSE(SUPERCMPEVENT_TRACK+TRAK_SIZE*((x)-1)+TRAK_PERR)
#define STRACK_SIGXX(x)      QSE(SUPERCMPEVENT_TRACK+TRAK_SIZE*((x)-1)+TRAK_SIGXX)
#define STRACK_SIGYY(x)      QSE(SUPERCMPEVENT_TRACK+TRAK_SIZE*((x)-1)+TRAK_SIGYY)
#define STRACK_SIGDXDX(x)      QSE(SUPERCMPEVENT_TRACK+TRAK_SIZE*((x)-1)+TRAK_SIGDXDX)
#define STRACK_SIGDYDY(x)      QSE(SUPERCMPEVENT_TRACK+TRAK_SIZE*((x)-1)+TRAK_SIGDYDY)
#define STRACK_SIGDXDY(x)      QSE(SUPERCMPEVENT_TRACK+TRAK_SIZE*((x)-1)+TRAK_SIGDXDY)
#define STRACK_SIGXDX(x)      QSE(SUPERCMPEVENT_TRACK+TRAK_SIZE*((x)-1)+TRAK_SIGXDX)
#define STRACK_SIGXY(x)      QSE(SUPERCMPEVENT_TRACK+TRAK_SIZE*((x)-1)+TRAK_SIGXY)
#define STRACK_SIGDXY(x)      QSE(SUPERCMPEVENT_TRACK+TRAK_SIZE*((x)-1)+TRAK_SIGDXY)
#define STRACK_SIGXDY(x)      QSE(SUPERCMPEVENT_TRACK+TRAK_SIZE*((x)-1)+TRAK_SIGXDY)
#define STRACK_SIGYDY(x)      QSE(SUPERCMPEVENT_TRACK+TRAK_SIZE*((x)-1)+TRAK_SIGYDY)
#define STRACK_AKLFLAG(x)     ISE(SUPERCMPEVENT_TRACK+TRAK_SIZE*((x)-1)+TRAK_AKLFLAG)
#define STRACK_AKLTIME(x)     QSE(SUPERCMPEVENT_TRACK+TRAK_SIZE*((x)-1)+TRAK_AKLTIME)
#define STRACK_AKLTIME67(x)     QSE(SUPERCMPEVENT_TRACK+TRAK_SIZE*((x)-1)+TRAK_AKLTIME67)
#define STRACK_IMUON(x)      ISE(SUPERCMPEVENT_TRACK+TRAK_SIZE*((x)-1)+TRAK_IMUON)
#define STRACK_IHAC(x)      ISE(SUPERCMPEVENT_TRACK+TRAK_SIZE*((x)-1)+TRAK_IHAC)
#define STRACK_EFFICIENCY(x,y)   ISE(SUPERCMPEVENT_TRACK+TRAK_SIZE*((x)-1)+TRAK_EFFICIENCY+(y)-1)
#define STRACK_SPARE(x,y)   QSE(SUPERCMPEVENT_TRACK+TRAK_SIZE*((x)-1)+TRAK_SPARE+(y)-1)

/* proton macros */
#define SPROTON_TIME(x)         QSE(SUPERCMPEVENT_PROTON+PROTON_SIZE*((x)-1)+PROTON_TIME)

/* cluster macros */
#define SCLUSTER_ENERGY(x)      QSE(SUPERCMPEVENT_CLUSTER+CLUSTER_SIZE*((x)-1)+CLUSTER_ENERGY)
#define SCLUSTER_E2SAMPALL(x)   QSE(SUPERCMPEVENT_CLUSTER+CLUSTER_SIZE*((x)-1)+CLUSTER_E2SAMPALL)
#define SCLUSTER_X(x)           QSE(SUPERCMPEVENT_CLUSTER+CLUSTER_SIZE*((x)-1)+CLUSTER_X)
#define SCLUSTER_Y(x)           QSE(SUPERCMPEVENT_CLUSTER+CLUSTER_SIZE*((x)-1)+CLUSTER_Y)
#define SCLUSTER_IMAX(x)        ISE(SUPERCMPEVENT_CLUSTER+CLUSTER_SIZE*((x)-1)+CLUSTER_IMAX)
#define SCLUSTER_TIME(x)        QSE(SUPERCMPEVENT_CLUSTER+CLUSTER_SIZE*((x)-1)+CLUSTER_TIME)
#define SCLUSTER_HACTIME(x)     QSE(SUPERCMPEVENT_CLUSTER+CLUSTER_SIZE*((x)-1)+CLUSTER_HACTIME)
#define SCLUSTER_HODTIME(x)     QSE(SUPERCMPEVENT_CLUSTER+CLUSTER_SIZE*((x)-1)+CLUSTER_HODTIME)
#define SCLUSTER_AKLTIME(x)     QSE(SUPERCMPEVENT_CLUSTER+CLUSTER_SIZE*((x)-1)+CLUSTER_AKLTIME)
#define SCLUSTER_AKLTIME67(x)   QSE(SUPERCMPEVENT_CLUSTER+CLUSTER_SIZE*((x)-1)+CLUSTER_AKLTIME67)
#define SCLUSTER_AKLFLAG(x)     ISE(SUPERCMPEVENT_CLUSTER+CLUSTER_SIZE*((x)-1)+CLUSTER_AKLFLAG)
#define SCLUSTER_TLATCELL(x)    QSE(SUPERCMPEVENT_CLUSTER+CLUSTER_SIZE*((x)-1)+CLUSTER_TLATCELL)
#define SCLUSTER_DDEADCELL(x)   QSE(SUPERCMPEVENT_CLUSTER+CLUSTER_SIZE*((x)-1)+CLUSTER_DDEADCELL)
#define SCLUSTER_STATUS(x)      ISE(SUPERCMPEVENT_CLUSTER+CLUSTER_SIZE*((x)-1)+CLUSTER_STATUS)
#define SCLUSTER_NHOTIME(x)     QSE(SUPERCMPEVENT_CLUSTER+CLUSTER_SIZE*((x)-1)+CLUSTER_NHOTIME)
#define SCLUSTER_ITRACK(x)      (ISE(SUPERCMPEVENT_CLUSTER+CLUSTER_SIZE*((x)-1)+CLUSTER_ITRACK))
#define SCLUSTER_PARFLAG(x)     ISE(SUPERCMPEVENT_CLUSTER+CLUSTER_SIZE*((x)-1)+CLUSTER_PARFLAG)
#define SCLUSTER_ECELLMAX(x)    QSE(SUPERCMPEVENT_CLUSTER+CLUSTER_SIZE*((x)-1)+CLUSTER_ECELLMAX)
#define SCLUSTER_RMSX(x)        QSE(SUPERCMPEVENT_CLUSTER+CLUSTER_SIZE*((x)-1)+CLUSTER_RMSX)
#define SCLUSTER_RMSY(x)        QSE(SUPERCMPEVENT_CLUSTER+CLUSTER_SIZE*((x)-1)+CLUSTER_RMSY)
#define SCLUSTER_MCTAILCORR(x)  QSE(SUPERCMPEVENT_CLUSTER+CLUSTER_SIZE*((x)-1)+CLUSTER_MCTAILCORR)
#define SCLUSTER_SPARE(x,y)     QSE(SUPERCMPEVENT_CLUSTER+CLUSTER_SIZE*((x)-1)+CLUSTER_SPARE+(y)-1)

/*SCvertex structure */
#define SVTX_NVTXTRACK(x)    ISE(SUPERCMPEVENT_VTX+((x)-1)*SCVERTEX_SIZE+SCVERTEX_NVTXTRACK)
#define SVTX_VTXTRACK(x)    ISE(SUPERCMPEVENT_VTX+((x)-1)*SCVERTEX_SIZE+SCVERTEX_VTXTRACK)
#define SVTX_CHARGE(x)       ISE(SUPERCMPEVENT_VTX+((x)-1)*SCVERTEX_SIZE+SCVERTEX_CHARGE)
#define SVTX_BDXDZNEG(x)     QSE(SUPERCMPEVENT_VTX+((x)-1)*SCVERTEX_SIZE+SCVERTEX_BDXDZNEG)
#define SVTX_BDYDZNEG(x)     QSE(SUPERCMPEVENT_VTX+((x)-1)*SCVERTEX_SIZE+SCVERTEX_BDYDZNEG)
#define SVTX_BDXDZPOS(x)     QSE(SUPERCMPEVENT_VTX+((x)-1)*SCVERTEX_SIZE+SCVERTEX_BDXDZPOS)
#define SVTX_BDYDZPOS(x)     QSE(SUPERCMPEVENT_VTX+((x)-1)*SCVERTEX_SIZE+SCVERTEX_BDYDZPOS)
#define SVTX_CDA(x)          QSE(SUPERCMPEVENT_VTX+((x)-1)*SCVERTEX_SIZE+SCVERTEX_CDA)
#define SVTX_COG(x)          QSE(SUPERCMPEVENT_VTX+((x)-1)*SCVERTEX_SIZE+SCVERTEX_COG)
#define SVTX_CHI2(x)         QSE(SUPERCMPEVENT_VTX+((x)-1)*SCVERTEX_SIZE+SCVERTEX_CHI2)
#define SVTX_X(x)            QSE(SUPERCMPEVENT_VTX+((x)-1)*SCVERTEX_SIZE+SCVERTEX_X)
#define SVTX_Y(x)            QSE(SUPERCMPEVENT_VTX+((x)-1)*SCVERTEX_SIZE+SCVERTEX_Y)
#define SVTX_Z(x)            QSE(SUPERCMPEVENT_VTX+((x)-1)*SCVERTEX_SIZE+SCVERTEX_Z)
#define SVTX_TVTX(x)         QSE(SUPERCMPEVENT_VTX+((x)-1)*SCVERTEX_SIZE+SCVERTEX_TVTX)
#define SVTX_TVTXHODO(x)     QSE(SUPERCMPEVENT_VTX+((x)-1)*SCVERTEX_SIZE+SCVERTEX_TVTXHODO)
#define SVTX_HACTIME(x)      QSE(SUPERCMPEVENT_VTX+((x)-1)*SCVERTEX_SIZE+SCVERTEX_HACTIME)
#define SVTX_AKLTIME(x)      QSE(SUPERCMPEVENT_VTX+((x)-1)*SCVERTEX_SIZE+SCVERTEX_AKLTIME)
#define SVTX_AKLTIME67(x)    QSE(SUPERCMPEVENT_VTX+((x)-1)*SCVERTEX_SIZE+SCVERTEX_AKLTIME67)
#define SVTX_AKLFLAG(x)      ISE(SUPERCMPEVENT_VTX+((x)-1)*SCVERTEX_SIZE+SCVERTEX_AKLFLAG)
#define SVTX_IPTRK(x)        (ISE(SUPERCMPEVENT_VTX+SCVERTEX_SIZE*((x)-1)+SCVERTEX_IPTRK)+1)
#define SVTX_INTRK(x)        (ISE(SUPERCMPEVENT_VTX+SCVERTEX_SIZE*((x)-1)+SCVERTEX_INTRK)+1)
#define SVTX_ANAFLAG(x)      ISE(SUPERCMPEVENT_VTX+SCVERTEX_SIZE*((x)-1)+SCVERTEX_ANAFLAG
#define SVTX_ANAVAR(x)       QSE(SUPERCMPEVENT_VTX+SCVERTEX_SIZE*((x)-1)+SCVERTEX_ANAVAR

/* SCvtxtracks */
#define SVTX_VTXTRACKS_ITRACK(x,y) ISE(SUPERCMPEVENT_VTX+((x)-1)*SCVERTEX_SIZE+SCVERTEX_VTXTRACK+((y)-1)*VTXTRACKS_SIZE+VTXTRACKS_ITRACK)
#define SVTX_VTXTRACKS_BDXDZ(x,y) QSE(SUPERCMPEVENT_VTX+((x)-1)*SCVERTEX_SIZE+SCVERTEX_VTXTRACK+((y)-1)*VTXTRACKS_SIZE+VTXTRACKS_BDXDZ)
#define SVTX_VTXTRACKS_BDYDZ(x,y) QSE(SUPERCMPEVENT_VTX+((x)-1)*SCVERTEX_SIZE+SCVERTEX_VTXTRACK+((y)-1)*VTXTRACKS_SIZE+VTXTRACKS_BDYDZ)
/*SCFourVertex structure */
#define SFOURVTX_ITRK1(x)        (ISE(SUPERCMPEVENT_FOURVTX+FOURVERTEX_SIZE*((x)-1)+FOURVERTEX_ITRK1)+1)
#define SFOURVTX_ITRK2(x)        (ISE(SUPERCMPEVENT_FOURVTX+FOURVERTEX_SIZE*((x)-1)+FOURVERTEX_ITRK2)+1)
#define SFOURVTX_ITRK3(x)        (ISE(SUPERCMPEVENT_FOURVTX+FOURVERTEX_SIZE*((x)-1)+FOURVERTEX_ITRK3)+1)
#define SFOURVTX_ITRK4(x)        (ISE(SUPERCMPEVENT_FOURVTX+FOURVERTEX_SIZE*((x)-1)+FOURVERTEX_ITRK4)+1)
#define SFOURVTX_X(x)            QSE(SUPERCMPEVENT_FOURVTX+((x)-1)*FOURVERTEX_SIZE+FOURVERTEX_X)
#define SFOURVTX_Y(x)            QSE(SUPERCMPEVENT_FOURVTX+((x)-1)*FOURVERTEX_SIZE+FOURVERTEX_Y)
#define SFOURVTX_Z(x)            QSE(SUPERCMPEVENT_FOURVTX+((x)-1)*FOURVERTEX_SIZE+FOURVERTEX_Z)
#define SFOURVTX_CHI2(x)         QSE(SUPERCMPEVENT_FOURVTX+((x)-1)*FOURVERTEX_SIZE+FOURVERTEX_CHI2)
#define SFOURVTX_DXDZTRK1(x)     QSE(SUPERCMPEVENT_FOURVTX+((x)-1)*FOURVERTEX_SIZE+FOURVERTEX_DXDZTRK1)
#define SFOURVTX_DYDZTRK1(x)     QSE(SUPERCMPEVENT_FOURVTX+((x)-1)*FOURVERTEX_SIZE+FOURVERTEX_DYDZTRK1)
#define SFOURVTX_DXDZTRK2(x)     QSE(SUPERCMPEVENT_FOURVTX+((x)-1)*FOURVERTEX_SIZE+FOURVERTEX_DXDZTRK2)
#define SFOURVTX_DYDZTRK2(x)     QSE(SUPERCMPEVENT_FOURVTX+((x)-1)*FOURVERTEX_SIZE+FOURVERTEX_DYDZTRK2)
#define SFOURVTX_DXDZTRK3(x)     QSE(SUPERCMPEVENT_FOURVTX+((x)-1)*FOURVERTEX_SIZE+FOURVERTEX_DXDZTRK3)
#define SFOURVTX_DYDZTRK3(x)     QSE(SUPERCMPEVENT_FOURVTX+((x)-1)*FOURVERTEX_SIZE+FOURVERTEX_DYDZTRK3)
#define SFOURVTX_DXDZTRK4(x)     QSE(SUPERCMPEVENT_FOURVTX+((x)-1)*FOURVERTEX_SIZE+FOURVERTEX_DXDZTRK4)
#define SFOURVTX_DYDZTRK4(x)     QSE(SUPERCMPEVENT_FOURVTX+((x)-1)*FOURVERTEX_SIZE+FOURVERTEX_DYDZTRK4)
#define SFOURVTX_SPARE(x,y)      QSE(SUPERCMPEVENT_FOURVTX+FOURVERTEX_SIZE*((x)-1)+FOURVERTEX_SPARE+(y)-1)
#define SFOURVTX_ISPARE(x,y)     ISE(SUPERCMPEVENT_FOURVTX+FOURVERTEX_SIZE*((x)-1)+FOURVERTEX_ISPARE+(y)-1)

/* muon structure */
#define SMUON_X(x)              QSE(SUPERCMPEVENT_MUON+((x)-1)*MUON_SIZE+MUON_X)
#define SMUON_Y(x)              QSE(SUPERCMPEVENT_MUON+((x)-1)*MUON_SIZE+MUON_Y)
#define SMUON_TIME(x)           QSE(SUPERCMPEVENT_MUON+((x)-1)*MUON_SIZE+MUON_TIME)
#define SMUON_STATUS(x)         ISE(SUPERCMPEVENT_MUON+MUON_SIZE*((x)-1)+MUON_STATUS)
#define SMUON_PLANE(x)          ISE(SUPERCMPEVENT_MUON+MUON_SIZE*((x)-1)+MUON_PLANE)
#define SMUON_ITRK(x)           ISE(SUPERCMPEVENT_MUON+MUON_SIZE*((x)-1)+MUON_ITRK)+1

/* pmuon structure */
#define SPMUON_TIME(x)		QSE(SUPERCMPEVENT_PMUON+((x)-1)*PMUON_SIZE+PMUON_TIME)
#define SPMUON_CHANNEL(x)	ISE(SUPERCMPEVENT_PMUON+((x)-1)*PMUON_SIZE+PMUON_CHANNEL)

/* hac structure */
#define SHACCLUS_ENERGY(x)   QSE(SUPERCMPEVENT_HACCLUS+((x)-1)*HACCLUS_SIZE+HACCLUS_ENERGY)
#define SHACCLUS_X(x)        QSE(SUPERCMPEVENT_HACCLUS+((x)-1)*HACCLUS_SIZE+HACCLUS_X)
#define SHACCLUS_Y(x)        QSE(SUPERCMPEVENT_HACCLUS+((x)-1)*HACCLUS_SIZE+HACCLUS_Y)
#define SHACCLUS_TIME(x)     QSE(SUPERCMPEVENT_HACCLUS+((x)-1)*HACCLUS_SIZE+HACCLUS_TIME)
#define SHACCLUS_BFRATIO(x)  QSE(SUPERCMPEVENT_HACCLUS+((x)-1)*HACCLUS_SIZE+HACCLUS_BFRATIO)

/* overflow macros */
#define SCHAMBER_OVRFLW_IPLANE(x,y) ISE(SUPERCMPEVENT_CHAMBER+CHAMBER_SIZE*((x)-1)+CHAMBER_OVRFLW+OVRFLW_SIZE*((y)-1)+OVRFLW_IPLANE)
#define SCHAMBER_OVRFLW_TIME(x,y)   QSE(SUPERCMPEVENT_CHAMBER+CHAMBER_SIZE*((x)-1)+CHAMBER_OVRFLW+OVRFLW_SIZE*((y)-1)+OVRFLW_TIME)

/* accidental macros */
#define SCHAMBER_ACCID_X(x,y)    QSE(SUPERCMPEVENT_CHAMBER+CHAMBER_SIZE*((x)-1)+CHAMBER_ACCID+ACCID_SIZE*((y)-1)+ACCID_X)
#define SCHAMBER_ACCID_Y(x,y)    QSE(SUPERCMPEVENT_CHAMBER+CHAMBER_SIZE*((x)-1)+CHAMBER_ACCID+ACCID_SIZE*((y)-1)+ACCID_Y)
#define SCHAMBER_ACCID_TIME(x,y) QSE(SUPERCMPEVENT_CHAMBER+CHAMBER_SIZE*((x)-1)+CHAMBER_ACCID+ACCID_SIZE*((y)-1)+ACCID_TIME)

/* chamber macros */
#define SCHAMBER_NOVRFLW(x) ISE(SUPERCMPEVENT_CHAMBER+CHAMBER_SIZE*((x)-1)+CHAMBER_NOVRFLW)
#define SCHAMBER_NACCID(x)  ISE(SUPERCMPEVENT_CHAMBER+CHAMBER_SIZE*((x)-1)+CHAMBER_NACCID)

/* Pu data */
#define SPU_CHAN(x,y)       ISE(SUPERCMPEVENT_PU+((x)-1)*PUTSLICE_SIZE+(y)-1)

/* Mannelli counter data */
#define MCH_COUNTER(x)  ISE(SUPERCMPEVENT_MCH+((x)-1)*MACHIT_SIZE+MACHIT_COUNTER)
#define MCH_PHEIGHT(x)  QSE(SUPERCMPEVENT_MCH+((x)-1)*MACHIT_SIZE+MACHIT_PHEIGHT)
#define MCH_TIME(x)     QSE(SUPERCMPEVENT_MCH+((x)-1)*MACHIT_SIZE+MACHIT_TIME)
#define MCH_PDSFLAG(x)  ISE(SUPERCMPEVENT_MCH+((x)-1)*MACHIT_SIZE+MACHIT_PDSFLAG)


/**********************************************************************/
/*                     Neutral analysis structure                     */
/**********************************************************************/
#define SANEUT_ESC          QSE(SUPERCMPEVENT_ANEUT+ANANEUT_ESC)
#define SANEUT_IFLAG        ISE(SUPERCMPEVENT_ANEUT+ANANEUT_IFLAG)
#define SANEUT_CEM(x)       QSE(SUPERCMPEVENT_ANEUT+ANANEUT_CEM+((x)-1))
#define SANEUT_INC(x)       ISE(SUPERCMPEVENT_ANEUT+ANANEUT_INC+((x)-1))
#define SANEUT_RELLI        QSE(SUPERCMPEVENT_ANEUT+ANANEUT_RELLI)
#define SANEUT_CTAU         QSE(SUPERCMPEVENT_ANEUT+ANANEUT_CTAU)
#define SANEUT_EKAON        QSE(SUPERCMPEVENT_ANEUT+ANANEUT_EKAON)
#define SANEUT_LKRTIME      QSE(SUPERCMPEVENT_ANEUT+ANANEUT_LKRTIME)
#define SANEUT_LKRNHODTIME  QSE(SUPERCMPEVENT_ANEUT+ANANEUT_LKRNHODTIME)
#define SANEUT_NTUSED       ISE(SUPERCMPEVENT_ANEUT+ANANEUT_NTUSED)
#define SANEUT_NHODTIME     QSE(SUPERCMPEVENT_ANEUT+ANANEUT_NHODTIME)
#define SANEUT_CUTS         ISE(SUPERCMPEVENT_ANEUT+ANANEUT_CUTS)

/**********************************************************************/
/*                     Charged analysis structure                     */
/**********************************************************************/
#define SACHARG_KTYPE    ISE(SUPERCMPEVENT_ACHARG+ANACHARG_KTYPE)
#define SACHARG_IFLAG    ISE(SUPERCMPEVENT_ACHARG+ANACHARG_IFLAG)
#define SACHARG_IVERTEX  ISE(SUPERCMPEVENT_ACHARG+ANACHARG_IVERTEX)
#define SACHARG_CUTS     ISE(SUPERCMPEVENT_ACHARG+ANACHARG_CUTS)

/**********************************************************************/
/*                     DCH MBX multiplicity                           */
/**********************************************************************/
#define SCDCHEFFMULT_MBXPLANEEFF(x)    ISE(SUPERCMPEVENT_SCDCHEFFMULT+SCDCHMULT_MBXPLANEEFF+((x)-1))
#define SCDCHEFFMULT_L1TRK24EFF(x)     ISE(SUPERCMPEVENT_SCDCHEFFMULT+SCDCHMULT_L1TRK24EFF+((x)-1))
#define SCDCHEFFMULT_DCHSNOWERR(x)     ISE(SUPERCMPEVENT_SCDCHEFFMULT+SCDCHMULT_DCHSNOWERR+((x)-1))
#define SCDCHEFFMULT_MBXMULT           ISE(SUPERCMPEVENT_SCDCHEFFMULT+SCDCHMULT_MBXMULT)
#define SCDCHEFFMULT_TRK24ON           ISE(SUPERCMPEVENT_SCDCHEFFMULT+SCDCHMULT_TRK24ON)

/* event macros */
#define SEVT_SCLEVEL     ISE(SUPERCMPEVENT_SCLEVEL)
#define SEVT_DECSTATUS   ISE(SUPERCMPEVENT_DECSTATUS)
#define SEVT_RECSTATUS   ISE(SUPERCMPEVENT_RECSTATUS)
#define SEVT_CMPSTATUS   ISE(SUPERCMPEVENT_CMPSTATUS)
#define SEVT_FLAGCORR    ISE(SUPERCMPEVENT_FLAGCORR)
#define SEVT_CMPFILTER   ISE(SUPERCMPEVENT_CMPFILTER)
#define SEVT_NEVT        ISE(SUPERCMPEVENT_NEVT)
#define SEVT_TRIGWORD    ISE(SUPERCMPEVENT_TRIGWORD)
#define SEVT_TIMESTAMP   ISE(SUPERCMPEVENT_TIMESTAMP)
#define SEVT_NTRIGBEF    ISE(SUPERCMPEVENT_NTRIGBEF)
#define SEVT_TIMETOPREV  ISE(SUPERCMPEVENT_TIMETOPREV)
#define SEVT_AKLTIME     QSE(SUPERCMPEVENT_AKLTIME)
#define SEVT_AKLFLAG     ISE(SUPERCMPEVENT_AKLFLAG)
#define SEVT_AKLTIME67   QSE(SUPERCMPEVENT_AKLTIME67)
#define SEVT_AKLFLAG67   ISE(SUPERCMPEVENT_AKLFLAG67)
#define SEVT_SPSPHASE    QSE(SUPERCMPEVENT_SPSPHASE)
#define SEVT_MAINSPHASE  QSE(SUPERCMPEVENT_MAINSPHASE)
#define SEVT_SPSPHASERAW    ISE(SUPERCMPEVENT_SPSPHASERAW)
#define SEVT_MAINSPHASERAW  ISE(SUPERCMPEVENT_MAINSPHASERAW)
#define SEVT_NMCH         ISE(SUPERCMPEVENT_NMCH)
#define SEVT_LKRDOWNSCALED ISE(SUPERCMPEVENT_LKRDOWNSCALED)
#define SEVT_LKRENERGY   QSE(SUPERCMPEVENT_LKRENERGY)
#define SEVT_HACENERGY   QSE(SUPERCMPEVENT_HACENERGY)
#define SEVT_NKABSTRAK   ISE(SUPERCMPEVENT_NKABSTRAK)
#define SEVT_MUVREJECT   ISE(SUPERCMPEVENT_MUVREJECT)
#define SEVT_ISUMMARY    (ISE(SUPERCMPEVENT_ISUMMARY)+1)
#define SEVT_NSUMMARY    ISE(SUPERCMPEVENT_NSUMMARY)
#define SEVT_NPROTON     ISE(SUPERCMPEVENT_NPROTON)
#define SEVT_NPROTLADDER ISE(SUPERCMPEVENT_NPROTLADDER)
#define SEVT_DCHBZ       QSE(SUPERCMPEVENT_DCHBZ)
#define SEVT_DCHZ        QSE(SUPERCMPEVENT_DCHZ)
#define SEVT_NTRACK      ISE(SUPERCMPEVENT_NTRACK)
#define SEVT_NMAC	 ISE(SUPERCMPEVENT_NMAC)
#define SEVT_NVTX	 ISE(SUPERCMPEVENT_NVTX)
#define SEVT_NFOURVTX    ISE(SUPERCMPEVENT_NFOURVTX)
#define SEVT_NMUON       ISE(SUPERCMPEVENT_NMUON)
#define SEVT_NPMUON      ISE(SUPERCMPEVENT_NPMUON)
#define SEVT_NCLUSTER    ISE(SUPERCMPEVENT_NCLUSTER)
#define SEVT_NHACCLUS	 ISE(SUPERCMPEVENT_NHACCLUS)
#define SEVT_NCHAMBER    ISE(SUPERCMPEVENT_NCHAMBER)
#define SEVT_KLMONDNDT   QSE(SUPERCMPEVENT_KLMONDNDT)
#define SEVT_KSMONDNDT   QSE(SUPERCMPEVENT_KSMONDNDT)
#define SEVT_QXDNDT      QSE(SUPERCMPEVENT_QXDNDT)
#define SEVT_BEAMINTKS(x) ISE(SUPERCMPEVENT_BEAMINTKS+(x)-1)
#define SEVT_BEAMINTKL(x) ISE(SUPERCMPEVENT_BEAMINTKL+(x)-1)
#define SEVT_NOVRFLWSIM  ISE(SUPERCMPEVENT_NOVRFLWSIM)
#define SEVT_OVRFLWSIMBEF  ISE(SUPERCMPEVENT_OVRFLWSIMBEF)
#define SEVT_OVRFLWSIMAFT  ISE(SUPERCMPEVENT_OVRFLWSIMAFT)
#define SEVT_SPAREINT(x)   ISE(SUPERCMPEVENT_SPAREINT+(x)-1)
#define SEVT_SPAREFLOAT(x) QSE(SUPERCMPEVENT_SPAREFLOAT+(x)-1)
#define SEVT_TSPREV      ISE(SUPERCMPEVENT_TSPREV)
#define SEVT_TSNEXT      ISE(SUPERCMPEVENT_TSNEXT)
#define SEVT_TWPREV      ISE(SUPERCMPEVENT_TWPREV)
#define SEVT_TWNEXT      ISE(SUPERCMPEVENT_TWNEXT)

/**********************************************************************/
/*                     SuperCompact EndOfBurst macros                 */
/**********************************************************************/

#define SEOB_DCHPLANEHIT(x)       ISEB(SUPERENDOFBURST_DCHPLANEHIT+(x)-1)
#define SEOB_DCHCARDHIT(x)         ISEB(SUPERENDOFBURST_DCHCARDHIT+(x)-1)

#define SEOB_PISAMON_TIME          IEB(SUPERENDOFBURST_PISAMON+SUPERPISAMONITORS04_TIME)
#define SEOB_PISAMON_MAINZ(i)      IEB(SUPERENDOFBURST_PISAMON+SUPERPISAMONITORS04_MAINZ+(i)-1)
#define SEOB_PISAMON_NSAMPLE                  IEB(SUPERENDOFBURST_PISAMON+SUPERPISAMONITORS04_NSAMPLE)
#define SEOB_PISAMON_SAMPLE_CLOCK(i)          IEB(SUPERENDOFBURST_PISAMON+SUPERPISAMONITORS04_SAMPLE+(PISACOUNTERSAMPLE_SIZE*((i)-1))+PISACOUNTERSAMPLE_CLOCK)
#define SEOB_PISAMON_SAMPLE_PHASE(i)          IEB(SUPERENDOFBURST_PISAMON+SUPERPISAMONITORS04_SAMPLE+(PISACOUNTERSAMPLE_SIZE*((i)-1))+PISACOUNTERSAMPLE_PHASE)
#define SEOB_PISAMON_SAMPLE_EFFSPILL(i,j)     IEB(SUPERENDOFBURST_PISAMON+SUPERPISAMONITORS04_SAMPLE+(PISACOUNTERSAMPLE_SIZE*((i)-1))+PISACOUNTERSAMPLE_EFFSPILL+(j)-1)
#define SEOB_PISAMON_SAMPLE_MOM0_JURA(i)      QEB(SUPERENDOFBURST_PISAMON+SUPERPISAMONITORS04_SAMPLE+(PISACOUNTERSAMPLE_SIZE*((i)-1))+PISACOUNTERSAMPLE_MOM0_JURA)
#define SEOB_PISAMON_SAMPLE_MOM0_SALEVE(i)    QEB(SUPERENDOFBURST_PISAMON+SUPERPISAMONITORS04_SAMPLE+(PISACOUNTERSAMPLE_SIZE*((i)-1))+PISACOUNTERSAMPLE_MOM0_SALEVE)
#define SEOB_PISAMON_SAMPLE_MOM1_JURA(i,j)    QEB(SUPERENDOFBURST_PISAMON+SUPERPISAMONITORS04_SAMPLE+(PISACOUNTERSAMPLE_SIZE*((i)-1))+PISACOUNTERSAMPLE_MOM1_JURA+(j)-1)
#define SEOB_PISAMON_SAMPLE_MOM1_SALEVE(i,j)  QEB(SUPERENDOFBURST_PISAMON+SUPERPISAMONITORS04_SAMPLE+(PISACOUNTERSAMPLE_SIZE*((i)-1))+PISACOUNTERSAMPLE_MOM1_SALEVE+(j)-1)
#define SEOB_PISAMON_SAMPLE_MOM2_JURA(i,j)    QEB(SUPERENDOFBURST_PISAMON+SUPERPISAMONITORS04_SAMPLE+(PISACOUNTERSAMPLE_SIZE*((i)-1))+PISACOUNTERSAMPLE_MOM2_JURA+(j)-1)
#define SEOB_PISAMON_SAMPLE_MOM2_SALEVE(i,j)  QEB(SUPERENDOFBURST_PISAMON+SUPERPISAMONITORS04_SAMPLE+(PISACOUNTERSAMPLE_SIZE*((i)-1))+PISACOUNTERSAMPLE_MOM2_SALEVE+(j)-1)


/**********************************************************************/
/*                     SuperCompact Burst macros                      */
/**********************************************************************/

#define SBUR_TSSCAL_NSCALER         ISB(SUPERBURST_TSSCAL + STSSCAL_NSCALER)
#define SBUR_TSSCAL_SCALER(x)       ISB(SUPERBURST_TSSCAL + STSSCAL_SCALER + (x)-1)
#define SBUR_L2TSSCAL_NSCALER       ISB(SUPERBURST_L2TSSCAL + SL2TSSCAL_NSCALER)
#define SBUR_L2TSSCAL_SCALER(x)     ISB(SUPERBURST_L2TSSCAL + SL2TSSCAL_SCALER + (x)-1)

#define SBUR_MAJORVER    ISB(SUPERBURST_MAJORVER)
#define SBUR_MINORVER    ISB(SUPERBURST_MINORVER)
#define SBUR_PATCH       ISB(SUPERBURST_PATCH)
#define SBUR_TIME        ISB(SUPERBURST_TIME)
#define SBUR_BRTYPE      ISB(SUPERBURST_BRTYPE)
#define SBUR_NRUN        ISB(SUPERBURST_NRUN)
#define SBUR_NTRIGWORD   ISB(SUPERBURST_NTRIGWORD)
#define SBUR_DATASET     ISB(SUPERBURST_DATASET)
#define SBUR_INTENSITY   ISB(SUPERBURST_INTENSITY)
#define SBUR_INTENSITYT4 ISB(SUPERBURST_INTENSITYT4)
#define SBUR_BEND1CURRENT   ISB(SUPERBURST_BEND1CURRENT)
#define SBUR_MNP33CURRENT   ISB(SUPERBURST_MNP33CURRENT)
#define SBUR_KLINT       ISB(SUPERBURST_KLINT)
#define SBUR_KSINT       ISB(SUPERBURST_KSINT)
#define SBUR_CTAUORIGIN  ISB(SUPERBURST_CTAUORIGIN)
#define SBUR_TOFFSTVER   ISB(SUPERBURST_TOFFSTVER)
#define SBUR_DBERR       ISB(SUPERBURST_DBERR)

/**********************************************************************/
/*                      Time Offset Macros                            */
/**********************************************************************/
#define SBUR_TOFFST_TAG      QSB(SUPERBURST_TOFFST + SUPERTIMEOFFSET_TAG)
#define SBUR_TOFFST_AKS      QSB(SUPERBURST_TOFFST + SUPERTIMEOFFSET_AKS)
#define SBUR_TOFFST_KAB      QSB(SUPERBURST_TOFFST + SUPERTIMEOFFSET_KAB)
#define SBUR_TOFFST_NMV      QSB(SUPERBURST_TOFFST + SUPERTIMEOFFSET_NMV)
#define SBUR_TOFFST_AKL      QSB(SUPERBURST_TOFFST + SUPERTIMEOFFSET_AKL)
#define SBUR_TOFFST_HOD      QSB(SUPERBURST_TOFFST + SUPERTIMEOFFSET_HOD)
#define SBUR_TOFFST_NHO      QSB(SUPERBURST_TOFFST + SUPERTIMEOFFSET_NHO)
#define SBUR_TOFFST_DCH      QSB(SUPERBURST_TOFFST + SUPERTIMEOFFSET_DCH)
#define SBUR_TOFFST_LKR      QSB(SUPERBURST_TOFFST + SUPERTIMEOFFSET_LKR)
#define SBUR_TOFFST_HAC      QSB(SUPERBURST_TOFFST + SUPERTIMEOFFSET_HAC)
#define SBUR_TOFFST_MUV      QSB(SUPERBURST_TOFFST + SUPERTIMEOFFSET_MUV)
#define SBUR_TOFFST_LKRTAG   QSB(SUPERBURST_TOFFST + SUPERTIMEOFFSET_LKRTAG)
#define SBUR_TOFFST_LKRNHOD  QSB(SUPERBURST_TOFFST + SUPERTIMEOFFSET_LKRNHOD)
#define SBUR_TOFFST_LKRAKL   QSB(SUPERBURST_TOFFST + SUPERTIMEOFFSET_LKRAKL)
#define SBUR_TOFFST_LKRHAC   QSB(SUPERBURST_TOFFST + SUPERTIMEOFFSET_LKRHAC)
#define SBUR_TOFFST_KABPLUS  QSB(SUPERBURST_TOFFST + SUPERTIMEOFFSET_KABPLUS)
#define SBUR_TOFFST_KABMINUS QSB(SUPERBURST_TOFFST + SUPERTIMEOFFSET_KABMINUS)

/**********************************************************************/
/*                      BAD Burst Macros                              */
/**********************************************************************/
#define SBUR_BADB_CALL   ISB(SUPERBURST_BADB + BADBURST_CALL)
#define SBUR_BADB_SKIP   ISB(SUPERBURST_BADB + BADBURST_SKIP)
#define SBUR_BADB_LKR    ISB(SUPERBURST_BADB + BADBURST_LKR)
#define SBUR_BADB_DCH    ISB(SUPERBURST_BADB + BADBURST_DCH)
#define SBUR_BADB_NUT    ISB(SUPERBURST_BADB + BADBURST_NUT)
#define SBUR_BADB_MBX    ISB(SUPERBURST_BADB + BADBURST_MBX)
#define SBUR_BADB_HAC    ISB(SUPERBURST_BADB + BADBURST_HAC)
#define SBUR_BADB_TAG    ISB(SUPERBURST_BADB + BADBURST_TAG)
#define SBUR_BADB_MUV    ISB(SUPERBURST_BADB + BADBURST_MUV)
#define SBUR_BADB_HODC   ISB(SUPERBURST_BADB + BADBURST_HODC)
#define SBUR_BADB_HODN   ISB(SUPERBURST_BADB + BADBURST_HODN)
#define SBUR_BADB_PMB    ISB(SUPERBURST_BADB + BADBURST_PMB)
#define SBUR_BADB_AKS    ISB(SUPERBURST_BADB + BADBURST_AKS)
#define SBUR_BADB_AKL    ISB(SUPERBURST_BADB + BADBURST_AKL)
#define SBUR_BADB_CLK    ISB(SUPERBURST_BADB + BADBURST_CLK)
#define SBUR_BADB_KSM    ISB(SUPERBURST_BADB + BADBURST_KSM)
#define SBUR_BADB_KAB    ISB(SUPERBURST_BADB + BADBURST_KAB)
#define SBUR_BADB_NOEPS  ISB(SUPERBURST_BADB + BADBURST_NOEPS)
#define SBUR_BADB_PHYS   ISB(SUPERBURST_BADB + BADBURST_PHYS)
#define SBUR_BADB_SPARE1 ISB(SUPERBURST_BADB + BADBURST_SPARE1)
#define SBUR_BADB_SPARE2 ISB(SUPERBURST_BADB + BADBURST_SPARE2)
#define SBUR_BADB_SPARE3 ISB(SUPERBURST_BADB + BADBURST_SPARE3)
#define SBUR_BADB_SPARE4 ISB(SUPERBURST_BADB + BADBURST_SPARE4)

/* supermcEvent struct */
/* Some offsets are missing in offsets.h */
#define SUPERMCEVENT_SUPERMCDECAY 1
#define SUPERMCEVENT_SUPERMCNPARTICLE 10
#define SUPERMCEVENT_SUPERMCPARTICLE 11
#define SUPERMCEVENT_SUPERCMPEVENT 291 /* used to be 231. This has changed due to the introduction of spins */
#define SMCEVENT_DECAY_KTYPE      IMSE(SUPERMCEVENT_SUPERMCDECAY+SUPERMCDECAY_KTYPE)
#define SMCEVENT_DECAY_DTYPE      IMSE(SUPERMCEVENT_SUPERMCDECAY+SUPERMCDECAY_DTYPE)
#define SMCEVENT_DECAY_DVERTEX(x) QMSE(SUPERMCEVENT_SUPERMCDECAY+SUPERMCDECAY_DVERTEX+((x)-1))
#define SMCEVENT_DECAY_P(x)       QMSE(SUPERMCEVENT_SUPERMCDECAY+SUPERMCDECAY_P+((x)-1))

#define SMCEVENT_NPART             IMSE(SUPERMCEVENT_SUPERMCNPARTICLE)
#define SMCEVENT_PART_TYPE(x)      IMSE(SUPERMCEVENT_SUPERMCPARTICLE+SUPERMCPARTICLE_SIZE*((x)-1)+SUPERMCPARTICLE_TYPE)
#define SMCEVENT_PART_P(x,y)       QMSE(SUPERMCEVENT_SUPERMCPARTICLE+SUPERMCPARTICLE_SIZE*((x)-1)+SUPERMCPARTICLE_P+((y)-1))
#define SMCEVENT_PART_PVERTEX(x,y) QMSE(SUPERMCEVENT_SUPERMCPARTICLE+SUPERMCPARTICLE_SIZE*((x)-1)+SUPERMCPARTICLE_PVERTEX+((y)-1))
#define SMCEVENT_PART_DVERTEX(x,y) QMSE(SUPERMCEVENT_SUPERMCPARTICLE+SUPERMCPARTICLE_SIZE*((x)-1)+SUPERMCPARTICLE_DVERTEX+((y)-1))

#define SMCEVT_PTR         IMSE(1)

/* hypercompact structures */
/* hyperBurst structures */
#define HBUR_MAJORVER    IHB(HYPERBURST_MAJORVER)
#define HBUR_MINORVER    IHB(HYPERBURST_MINORVER)
#define HBUR_TIME        IHB(HYPERBURST_TIME)
#define HBUR_BRTYPE      IHB(HYPERBURST_BRTYPE)
#define HBUR_NRUN        IHB(HYPERBURST_NRUN)
#define HBUR_SAMPLE      IHB(HYPERBURST_SAMPLE)
#define HBUR_FLAG        IHB(HYPERBURST_FLAG)
#define HBUR_SPARE(x)    QHB(HYPERBURST_SPARE+((x)-1))

/**********************************************************************/
/*                      BAD Burst Macros                              */
/**********************************************************************/
#define HBUR_BADB_CALL   IHB(HYPERBURST_BADB + BADBURST_CALL)
#define HBUR_BADB_SKIP   IHB(HYPERBURST_BADB + BADBURST_SKIP)
#define HBUR_BADB_LKR    IHB(HYPERBURST_BADB + BADBURST_LKR)
#define HBUR_BADB_DCH    IHB(HYPERBURST_BADB + BADBURST_DCH)
#define HBUR_BADB_NUT    IHB(HYPERBURST_BADB + BADBURST_NUT)
#define HBUR_BADB_MBX    IHB(HYPERBURST_BADB + BADBURST_MBX)
#define HBUR_BADB_HAC    IHB(HYPERBURST_BADB + BADBURST_HAC)
#define HBUR_BADB_TAG    IHB(HYPERBURST_BADB + BADBURST_TAG)
#define HBUR_BADB_MUV    IHB(HYPERBURST_BADB + BADBURST_MUV)
#define HBUR_BADB_HODC   IHB(HYPERBURST_BADB + BADBURST_HODC)
#define HBUR_BADB_HODN   IHB(HYPERBURST_BADB + BADBURST_HODN)
#define HBUR_BADB_PMB    IHB(HYPERBURST_BADB + BADBURST_PMB)
#define HBUR_BADB_AKS    IHB(HYPERBURST_BADB + BADBURST_AKS)
#define HBUR_BADB_AKL    IHB(HYPERBURST_BADB + BADBURST_AKL)
#define HBUR_BADB_CLK    IHB(HYPERBURST_BADB + BADBURST_CLK)
#define HBUR_BADB_KSM    IHB(HYPERBURST_BADB + BADBURST_KSM)
#define HBUR_BADB_KAB    IHB(HYPERBURST_BADB + BADBURST_KAB)
#define HBUR_BADB_NOEPS  IHB(HYPERBURST_BADB + BADBURST_NOEPS)
#define HBUR_BADB_PHYS   IHB(HYPERBURST_BADB + BADBURST_PHYS)
#define HBUR_BADB_SPARE1 IHB(HYPERBURST_BADB + BADBURST_SPARE1)
#define HBUR_BADB_SPARE2 IHB(HYPERBURST_BADB + BADBURST_SPARE2)
#define HBUR_BADB_SPARE3 IHB(HYPERBURST_BADB + BADBURST_SPARE3)
#define HBUR_BADB_SPARE4 IHB(HYPERBURST_BADB + BADBURST_SPARE4)

/* hyper clusters */
#define HCLUSTER_ENERGY(x)  QHE(HYPERCMPEVENT_CLUSTER+HYPERCLUSTER_SIZE*((x)-1)+HYPERCLUSTER_ENERGY)
#define HCLUSTER_X(x)  QHE(HYPERCMPEVENT_CLUSTER+HYPERCLUSTER_SIZE*((x)-1)+HYPERCLUSTER_X)
#define HCLUSTER_Y(x)  QHE(HYPERCMPEVENT_CLUSTER+HYPERCLUSTER_SIZE*((x)-1)+HYPERCLUSTER_Y)
#define HCLUSTER_TIME(x)  QHE(HYPERCMPEVENT_CLUSTER+HYPERCLUSTER_SIZE*((x)-1)+HYPERCLUSTER_TIME)
#define HCLUSTER_RMSX(x)  QHE(HYPERCMPEVENT_CLUSTER+HYPERCLUSTER_SIZE*((x)-1)+HYPERCLUSTER_RMSX)
#define HCLUSTER_RMSY(x)  QHE(HYPERCMPEVENT_CLUSTER+HYPERCLUSTER_SIZE*((x)-1)+HYPERCLUSTER_RMSY)
#define HCLUSTER_DDEADCELL(x)  QHE(HYPERCMPEVENT_CLUSTER+HYPERCLUSTER_SIZE*((x)-1)+HYPERCLUSTER_DDEADCELL)
#define HCLUSTER_DTRACK(x)  QHE(HYPERCMPEVENT_CLUSTER+HYPERCLUSTER_SIZE*((x)-1)+HYPERCLUSTER_DTRACK)
#define HCLUSTER_FLAG(x)  IHE(HYPERCMPEVENT_CLUSTER+HYPERCLUSTER_SIZE*((x)-1)+HYPERCLUSTER_FLAG)
#define HCLUSTER_SPARE(x,y)  QHE(HYPERCMPEVENT_CLUSTER+HYPERCLUSTER_SIZE*((x)-1)+HYPERCLUSTER_SPARE+((y)-1))

/* hyper tracks */
#define HTRACK_Q(x)  IHE(HYPERCMPEVENT_TRACK+HYPERTRACK_SIZE*((x)-1)+HYPERTRACK_Q)
#define HTRACK_P(x)  QHE(HYPERCMPEVENT_TRACK+HYPERTRACK_SIZE*((x)-1)+HYPERTRACK_P)
#define HTRACK_PERR(x)  QHE(HYPERCMPEVENT_TRACK+HYPERTRACK_SIZE*((x)-1)+HYPERTRACK_PERR)
#define HTRACK_TIME(x)  QHE(HYPERCMPEVENT_TRACK+HYPERTRACK_SIZE*((x)-1)+HYPERTRACK_TIME)
#define HTRACK_HODOTIME(x)  QHE(HYPERCMPEVENT_TRACK+HYPERTRACK_SIZE*((x)-1)+HYPERTRACK_HODOTIME)
#define HTRACK_BX(x)  QHE(HYPERCMPEVENT_TRACK+HYPERTRACK_SIZE*((x)-1)+HYPERTRACK_BX)
#define HTRACK_BY(x)  QHE(HYPERCMPEVENT_TRACK+HYPERTRACK_SIZE*((x)-1)+HYPERTRACK_BY)
#define HTRACK_X(x)  QHE(HYPERCMPEVENT_TRACK+HYPERTRACK_SIZE*((x)-1)+HYPERTRACK_X)
#define HTRACK_Y(x)  QHE(HYPERCMPEVENT_TRACK+HYPERTRACK_SIZE*((x)-1)+HYPERTRACK_Y)
#define HTRACK_BDXDZ(x)  QHE(HYPERCMPEVENT_TRACK+HYPERTRACK_SIZE*((x)-1)+HYPERTRACK_BDXDZ)
#define HTRACK_BDYDZ(x)  QHE(HYPERCMPEVENT_TRACK+HYPERTRACK_SIZE*((x)-1)+HYPERTRACK_BDYDZ)
#define HTRACK_NBFBDXDZ(x)  QHE(HYPERCMPEVENT_TRACK+HYPERTRACK_SIZE*((x)-1)+HYPERTRACK_NBFBDXDZ)
#define HTRACK_NBFBDYDZ(x)  QHE(HYPERCMPEVENT_TRACK+HYPERTRACK_SIZE*((x)-1)+HYPERTRACK_NBFBDYDZ)
#define HTRACK_DXDZ(x)  QHE(HYPERCMPEVENT_TRACK+HYPERTRACK_SIZE*((x)-1)+HYPERTRACK_DXDZ)
#define HTRACK_DYDZ(x)  QHE(HYPERCMPEVENT_TRACK+HYPERTRACK_SIZE*((x)-1)+HYPERTRACK_DYDZ)
#define HTRACK_EOP(x)  QHE(HYPERCMPEVENT_TRACK+HYPERTRACK_SIZE*((x)-1)+HYPERTRACK_EOP)
#define HTRACK_FLAG(x)  IHE(HYPERCMPEVENT_TRACK+HYPERTRACK_SIZE*((x)-1)+HYPERTRACK_FLAG)
#define HTRACK_SPARE(x,y)  QHE(HYPERCMPEVENT_TRACK+HYPERTRACK_SIZE*((x)-1)+HYPERTRACK_SPARE+((y)-1))

/* hyper KABES tracks */
#define HKABTRK_P(x)  QHE(HYPERCMPEVENT_KABTRK+HYPERKABTRK_SIZE*((x)-1)+HYPERKABTRK_P)
#define HKABTRK_Q(x)  IHE(HYPERCMPEVENT_KABTRK+HYPERKABTRK_SIZE*((x)-1)+HYPERKABTRK_Q)
#define HKABTRK_UPORDOWN(x)  IHE(HYPERCMPEVENT_KABTRK+HYPERKABTRK_SIZE*((x)-1)+HYPERKABTRK_UPORDOWN)
#define HKABTRK_PERR(x)  QHE(HYPERCMPEVENT_KABTRK+HYPERKABTRK_SIZE*((x)-1)+HYPERKABTRK_PERR)
#define HKABTRK_CHI2(x)  QHE(HYPERCMPEVENT_KABTRK+HYPERKABTRK_SIZE*((x)-1)+HYPERKABTRK_CHI2)
#define HKABTRK_X(x)  QHE(HYPERCMPEVENT_KABTRK+HYPERKABTRK_SIZE*((x)-1)+HYPERKABTRK_X)
#define HKABTRK_Y(x)  QHE(HYPERCMPEVENT_KABTRK+HYPERKABTRK_SIZE*((x)-1)+HYPERKABTRK_Y)
#define HKABTRK_YUORD(x)  QHE(HYPERCMPEVENT_KABTRK+HYPERKABTRK_SIZE*((x)-1)+HYPERKABTRK_YUORD)
#define HKABTRK_TIME(x)  QHE(HYPERCMPEVENT_KABTRK+HYPERKABTRK_SIZE*((x)-1)+HYPERKABTRK_TIME)
#define HKABTRK_DXDZ(x)  QHE(HYPERCMPEVENT_KABTRK+HYPERKABTRK_SIZE*((x)-1)+HYPERKABTRK_DXDZ)
#define HKABTRK_DYDZ(x)  QHE(HYPERCMPEVENT_KABTRK+HYPERKABTRK_SIZE*((x)-1)+HYPERKABTRK_DYDZ)

/* hyper vertex */
#define HVTX_Q(x)  IHE(HYPERCMPEVENT_VTX+HYPERVERTEX_SIZE*((x)-1)+HYPERVERTEX_Q)
#define HVTX_MASS(x)  QHE(HYPERCMPEVENT_VTX+HYPERVERTEX_SIZE*((x)-1)+HYPERVERTEX_MASS)
#define HVTX_P(x)  QHE(HYPERCMPEVENT_VTX+HYPERVERTEX_SIZE*((x)-1)+HYPERVERTEX_P)
#define HVTX_CDA(x)  QHE(HYPERCMPEVENT_VTX+HYPERVERTEX_SIZE*((x)-1)+HYPERVERTEX_CDA)
#define HVTX_POS(x,y)  QHE(HYPERCMPEVENT_VTX+HYPERVERTEX_SIZE*((x)-1)+HYPERVERTEX_POS+((y)-1))
#define HVTX_SPARE(x,y)  QHE(HYPERCMPEVENT_VTX+HYPERVERTEX_SIZE*((x)-1)+HYPERVERTEX_SPARE+((y)-1))

/* hyper MC  */
#define HPART_TYPE(x)           IHE(HYPERCMPEVENT_MCPAR+HYPERMCPARTICLE_SIZE*((x)-1)+HYPERMCPARTICLE_TYPE)
#define HPART_P(x,y)            QHE(HYPERCMPEVENT_MCPAR+HYPERMCPARTICLE_SIZE*((x)-1)+HYPERMCPARTICLE_P+((y)-1))
#define HPART_PVERTEX(x,y)      QHE(HYPERCMPEVENT_MCPAR+HYPERMCPARTICLE_SIZE*((x)-1)+HYPERMCPARTICLE_PVERTEX+((y)-1))
#define HPART_DVERTEX(x,y)      QHE(HYPERCMPEVENT_MCPAR+HYPERMCPARTICLE_SIZE*((x)-1)+HYPERMCPARTICLE_DVERTEX+((y)-1))

/* hyper event */
#define HEVT_FLAG  IHE(HYPERCMPEVENT_FLAG)
#define HEVT_TIMESTAMP  IHE(HYPERCMPEVENT_TIMESTAMP)
#define HEVT_SPSPHASE  QHE(HYPERCMPEVENT_SPSPHASE)
#define HEVT_MAINSPHASE  QHE(HYPERCMPEVENT_MAINSPHASE)
#define HEVT_TRIGWORD  IHE(HYPERCMPEVENT_TRIGWORD)
#define HEVT_PU04(x)  IHE(HYPERCMPEVENT_PU04+((x)-1))
#define HEVT_PU14(x)  IHE(HYPERCMPEVENT_PU14+((x)-1))
#define HEVT_PU06(x)  IHE(HYPERCMPEVENT_PU06+((x)-1))
#define HEVT_NCLUSTER  IHE(HYPERCMPEVENT_NCLUSTER)
#define HEVT_NTRACK  IHE(HYPERCMPEVENT_NTRACK)
#define HEVT_NMCPART  IHE(HYPERCMPEVENT_NMCPART)
#define HEVT_SPARE(x)  QHE(HYPERCMPEVENT_SPARE+((x)-1))
/**********************************************************************/
/*  2007 new variables added                                          */
/**********************************************************************/
/*  CHARGED HODOSCOPE                                                 */
/**********************************************************************/
#define SHOD_PHEIGHT(x)			QSE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_P)
#define SHOD_COUNTER(x)			ISE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_Q)
#define SHOD_PDSFLAG(x)	                ISE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_UPORDOWN)
#define SHOD_TIME(x)			QSE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_PERR)
#define SHOD_X(x)			QSE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_X)
#define SHOD_Y(x)			QSE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_Y)
/**********************************************************************/
/*  NEUTRAL HODOSCOPE                                                 */
/**********************************************************************/
#define SNHO_PHEIGHT(x)			QSE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_CHI2)
#define SNHO_TIME(x)			QSE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_TIME)
#define SNHO_PDSFLAG(x)                 ISE(SUPERCMPEVENT_MCH+((x)-1)*MACHIT_SIZE+MACHIT_PDSFLAG)
#define SNHO_COUNTER(x)                 QSE(SUPERCMPEVENT_MCH+((x)-1)*MACHIT_SIZE+MACHIT_PHEIGHT)
/**********************************************************************/
/*  NEW LKr VARIABLES                                                 */
/**********************************************************************/
#define SCLUSTER_TLATCELL(x)		QSE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_TIMEUORD)
#define SCLUSTER_UCENERGY(x)            QSE(SUPERCMPEVENT_CLUSTER+CLUSTER_SIZE*((x)-1)+CLUSTER_SPARE+(5)-1)
#define SCLUSTER_SPACHACORR(x)          QSE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_SIGYY)
#define SCLUSTER_E77(x)                 QSE(SUPERCMPEVENT_CLUSTER+CLUSTER_SIZE*((x)-1)+CLUSTER_SPARE+(4)-1)
#define SCLUSTER_ECELLMAX(x)            QSE(SUPERCMPEVENT_CLUSTER+CLUSTER_SIZE*((x)-1)+CLUSTER_SPARE+(3)-1)
#define SCLUSTER_E2SAMPALL(x)           QSE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_SIGDYDY)
#define SCLUSTER_GAINMAX(x)		ISE(SUPERCMPEVENT_KABSTRAK+KABSTRACK_SIZE*((x)-1)+KABSTRACK_RECFLAG)
/**********************************************************************/
/*  CHARGED HOD WITH OR WITHOUT TRACK ASSOCIATED                              */
/**********************************************************************/
#define SHODNEUT_PULSE(x)               QSE(SUPERCMPEVENT_HACCLUS+((x)-1)*HACCLUS_SIZE+HACCLUS_ENERGY)
#define SHODNEUT_COUNTER(x)             QSE(SUPERCMPEVENT_HACCLUS+((x)-1)*HACCLUS_SIZE+HACCLUS_X)
#define SHODNEUT_PDSFLAG(x)             QSE(SUPERCMPEVENT_HACCLUS+((x)-1)*HACCLUS_SIZE+HACCLUS_Y)
#define SHODNEUT_TIME(x)                QSE(SUPERCMPEVENT_HACCLUS+((x)-1)*HACCLUS_SIZE+HACCLUS_TIME)
/**********************************************************************/
/*  2007 NEW FLAGS AND COUNTERS                                       */
/**********************************************************************/
#define SEVT_NHOERRFLAG                 ISE(SUPERCMPEVENT_MCH+((1)-1)*MACHIT_SIZE+MACHIT_COUNTER)
#define SEVT_NHOSTATUS                  ISE(SUPERCMPEVENT_MCH+((1)-1+1)*MACHIT_SIZE+MACHIT_COUNTER)
#define SEVT_HODERRFLAG                 ISE(SUPERCMPEVENT_MCH+((1)-1+2)*MACHIT_SIZE+MACHIT_COUNTER)
#define SEVT_HODSTATUS                  ISE(SUPERCMPEVENT_MCH+((1)-1+3)*MACHIT_SIZE+MACHIT_COUNTER)
#define SEVT_NNHO                       ISE(SUPERCMPEVENT_MCH+((1)-1+4)*MACHIT_SIZE+MACHIT_COUNTER)
#define SEVT_NHOD                       ISE(SUPERCMPEVENT_MCH+((1)-1+5)*MACHIT_SIZE+MACHIT_COUNTER)
#define SEVT_HODNEUTFLAG                QSE(SUPERCMPEVENT_HACENERGY)
#define SEVT_NHODNEUT           	ISE(SUPERCMPEVENT_NHACCLUS)

#endif
/*
 *
 * $Log: compactF77.h,v $
 * Revision 2.71  2008/04/23 07:05:14  venelin
 * yUpdated filling of the SCMP empty structures!
 *
 * Revision 2.69  2005/06/06 10:25:04  venelin
 * FORTRAN variables deffinitions for HC MC event's structure
 *
 * Revision 2.68  2005/03/07 17:03:49  venelin
 * Fixed wrong value of the variable SCLUSTER_ITRACK()
 *
 * Revision 2.67  2005/01/31 17:30:26  venelin
 * Fotran HC variables definitions for KABES
 *
 * Revision 2.66  2004/10/25 17:26:37  clemenci
 * added pisa monitor data to superEndofBurst
 *
 * Revision 2.65  2004/10/25 13:07:08  clemenci
 * added fortran interface for [s]evt->*phaseRaw, and eob->pisaMon...
 * fixed few types (Q.. was used instead of I..)
 *
 * Revision 2.64  2004/09/28 16:04:44  goylopez
 * Definition of kabes scmp variables sigdxdx, sigdydy
 *
 * Revision 2.63  2004/07/22 15:03:49  goylopez
 * HYPER BAD BURSTS added. Also added Kabes times in different stations.
 *
 * Revision 2.62  2004/07/18 21:34:39  clemenci
 * BUR_TOFFST_VERSION was deleted by mistake
 *
 * Revision 2.61  2004/07/18 18:34:35  goylopez
 * Updated fortran interface
 *
 * Revision 2.60  2004/07/11 02:41:26  clemenci
 * added ACALL_SEL3PIC, ACALL_SEL3PIN, EVT_LKRDOWNSCALED and SEVT_LKRDOWNSCALED
 *
 * Revision 2.59  2004/03/17 10:06:13  goylopez
 * Fixing typo on STRACK_AKLFLAG
 *
 * Revision 2.58  2004/02/23 10:22:04  andrew
 * Added SKABTRAK macros to satisfy the documentation
 *
 * Revision 2.57  2004/02/20 10:31:07  goylopez
 * Fixed KABSTRACK_Q variable
 *
 * Revision 2.56  2004/02/19 15:20:02  goylopez
 *      Defining hypercompact fortran variables
 *
 * Revision 2.55  2004/02/19 14:10:58  goylopez
 * Test if I can write
 *
 * Revision 2.54  2004/02/18 10:03:13  andrew
 * fixed somy typo
 *
 * Revision 2.53  2004/02/18 09:48:31  andrew
 * Changed order of strucutures to enable documentation script
 *
 * Revision 2.52  2004/02/16 13:44:56  andrew
 * Added STRACK_AKLFLAG and CLUSTER_AKLFALG
 *
 * Revision 2.51  2003/12/16 11:43:34  andrew
 * fixed KAB_STRIP_NHIT(x,y) KAB_STRIP_HIT_TLEAD(x,y,z) KAB_STRIP_HIT_TTRAIL(x,y,z) KAB_STRIP_HIT_TRACKID(x,y,z)
 *
 * Revision 2.50  2003/12/16 09:37:36  andrew
 * Fixed  KAB_STRIP_NHIT
 *
 * Revision 2.49  2003/12/01 17:09:09  andrew
 * Next attempt to fix kabes variables
 *
 * Revision 2.48  2003/12/01 16:38:51  andrew
 * Added macros for kabes hits
 *
 * Revision 2.47  2003/11/17 11:25:28  andrew
 * Added missing STRACK_SPARE variable
 *
 * Revision 2.46  2003/10/27 17:23:55  andrew
 * Added KABES structures for Supercompact
 *
 * Revision 2.45  2003/10/08 08:26:54  andrew
 * Added EVT_NKABHIT and EVT_NKABTRK
 *
 * Revision 2.44  2003/09/10 13:48:43  andrew
 * Added missing SBUR_BEND1CURRENT
 *
 * Revision 2.43  2003/09/03 14:58:47  andrew
 * Fixed the chkF77SuperCmpEvent. some cluster variables appeared to be off by one
 *
 * Revision 2.42  2003/09/03 12:24:45  andrew
 * Removed a tab in the declaration of intensityT4 in superBurst. This messes up
 * the offsets.h file
 *
 * added SBUR_INTENSITYT4 which was missing
 *
 * Revision 2.41  2003/08/13 09:20:23  andrew
 * Added missing VTXTRACK structure
 *
 * Revision 2.40  2003/07/31 13:11:15  andrew
 * Rundependant behaviour changed for getNUT.c (Anne)
 *
 * updated compactF77.h for missing constants (Flavio)
 *
 * fixed a typo in getDchEvent.c (introduced last commit)
 *
 * Revision 2.39  2003/07/02 10:45:26  andrew
 * compact-7.0.x:
 * * Added momentum error to superCompact tracks
 * * Created a tOffset structure for supercompact with Kab and Nmv labels
 *
 * compactF77.h:
 * * added STRACK_PERR
 *
 * fuser_vertexntrk.F:
 * Added a SuperCompact version of the Vertex fit
 *
 * CmpTimeOffset.c:
 * Changes due to introduces Kab and Nmv time offsets (see above)
 *
 * cmp2scmpTrack.c:
 * added perr to the conversion
 *
 * Revision 2.38  2003/06/23 13:34:01  biino
 * adde chkF77VERTEX routine, a few corrections to compactF77.h (vertex variables)
 *
 * Revision 2.37  2003/06/23 09:38:18  andrew
 * Added VERTEX_NITRACK and VERTEX_ITRACK FORTRAN variables
 *
 * Revision 2.36  2003/06/04 14:26:48  biino
 * added Pisabeammon and Magnetprobe code, added checking c vs. F variables routines,
 * fixed error in definition of vertexcorr_iptrack and intrack , added checking routines
 * to Makefile
 *
 * Revision 2.35  2003/05/19 13:30:37  biino
 * added a check routine for KABtracks
 *
 * Revision 2.34  2003/05/14 15:27:16  biino
 * Added checks on c and fortran variables in chkF77Burst.c
 * and updated compact.h and compactF77.h
 *
 * Revision 2.33  2003/05/13 08:36:58  biino
 * introduce missing variables to be checked in routine chkF77geom and correction
 * in fortran definition of variables
 *
 * Revision 2.32  2003/03/20 15:12:27  andrew
 * Changed SUPERMCEVENT_SUPERCMPEVENT to reflect the introduction of spin in the
 * MC
 *
 * Revision 2.31  2003/03/14 15:28:55  andrew
 * Quite a nuber of changes:
 *
 * * libcompact now compiles without any compiler warnings, except for
 * the compac_xdr files which are generated by rpcgen
 *
 * * Tried to update (not finished yet) the F77checking routines
 *
 * * Defined just about all prototypes
 *
 * Revision 2.30  2003/03/11 14:23:50  andrew
 * Fixed typo with sbur_minorver
 *
 * Revision 2.29  2003/02/27 16:45:56  andrew
 * Yet another typo
 *
 * Revision 2.28  2003/02/27 09:02:11  andrew
 * Yes another typo in SPMUON_CHANNEL
 *
 * Revision 2.27  2003/02/26 16:03:20  andrew
 * Fixed a missing ) for the HACCLUS entries
 *
 * Revision 2.26  2003/02/26 16:02:41  andrew
 * Fixed missing braces adround the PMUON entries
 *
 * Revision 2.25  2003/02/18 14:46:07  andrew
 * Fixed Fortran variables for NHACCLUS HACCLUS structure and NPMUON
 *
 * Revision 2.24  2003/01/24 08:18:11  andrew
 * Fixed STRACK_HODSTATUS
 *
 * Revision 2.23  2003/01/20 16:35:46  andrew
 * Added more variables for F77 (muon, track)
 *
 * Revision 2.22  2002/11/28 17:36:14  andrew
 * Changed the names of teh Supercompact EOF variables to
 * somewhat more human readable.
 * Also reduced the size of DCHplanehit( was SGNineff) form 384 to 32
 *
 * Revision 2.21  2002/11/28 15:10:07  mmartini
 * put into the fortran version of SUPERENDOFBURST
 *
 * Revision 2.20  2002/11/15 14:38:05  mmartini
 * fortran translation
 *
 * Revision 2.19  2002/11/13 15:40:23  mmartini
 *  add akltime67 aklflag67 in supercompact
 *
 * Revision 2.18  2002/11/06 11:00:05  mmartini
 * add fortran interface for new L3 trigwords.
 *
 * Nothing done to L3include
 *
 * Revision 2.17  2002/10/30 13:31:49  mmartini
 * changed prototypes, and name of fortran interface and CTAU_ORIGIN
 *
 * Revision 2.16  2002/10/24 14:40:12  mmartini
 * added fortran interface for  sbur->NtrigWord, sbur->TSscal.scaler[100], sbur->L2TSscaler.scaler[20]
 *
 * Revision 2.15  2002/10/24 08:00:10  andrew
 * Fixed bug in SMUON_STATUS ( was shifted by 1 for FORTRAN)
 *
 * Revision 2.14  2002/10/22 14:52:40  mmartini
 *   6.2 version and upodate DCHmult variables
 *
 * Revision 2.13  2002/10/18 13:30:37  mmartini
 * inplement some fortran interface for pi0ee
 *
 * Revision 2.11  2002/10/18 13:00:32  mmartini
 * fix the HYp summary indexes
 *
 * Revision 2.10  2002/10/16 13:47:56  mmartini
 *  some fortran variables missing (from Flavio Marchetto)
 *
 * Revision 2.9  2002/08/27 16:11:13  andrew
 * Added missing AKL variables in the SEVT structure
 *
 * Revision 2.8  2002/08/07 09:12:25  mmartini
 * fixed the fortran variable interface for HYP summary
 *
 * Revision 2.7  2002/08/03 13:36:57  andrew
 * A small mistake in the fortran interface of the hypxi summary
 *
 * Fortran users should be charged Eur 1.00 for each variable used
 *
 * Revision 2.6  2002/08/03 12:56:37  andrew
 * Added the varibales for the hypxi summary
 *
 * Revision 2.5  2002/07/24 09:50:33  mmartini
 *  fix the name of the NRO variables
 *  and sdevstatus variables for fortran
 *
 * Revision 2.4  2002/07/12 15:14:03  mmartini
 *  fix of some fortran variables of DCHNRO structure
 *
 * Revision 2.3  2002/07/08 10:16:54  andrew
 * Some misspelled variables for the supercompact vtx and fourvtx structures
 * found. No need to recompile the libraies. Fortran now should be happy
 *
 * Revision 2.2  2002/07/05 16:42:38  andrew
 * Still two missing symbols for the fortran interface: SEVT_NVTX, SEVT_NFOURVTX
 *
 * Revision 2.1  2002/07/05 13:44:17  mmartini
 * fortran variable for fourtrack structure in supercompact
 *
 * Revision 2.0  2002/06/19 08:56:06  andrew
 * Release of compact-6.0.0
 *
 * Revision 1.5  2002/06/05 12:43:04  mmartini
 * update the definition of the fortran variables:
 * in summary neut ---> z, ctau, ekaon, time, errtime
 * in summary char      ivtx DCHclutime ctau time errtime
 * --the muon summary
 * --the SCvertex structure
 * --the muon structure
 * --the PUtslice structure
 *
 * Revision 1.4  2002/05/29 11:14:15  andrew
 * Changed the name of the Supercompact vertexstructure from vertex to SCvertex
 * Changed the name of the vertex variable in sevt from vertex to vtx
 *
 * Both changes are necessary because of name
 * clashes in the FORTRAN interface.
 *
 *
 */
